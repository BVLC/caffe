#include <algorithm>
#include <vector>

#include "caffe/layer.hpp"
<<<<<<< ef48dd03cce8b66ce612ed57bea741fd034dae0c
#include "caffe/util/io.hpp"
#include "caffe/util/math_functions.hpp"
#include "caffe/vision_layers.hpp"
=======
#include "caffe/vision_layers.hpp"
#include "caffe/util/io.hpp"
#include "caffe/util/math_functions.hpp"
>>>>>>> GPU version added

namespace caffe {

template <typename Dtype>
void TripletLossLayer<Dtype>::Forward_gpu(
    const vector<Blob<Dtype>*>& bottom,
    const vector<Blob<Dtype>*>& top) {
<<<<<<< 8bea48cb77e890cda255da58b142f3a402196328
<<<<<<< ef48dd03cce8b66ce612ed57bea741fd034dae0c
=======
>>>>>>> No sclice layer version which could forward a set of triplets together with 1 pair wise
  Dtype margin = this->layer_param_.triplet_loss_param().margin();
  Dtype losstype = this->layer_param_.triplet_loss_param().losstype();
  int num_triplets = this->layer_param_.triplet_loss_param().num_triplets();
  CHECK_EQ(bottom[0]->num()%(2 + num_triplets), 0);
  Dtype loss(0.0);
  int dim = bottom[0]->count()/bottom[0]->num();
  int num_set = bottom[0]->num()/(2 + num_triplets);
  if (losstype == 0) {
  for (int i = 0; i < num_set; ++i) {
<<<<<<< cc0e95492e5b127808b90dc9698f4969fd706b03
    caffe_gpu_sub(
=======
    caffe_sub(
>>>>>>> No sclice layer version which could forward a set of triplets together with 1 pair wise
        dim,
        bottom[0]->gpu_data() + (2 + num_triplets)*i*dim,  // reference
        bottom[0]->gpu_data() + ((2 + num_triplets)*i + 1)*dim,  // positive
        diff_pos.mutable_gpu_data() + i*dim);  // reference-pose_close
<<<<<<< cc0e95492e5b127808b90dc9698f4969fd706b03
    caffe_gpu_dot(
        dim,
        diff_pos.gpu_data() + i*dim,
        diff_pos.gpu_data() + i*dim,
        dist_sq_pos.mutable_cpu_data() + i);
=======
    caffe_gpu_powx(
        dim,
        diff_pos.mutable_gpu_data() + i*dim,  // reference-pose_close
        Dtype(2),
        diff_sq_pos.mutable_gpu_data());  // (reference-pose_close)^2
    // Loss component calculated from reference and close one
    caffe_gpu_gemv(
        CblasNoTrans,
        num_set,
        bottom[0]->channels(),
        Dtype(1.0),
        diff_sq_pos.gpu_data(),  // (reference-pose_close)^2
        summer_vec_.gpu_data(),
        Dtype(0.0),
        dist_sq_pos.mutable_gpu_data() + i);  // \Sum (reference-pose_close)^2
>>>>>>> No sclice layer version which could forward a set of triplets together with 1 pair wise
    // a b is a similar pair for pair wise
    // loss accumulated by the pair wise part
    loss += dist_sq_pos.gpu_data()[i];
    for (int triplet = 0; triplet < num_triplets; ++triplet) {
      // Triplet loss accumulation
      // a and negative[triplet] is a similar pair for triplet
      dist_sq_.mutable_gpu_data()[i] = dist_sq_pos.gpu_data()[i];
      // Loss component calculated from negative part
<<<<<<< cc0e95492e5b127808b90dc9698f4969fd706b03
      caffe_gpu_sub(
=======
      caffe_sub(
>>>>>>> No sclice layer version which could forward a set of triplets together with 1 pair wise
          dim,
          bottom[0]->gpu_data() + (2 + num_triplets)*i*dim,  // reference
          bottom[0]->gpu_data() + ((2 + num_triplets)*i + 2 + triplet)*dim,
          diff_neg.mutable_gpu_data() + i*dim);  // reference-negative
<<<<<<< cc0e95492e5b127808b90dc9698f4969fd706b03
      caffe_gpu_dot(
          dim,
          diff_neg.gpu_data() + i*dim,
          diff_neg.gpu_data() + i*dim,
          dist_sq_neg.mutable_cpu_data() + i);
=======
    caffe_gpu_powx(
        dim,
        diff_neg.mutable_gpu_data() + i*dim,  // reference-pose_close
        Dtype(2),
        diff_sq_neg.mutable_gpu_data());  // (reference-pose_close)^2
    // Loss component calculated from reference and close one
    caffe_gpu_gemv(
        CblasNoTrans,
        num_set,
        bottom[0]->channels(),
        Dtype(1.0),
        diff_sq_neg.gpu_data(),  // (reference-pose_close)^2
        summer_vec_.gpu_data(),
        Dtype(0.0),
        dist_sq_neg.mutable_gpu_data() + i);  // \Sum (reference-pose_close)^2
>>>>>>> No sclice layer version which could forward a set of triplets together with 1 pair wise
      // a and negative[triplet] is a dissimilar pair for triplet
      dist_sq_.mutable_gpu_data()[i] -= dist_sq_neg.gpu_data()[i];
      // loss accumulated accumulated by the triplet part
      loss += std::max(margin + dist_sq_.gpu_data()[i], Dtype(0.0));
    }
  }
  loss = loss / static_cast<Dtype>(num_set) / Dtype(2);
  top[0]->mutable_gpu_data()[0] = loss;
  } else {
  for (int i = 0; i < num_set; ++i) {
<<<<<<< cc0e95492e5b127808b90dc9698f4969fd706b03
    caffe_gpu_sub(
=======
    caffe_sub(
>>>>>>> No sclice layer version which could forward a set of triplets together with 1 pair wise
        dim,
        bottom[0]->gpu_data() + (2 + num_triplets)*i*dim,  // reference
        bottom[0]->gpu_data() + ((2 + num_triplets)*i + 1)*dim,  // positive
        diff_pos.mutable_gpu_data() + i*dim);  // reference-pose_close
    // Loss component calculated from reference and close one
<<<<<<< cc0e95492e5b127808b90dc9698f4969fd706b03
    caffe_gpu_dot(
        dim,
        diff_pos.gpu_data() + i*dim,
        diff_pos.gpu_data() + i*dim,
        dist_sq_pos.mutable_cpu_data() + i);
    // a b is a similar pair for pair wise
    // loss accumulated by the pair wise part
    loss += dist_sq_pos.gpu_data()[i];
    for (int triplet = 0; triplet < num_triplets; ++triplet) {
      dist_sq_.mutable_gpu_data()[i] = dist_sq_pos.mutable_gpu_data()[i];
      dist_sq_.mutable_gpu_data()[i] += margin;
      // Loss component calculated from negative part
      caffe_gpu_sub(
=======
    caffe_gpu_powx(
        dim,
        diff_pos.mutable_gpu_data() + i*dim,  // reference-pose_close
        Dtype(2),
        diff_sq_pos.mutable_gpu_data());  // (reference-pose_close)^2
    // Loss component calculated from reference and close one
    caffe_gpu_gemv(
        CblasNoTrans,
        num_set,
        bottom[0]->channels(),
        Dtype(1.0),
        diff_sq_pos.gpu_data(),  // (reference-pose_close)^2
        summer_vec_.gpu_data(),
        Dtype(0.0),
        dist_sq_pos.mutable_gpu_data() + i);  // \Sum (reference-pose_close)^2
    // a b is a similar pair for pair wise
    // loss accumulated by the pair wise part
    loss += dist_sq_pos.gpu_data()[i];
    dist_sq_.mutable_gpu_data()[i] = dist_sq_pos.mutable_gpu_data()[i];
    dist_sq_.mutable_gpu_data()[i] += margin;
    for (int triplet = 0; triplet < num_triplets; ++triplet) {
      // Loss component calculated from negative part
      caffe_sub(
>>>>>>> No sclice layer version which could forward a set of triplets together with 1 pair wise
          dim,
          bottom[0]->gpu_data() + (2 + num_triplets)*i*dim,  // reference
          bottom[0]->gpu_data() + ((2 + num_triplets)*i + 2 + triplet)*dim,
          diff_neg.mutable_gpu_data() + i*dim);  // reference-negative
<<<<<<< cc0e95492e5b127808b90dc9698f4969fd706b03
      caffe_gpu_dot(
          dim,
          diff_neg.gpu_data() + i*dim,
          diff_neg.gpu_data() + i*dim,
          dist_sq_neg.mutable_cpu_data() + i);
=======
    caffe_gpu_powx(
        dim,
        diff_neg.mutable_gpu_data() + i*dim,  // reference-pose_close
        Dtype(2),
        diff_sq_neg.mutable_gpu_data());  // (reference-pose_close)^2
    // Loss component calculated from reference and close one
    caffe_gpu_gemv(
        CblasNoTrans,
        num_set,
        bottom[0]->channels(),
        Dtype(1.0),
        diff_sq_neg.gpu_data(),  // (reference-pose_close)^2
        summer_vec_.gpu_data(),
        Dtype(0.0),
        dist_sq_neg.mutable_gpu_data() + i);  // \Sum (reference-pose_close)^2
>>>>>>> No sclice layer version which could forward a set of triplets together with 1 pair wise
      // a and negative[triplet] is a dissimilar pair for triplet
      dist_sq_.mutable_gpu_data()[i] = 1 - \
        dist_sq_neg.gpu_data()[i] / dist_sq_.mutable_gpu_data()[i];
      // loss accumulated accumulated by the triplet part
      loss += std::max(dist_sq_.gpu_data()[i], Dtype(0.0));
    }
  }
  loss = loss / static_cast<Dtype>(num_set) / Dtype(2);
  top[0]->mutable_gpu_data()[0] = loss;
  }
<<<<<<< 8bea48cb77e890cda255da58b142f3a402196328
=======
  int count = bottom[0]->count();
  caffe_gpu_sub(
      count,
      bottom[0]->gpu_data(),  // a
      bottom[1]->gpu_data(),  // b
      diff_pos.mutable_gpu_data());  // a_i-b_i
  caffe_gpu_sub(
      count,
      bottom[0]->gpu_data(),  // a
      bottom[2]->gpu_data(),  // c
      diff_neg.mutable_gpu_data());  // a_i-c_i
  caffe_gpu_powx(
      count,
      diff_pos.mutable_gpu_data(),  // a_i-b_i
      Dtype(2),
      diff_sq_pos.mutable_gpu_data());  // (a_i-b_i)^2
  caffe_gpu_powx(
      count,
      diff_neg.mutable_gpu_data(),  // a_i-c_i
      Dtype(2),
      diff_sq_neg.mutable_gpu_data());  // (a_i-c_i)^2
  const int channels = bottom[0]->channels();
  Dtype margin = this->layer_param_.triplet_loss_param().margin();
  Dtype loss(0.0);
  // Loss component calculated from ab
  for (int i = 0; i < bottom[0]->num(); ++i) {
    /*dist_sq_pos.mutable_gpu_data()[i] = caffe_gpu_dot(channels,
        diff_pos.gpu_data() + (i*channels), diff_pos.gpu_data() + (i*channels));*/
    // ab is a similar pair
    dist_sq_.mutable_gpu_data()[i] = dist_sq_pos.gpu_data()[i];
    // Loss component calculated from ac
    /*dist_sq_neg.mutable_gpu_data()[i] = caffe_gpu_dot(channels,
        diff_neg.gpu_data() + (i*channels), diff_neg.gpu_data() + (i*channels));*/
    // ac is a dissimilar pair
    dist_sq_.mutable_gpu_data()[i] -= dist_sq_neg.gpu_data()[i];
    loss += std::max(margin + dist_sq_.gpu_data()[i], Dtype(0.0));
  }
  loss = loss / static_cast<Dtype>(bottom[0]->num()) / Dtype(2);
  top[0]->mutable_gpu_data()[0] = loss;
>>>>>>> GPU version added
=======
>>>>>>> No sclice layer version which could forward a set of triplets together with 1 pair wise
}

template <typename Dtype>
void TripletLossLayer<Dtype>::Backward_gpu(const vector<Blob<Dtype>*>& top,
    const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom) {
  Dtype margin = this->layer_param_.triplet_loss_param().margin();
<<<<<<< ef48dd03cce8b66ce612ed57bea741fd034dae0c
  Dtype losstype = this->layer_param_.triplet_loss_param().losstype();
  int num_triplets = this->layer_param_.triplet_loss_param().num_triplets();
  int dim = bottom[0]->count()/bottom[0]->num();
  int num_set = bottom[0]->num()/(2 + num_triplets);
  if (losstype == 0) {
  // BP for feat1(extracted from reference)
  for (int i = 0; i < 1; ++i) {
    if (propagate_down[0]) {
      const Dtype sign = 1;
      const Dtype alpha = sign * top[0]->gpu_diff()[0] /
          static_cast<Dtype>(num_set);
      for (int j = 0; j < num_set; ++j) {
        Dtype* bout = bottom[0]->mutable_gpu_diff();
        // the pair part
        caffe_gpu_axpby(
            dim,
            alpha,
            diff_pos.gpu_data() + (j*dim),
            Dtype(0.0),
            bout + ((2 + num_triplets)*j + i)*dim);
        // the num_triplets triplet part
        for (int triplet = 0; triplet < num_triplets; ++triplet) {
<<<<<<< cc0e95492e5b127808b90dc9698f4969fd706b03
          caffe_gpu_sub(
=======
          caffe_sub(
>>>>>>> No sclice layer version which could forward a set of triplets together with 1 pair wise
              dim,
              bottom[0]->gpu_data() + (2 + num_triplets)*j*dim,  // reference
              bottom[0]->gpu_data() + ((2 + num_triplets)*j + 2 + triplet)*dim,
              diff_neg.mutable_gpu_data() + j*dim);  // reference-negative
<<<<<<< cc0e95492e5b127808b90dc9698f4969fd706b03
          caffe_gpu_dot(
              dim,
              diff_neg.gpu_data() + j*dim,
              diff_neg.gpu_data() + j*dim,
              dist_sq_neg.mutable_cpu_data() + j);
=======
    caffe_gpu_powx(
        dim,
        diff_neg.mutable_gpu_data() + j*dim,  // reference-pose_close
        Dtype(2),
        diff_sq_neg.mutable_gpu_data());  // (reference-pose_close)^2
    // Loss component calculated from reference and close one
    caffe_gpu_gemv(
        CblasNoTrans,
        num_set,
        bottom[0]->channels(),
        Dtype(1.0),
        diff_sq_neg.gpu_data(),  // (reference-pose_close)^2
        summer_vec_.gpu_data(),
        Dtype(0.0),
        dist_sq_neg.mutable_gpu_data() + j);  // \Sum (reference-pose_close)^2
>>>>>>> No sclice layer version which could forward a set of triplets together with 1 pair wise
          // Triplet loss accumulation
          // a and negative[triplet] is a similar pair for triplet
          dist_sq_.mutable_gpu_data()[j] = dist_sq_pos.gpu_data()[j];
          // a and negative[triplet] is a dissimilar pair for triplet
          dist_sq_.mutable_gpu_data()[j] -= dist_sq_neg.gpu_data()[j];
          // Loss component calculated from negative part
          if ((margin + dist_sq_.gpu_data()[j]) > Dtype(0.0)) {
            // similar pair in triplet
            caffe_gpu_axpby(
                dim,
                alpha,
                diff_pos.gpu_data() + (j*dim),
                Dtype(1.0),
                bout + (2 + num_triplets)*j*dim);
            // dissimilar pair in triplet
            caffe_gpu_axpby(
                dim,
                -alpha,
                diff_neg.gpu_data() + (j*dim),
                Dtype(1.0),
                bout + ((2 + num_triplets)*j + i)*dim);
          }
        }
      }
    }
  }
  // BP for feat2(extracted from the closest sample)
  for (int i = 1; i < 2; ++i) {
    if (propagate_down[0]) {
      const Dtype sign = -1;
      const Dtype alpha = sign * top[0]->gpu_diff()[0] /
          static_cast<Dtype>(num_set);
      for (int j = 0; j < num_set; ++j) {
        Dtype* bout = bottom[0]->mutable_gpu_diff();
        // the pair part
        caffe_gpu_axpby(
            dim,
            alpha,
            diff_pos.gpu_data() + (j*dim),
            Dtype(0.0),
            bout + ((2 + num_triplets)*j + i)*dim);
        // the num_triplets triplet part
        for (int triplet = 0; triplet < num_triplets; ++triplet) {
<<<<<<< cc0e95492e5b127808b90dc9698f4969fd706b03
          caffe_gpu_sub(
=======
          caffe_sub(
>>>>>>> No sclice layer version which could forward a set of triplets together with 1 pair wise
              dim,
              bottom[0]->gpu_data() + (2 + num_triplets)*j*dim,  // reference
              bottom[0]->gpu_data() + ((2 + num_triplets)*j + 2 + triplet)*dim,
              diff_neg.mutable_gpu_data() + j*dim);  // reference-negative
          // Triplet loss accumulation
          // a and negative[triplet] is a similar pair for triplet
          dist_sq_.mutable_gpu_data()[j] = dist_sq_pos.gpu_data()[j];
<<<<<<< cc0e95492e5b127808b90dc9698f4969fd706b03
          caffe_gpu_dot(
              dim,
              diff_neg.gpu_data() + j*dim,
              diff_neg.gpu_data() + j*dim,
              dist_sq_neg.mutable_cpu_data() + j);
=======
    caffe_gpu_powx(
        dim,
        diff_neg.mutable_gpu_data() + j*dim,  // reference-pose_close
        Dtype(2),
        diff_sq_neg.mutable_gpu_data());  // (reference-pose_close)^2
    // Loss component calculated from reference and close one
    caffe_gpu_gemv(
        CblasNoTrans,
        num_set,
        bottom[0]->channels(),
        Dtype(1.0),
        diff_sq_neg.gpu_data(),  // (reference-pose_close)^2
        summer_vec_.gpu_data(),
        Dtype(0.0),
        dist_sq_neg.mutable_gpu_data() + j);  // \Sum (reference-pose_close)^2
>>>>>>> No sclice layer version which could forward a set of triplets together with 1 pair wise
          // a and negative[triplet] is a dissimilar pair for triplet
          dist_sq_.mutable_gpu_data()[j] -= dist_sq_neg.gpu_data()[j];
          if ((margin + dist_sq_.gpu_data()[j]) > Dtype(0.0)) {
            // similar pair in triplet
            caffe_gpu_axpby(
                dim,
                alpha,
                diff_pos.gpu_data() + (j*dim),
                Dtype(1.0),
                bout + ((2 + num_triplets)*j + i)*dim);
          }
        }
      }
    }
  }
  // BP for negative feature used in the num_triplets triplet part
  for (int i = 2; i < 2 + num_triplets; ++i) {
    if (propagate_down[0]) {
      const Dtype sign = 1;
      const Dtype alpha = sign * top[0]->gpu_diff()[0] /
          static_cast<Dtype>(num_set);
      for (int j = 0; j < num_set; ++j) {
        Dtype* bout = bottom[0]->mutable_gpu_diff();
<<<<<<< cc0e95492e5b127808b90dc9698f4969fd706b03
        caffe_gpu_sub(
=======
        caffe_sub(
>>>>>>> No sclice layer version which could forward a set of triplets together with 1 pair wise
            dim,
            bottom[0]->gpu_data() + (2 + num_triplets)*j*dim,  // reference
            bottom[0]->gpu_data() + ((2 + num_triplets)*j + i)*dim,
            diff_neg.mutable_gpu_data() + j*dim);  // reference-negative
        // Triplet loss accumulation
        // a and negative[triplet] is a similar pair for triplet
        dist_sq_.mutable_gpu_data()[j] = dist_sq_pos.gpu_data()[j];
<<<<<<< cc0e95492e5b127808b90dc9698f4969fd706b03
        caffe_gpu_dot(
            dim,
            diff_neg.gpu_data() + j*dim,
            diff_neg.gpu_data() + j*dim,
            dist_sq_neg.mutable_cpu_data() + j);
=======
    caffe_gpu_powx(
        dim,
        diff_neg.mutable_gpu_data() + j*dim,  // reference-pose_close
        Dtype(2),
        diff_sq_neg.mutable_gpu_data());  // (reference-pose_close)^2
    // Loss component calculated from reference and close one
    caffe_gpu_gemv(
        CblasNoTrans,
        num_set,
        bottom[0]->channels(),
        Dtype(1.0),
        diff_sq_neg.gpu_data(),  // (reference-pose_close)^2
        summer_vec_.gpu_data(),
        Dtype(0.0),
        dist_sq_neg.mutable_gpu_data() + j);  // \Sum (reference-pose_close)^2
>>>>>>> No sclice layer version which could forward a set of triplets together with 1 pair wise
        // a and negative[triplet] is a dissimilar pair for triplet
        dist_sq_.mutable_gpu_data()[j] -= dist_sq_neg.gpu_data()[j];
        if ((margin + dist_sq_.gpu_data()[j]) > Dtype(0.0)) {
          // dissimilar pairs
          caffe_gpu_axpby(
              dim,
              alpha,
              diff_neg.gpu_data() + (j*dim),
              Dtype(0.0),
              bout + ((2 + num_triplets)*j + i)*dim);
        } else {
<<<<<<< cc0e95492e5b127808b90dc9698f4969fd706b03
            caffe_gpu_set(dim, Dtype(0), bout + ((2 + num_triplets)*j + i)*dim);
=======
            caffe_set(dim, Dtype(0), bout + ((2 + num_triplets)*j + i)*dim);
>>>>>>> No sclice layer version which could forward a set of triplets together with 1 pair wise
        }
      }
    }
  }
  } else {
  for (int i = 0; i < 1; ++i) {
    // BP for data1(feat1)
    if (propagate_down[0]) {
      const Dtype sign = 1;
      const Dtype alpha = sign * top[0]->gpu_diff()[0] /
          static_cast<Dtype>(num_set);
      for (int j = 0; j < num_set; ++j) {
        Dtype* bout = bottom[0]->mutable_gpu_diff();
        // the pair part
        caffe_gpu_axpby(
            dim,
            alpha,
            diff_pos.gpu_data() + (j*dim),
            Dtype(0.0),
            bout + ((2 + num_triplets)*j + i)*dim);
<<<<<<< cc0e95492e5b127808b90dc9698f4969fd706b03
        // the num_triplets triplet part
        for (int triplet = 0; triplet < num_triplets; ++triplet) {
          dist_sq_.mutable_gpu_data()[j] = dist_sq_pos.mutable_gpu_data()[j];
          dist_sq_.mutable_gpu_data()[j] += margin;
          // Loss component calculated from negative part
          caffe_gpu_sub(
=======
        dist_sq_.mutable_gpu_data()[j] = dist_sq_pos.mutable_gpu_data()[j];
        dist_sq_.mutable_gpu_data()[j] += margin;
        // the num_triplets triplet part
        for (int triplet = 0; triplet < num_triplets; ++triplet) {
          // Loss component calculated from negative part
          caffe_sub(
>>>>>>> No sclice layer version which could forward a set of triplets together with 1 pair wise
              dim,
              bottom[0]->gpu_data() + (2 + num_triplets)*j*dim,  // reference
              bottom[0]->gpu_data() + ((2 + num_triplets)*j + 2 + triplet)*dim,
              diff_neg.mutable_gpu_data() + j*dim);  // reference-negative
<<<<<<< cc0e95492e5b127808b90dc9698f4969fd706b03
          caffe_gpu_dot(
              dim,
              diff_neg.gpu_data() + j*dim,
              diff_neg.gpu_data() + j*dim,
              dist_sq_neg.mutable_cpu_data() + j);
=======
    caffe_gpu_powx(
        dim,
        diff_neg.mutable_gpu_data() + j*dim,  // reference-pose_close
        Dtype(2),
        diff_sq_neg.mutable_gpu_data());  // (reference-pose_close)^2
    // Loss component calculated from reference and close one
    caffe_gpu_gemv(
        CblasNoTrans,
        num_set,
        bottom[0]->channels(),
        Dtype(1.0),
        diff_sq_neg.gpu_data(),  // (reference-pose_close)^2
        summer_vec_.gpu_data(),
        Dtype(0.0),
        dist_sq_neg.mutable_gpu_data() + j);  // \Sum (reference-pose_close)^2
>>>>>>> No sclice layer version which could forward a set of triplets together with 1 pair wise
          // a and negative[triplet] is a dissimilar pair for triplet
          dist_sq_.mutable_gpu_data()[j] = 1 - \
            dist_sq_neg.gpu_data()[j] / dist_sq_.mutable_gpu_data()[j];
          // loss accumulated accumulated by the triplet part
          if ((dist_sq_.gpu_data()[j]) > Dtype(0.0)) {
            caffe_gpu_axpby(
                dim,
                alpha*dist_sq_neg.mutable_gpu_data()[j]\
  /((dist_sq_pos.mutable_gpu_data()[j]+margin)\
  *(dist_sq_pos.mutable_gpu_data()[j]+margin)),
                diff_pos.gpu_data() + (j*dim),
                Dtype(1.0),
                bout + ((2 + num_triplets)*j + i)*dim);
            caffe_gpu_axpby(
                dim,
                -alpha/(dist_sq_pos.mutable_gpu_data()[j] + margin),
                diff_neg.gpu_data() + (j*dim),
                Dtype(1.0),
                bout + ((2 + num_triplets)*j + i)*dim);
          }
        }
      }
    }
  }
  for (int i = 1; i < 2; ++i) {
    // BP for positive data(feat2)
    if (propagate_down[0]) {
      const Dtype sign = -1;
      const Dtype alpha = sign * top[0]->gpu_diff()[0] /
          static_cast<Dtype>(num_set);
      for (int j = 0; j < num_set; ++j) {
        Dtype* bout = bottom[0]->mutable_gpu_diff();
        // the pair part
        caffe_gpu_axpby(
            dim,
            alpha,
            diff_pos.gpu_data() + (j*dim),
            Dtype(0.0),
            bout + ((2 + num_triplets)*j + i)*dim);
<<<<<<< cc0e95492e5b127808b90dc9698f4969fd706b03
        // the num_triplets triplet part
        for (int triplet = 0; triplet < num_triplets; ++triplet) {
          dist_sq_.mutable_gpu_data()[j] = dist_sq_pos.mutable_gpu_data()[j];
          dist_sq_.mutable_gpu_data()[j] += margin;
          // Loss component calculated from negative part
          caffe_gpu_sub(
=======
        dist_sq_.mutable_gpu_data()[j] = dist_sq_pos.mutable_gpu_data()[j];
        dist_sq_.mutable_gpu_data()[j] += margin;
        // the num_triplets triplet part
        for (int triplet = 0; triplet < num_triplets; ++triplet) {
          // Loss component calculated from negative part
          caffe_sub(
>>>>>>> No sclice layer version which could forward a set of triplets together with 1 pair wise
              dim,
              bottom[0]->gpu_data() + (2 + num_triplets)*j*dim,  // reference
              bottom[0]->gpu_data() + ((2 + num_triplets)*j + 2 + triplet)*dim,
              diff_neg.mutable_gpu_data() + j*dim);  // reference-negative
<<<<<<< cc0e95492e5b127808b90dc9698f4969fd706b03
          caffe_gpu_dot(
              dim,
              diff_neg.gpu_data() + j*dim,
              diff_neg.gpu_data() + j*dim,
              dist_sq_neg.mutable_cpu_data() + j);
=======
    caffe_gpu_powx(
        dim,
        diff_neg.mutable_gpu_data() + j*dim,  // reference-pose_close
        Dtype(2),
        diff_sq_neg.mutable_gpu_data());  // (reference-pose_close)^2
    // Loss component calculated from reference and close one
    caffe_gpu_gemv(
        CblasNoTrans,
        num_set,
        bottom[0]->channels(),
        Dtype(1.0),
        diff_sq_neg.gpu_data(),  // (reference-pose_close)^2
        summer_vec_.gpu_data(),
        Dtype(0.0),
        dist_sq_neg.mutable_gpu_data() + j);  // \Sum (reference-pose_close)^2
>>>>>>> No sclice layer version which could forward a set of triplets together with 1 pair wise
          // a and negative[triplet] is a dissimilar pair for triplet
          dist_sq_.mutable_gpu_data()[j] = 1 - \
            dist_sq_neg.gpu_data()[j] / dist_sq_.mutable_gpu_data()[j];
          // loss accumulated accumulated by the triplet part
          if ((dist_sq_.gpu_data()[j]) > Dtype(0.0)) {
            caffe_gpu_axpby(
                dim,
                alpha*dist_sq_neg.mutable_gpu_data()[j]\
  /((dist_sq_pos.mutable_gpu_data()[j]+margin)\
  *(dist_sq_pos.mutable_gpu_data()[j]+margin)),
                diff_pos.gpu_data() + (j*dim),
                Dtype(1.0),
                bout + ((2 + num_triplets)*j + i)*dim);
          }
        }
      }
    }
  }
  for (int i = 2; i < 2 + num_triplets; ++i) {
    // BP for negative data(feat3)
    if (propagate_down[0]) {
      const Dtype sign = 1;
      const Dtype alpha = sign * top[0]->gpu_diff()[0] /
          static_cast<Dtype>(num_set);
      for (int j = 0; j < num_set; ++j) {
        Dtype* bout = bottom[0]->mutable_gpu_diff();
        dist_sq_.mutable_gpu_data()[j] = dist_sq_pos.mutable_gpu_data()[j];
        dist_sq_.mutable_gpu_data()[j] += margin;
        // Loss component calculated from negative part
<<<<<<< cc0e95492e5b127808b90dc9698f4969fd706b03
        caffe_gpu_sub(
=======
        caffe_sub(
>>>>>>> No sclice layer version which could forward a set of triplets together with 1 pair wise
            dim,
            bottom[0]->gpu_data() + (2 + num_triplets)*j*dim,  // reference
            bottom[0]->gpu_data() + ((2 + num_triplets)*j + i)*dim,
            diff_neg.mutable_gpu_data() + j*dim);  // reference-negative
<<<<<<< cc0e95492e5b127808b90dc9698f4969fd706b03
        caffe_gpu_dot(
            dim,
            diff_neg.gpu_data() + j*dim,
            diff_neg.gpu_data() + j*dim,
            dist_sq_neg.mutable_cpu_data() + j);
=======
    caffe_gpu_powx(
        dim,
        diff_neg.mutable_gpu_data() + j*dim,  // reference-pose_close
        Dtype(2),
        diff_sq_neg.mutable_gpu_data());  // (reference-pose_close)^2
    // Loss component calculated from reference and close one
    caffe_gpu_gemv(
        CblasNoTrans,
        num_set,
        bottom[0]->channels(),
        Dtype(1.0),
        diff_sq_neg.gpu_data(),  // (reference-pose_close)^2
        summer_vec_.gpu_data(),
        Dtype(0.0),
        dist_sq_neg.mutable_gpu_data() + j);  // \Sum (reference-pose_close)^2
>>>>>>> No sclice layer version which could forward a set of triplets together with 1 pair wise
        // a and negative[triplet] is a dissimilar pair for triplet
        dist_sq_.mutable_gpu_data()[j] = 1 - \
          dist_sq_neg.gpu_data()[j] / dist_sq_.mutable_gpu_data()[j];
        // loss accumulated accumulated by the triplet part
        if ((dist_sq_.gpu_data()[j]) > Dtype(0.0)) {
          caffe_gpu_axpby(
              dim,
              alpha/(dist_sq_pos.mutable_gpu_data()[j] + margin),
              diff_neg.gpu_data() + (j*dim),
              Dtype(0.0),
              bout + ((2 + num_triplets)*j + i)*dim);
        } else {
<<<<<<< cc0e95492e5b127808b90dc9698f4969fd706b03
            caffe_gpu_set(dim, Dtype(0), bout + ((2 + num_triplets)*j + i)*dim);
=======
<<<<<<< 8bea48cb77e890cda255da58b142f3a402196328
// there must be further check to ensure the gradient calc
    if (propagate_down[0]) {
      const Dtype sign = 1;
      const Dtype alpha = sign * top[0]->gpu_diff()[0] /
          static_cast<Dtype>(bottom[0]->num());
      int num = bottom[0]->num();
      int channels = bottom[0]->channels();
      for (int j = 0; j < num; ++j) {
        Dtype* bout = bottom[0]->mutable_gpu_diff();
        if ((margin + dist_sq_.gpu_data()[j]) > Dtype(0.0)) {
        // similar pairs
          caffe_gpu_axpby(
              channels,
              alpha,
              diff_pos.gpu_data() + (j*channels),
              Dtype(0.0),
              bout + (j*channels));
        // dissimilar pairs
          caffe_gpu_axpby(
              channels,
              -alpha,
              diff_neg.gpu_data() + (j*channels),
              Dtype(1.0),
              bout + (j*channels));
        } else {
            caffe_set(channels, Dtype(0), bout + (j*channels));
        }
      }
    }
  for (int i = 1; i < 3; ++i) {
// there must be further check to ensure the gradient calc
    if (propagate_down[i]) {
      const Dtype sign = (i == 1) ? -1 : 1;
      const Dtype alpha = sign * top[0]->gpu_diff()[0] /
          static_cast<Dtype>(bottom[i]->num());
      int num = bottom[i]->num();
      int channels = bottom[i]->channels();
      for (int j = 0; j < num; ++j) {
        Dtype* bout = bottom[i]->mutable_gpu_diff();
        if ((margin + dist_sq_.gpu_data()[j]) > Dtype(0.0)) {
          if (i == 1) {
        // similar pairs
          caffe_gpu_axpby(
              channels,
              alpha,
              diff_pos.gpu_data() + (j*channels),
              Dtype(0.0),
              bout + (j*channels));
          }
          else {
        // dissimilar pairs
          caffe_gpu_axpby(
              channels,
              alpha,
              diff_neg.gpu_data() + (j*channels),
              Dtype(0.0),
              bout + (j*channels));
          }
        } else {
            caffe_set(channels, Dtype(0), bout + (j*channels));
>>>>>>> GPU version added
=======
            caffe_set(dim, Dtype(0), bout + ((2 + num_triplets)*j + i)*dim);
>>>>>>> No sclice layer version which could forward a set of triplets together with 1 pair wise
>>>>>>> No sclice layer version which could forward a set of triplets together with 1 pair wise
        }
      }
    }
  }
<<<<<<< 8bea48cb77e890cda255da58b142f3a402196328
<<<<<<< ef48dd03cce8b66ce612ed57bea741fd034dae0c
=======
>>>>>>> No sclice layer version which could forward a set of triplets together with 1 pair wise
  }
=======
>>>>>>> GPU version added
}

#ifdef CPU_ONLY
STUB_GPU(TripletLossLayer);
#endif

INSTANTIATE_CLASS(TripletLossLayer);
REGISTER_LAYER_CLASS(TripletLoss);

}  // namespace caffe
