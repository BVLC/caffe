#include <vector>

#include "caffe/data_layers.hpp"

namespace caffe {

template <typename Dtype>
void BasePrefetchingDataLayer<Dtype>::Forward_gpu(
    const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top) {
  Batch<Dtype>* batch = prefetch_full_.pop("Data layer prefetch queue empty");
  // Reshape to loaded data.
<<<<<<< 5546b4830f2232a8d56abfe594140c1462a420f5
<<<<<<< 4d8130bab0c7311e241e40f504e5fdbb4999bd84
  top[0]->ReshapeLike(batch->data_);
=======
  top[0]->ReshapeLike(this->prefetch_data_);
>>>>>>> macro define in upgrade_proto
=======
<<<<<<< 6c5f31d1aa704b9eb9cfe7469b0e3661f0fcdb21
  top[0]->ReshapeLike(batch->data_);
=======
  top[0]->Reshape(this->prefetch_data_.num(), this->prefetch_data_.channels(),
      this->prefetch_data_.height(), this->prefetch_data_.width());
>>>>>>> triplet data generation and network update
>>>>>>> triplet data generation and network update
  // Copy the data
  caffe_copy(batch->data_.count(), batch->data_.gpu_data(),
      top[0]->mutable_gpu_data());
  if (this->output_labels_) {
<<<<<<< 5546b4830f2232a8d56abfe594140c1462a420f5
    // Reshape to loaded labels.
<<<<<<< 4d8130bab0c7311e241e40f504e5fdbb4999bd84
=======
<<<<<<< 6c5f31d1aa704b9eb9cfe7469b0e3661f0fcdb21
    // Reshape to loaded labels.
>>>>>>> triplet data generation and network update
    top[1]->ReshapeLike(batch->label_);
    // Copy the labels.
    caffe_copy(batch->label_.count(), batch->label_.gpu_data(),
=======
<<<<<<< 5546b4830f2232a8d56abfe594140c1462a420f5
    top[1]->ReshapeLike(prefetch_label_);
    // Copy the labels.
    caffe_copy(prefetch_label_.count(), prefetch_label_.cpu_data(),
>>>>>>> macro define in upgrade_proto
=======
    caffe_copy(prefetch_label_.count(), prefetch_label_.cpu_data(),
>>>>>>> triplet data generation and network update
>>>>>>> triplet data generation and network update
        top[1]->mutable_gpu_data());
  }
  // Ensure the copy is synchronous wrt the host, so that the next batch isn't
  // copied in meanwhile.
  CUDA_CHECK(cudaStreamSynchronize(cudaStreamDefault));
  prefetch_free_.push(batch);
}

INSTANTIATE_LAYER_GPU_FORWARD(BasePrefetchingDataLayer);

}  // namespace caffe
