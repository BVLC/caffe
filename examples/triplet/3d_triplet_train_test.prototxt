name: "3d_triplet_train_test"
layer {
  name: "triplet_data"
  type: "Data"
  top: "triplet_data"
  top: "sim"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/triplet/3d_triplet_train_leveldb"
    batch_size: 23
  }
}
layer {
  name: "triplet_data"
  type: "Data"
  top: "triplet_data"
  top: "sim"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/triplet/3d_triplet_test_leveldb"
    batch_size: 23
  }
}
layer {
  name: "slice_triplet"
  type: "Slice"
  bottom: "triplet_data"
  top: "data"
  top: "data_true"
  top: "data_false"
  top: "data_p1"
  top: "data_p2"
  slice_param {
    slice_dim: 1
    slice_point: 1
    slice_point: 2
    slice_point: 3
    slice_point: 4
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    name: "conv1_w"
    lr_mult: 1
  }
  param {
    name: "conv1_b"
    lr_mult: 2
  }
  convolution_param {
    num_output: 16
    kernel_size: 8
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "pool1"
  top: "pool1"
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    name: "conv2_w"
    lr_mult: 1
  }
  param {
    name: "conv2_b"
    lr_mult: 2
  }
  convolution_param {
    num_output: 7
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "pool2"
  top: "pool2"
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool2"
  top: "ip1"
  param {
    name: "ip1_w"
    lr_mult: 1
  }
  param {
    name: "ip1_b"
    lr_mult: 2
  }
  inner_product_param {
    num_output: 256
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "feat"
  type: "InnerProduct"
  bottom: "ip1"
  top: "feat"
  param {
    name: "feat_w"
    lr_mult: 1
  }
  param {
    name: "feat_b"
    lr_mult: 2
  }
  inner_product_param {
    num_output: 4
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "conv1_true"
  type: "Convolution"
  bottom: "data_true"
  top: "conv1_true"
  param {
    name: "conv1_w"
    lr_mult: 1
  }
  param {
    name: "conv1_b"
    lr_mult: 2
  }
  convolution_param {
    num_output: 16
    kernel_size: 8
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1_true"
  type: "Pooling"
  bottom: "conv1_true"
  top: "pool1_true"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "relu1_true"
  type: "ReLU"
  bottom: "pool1_true"
  top: "pool1_true"
}
layer {
  name: "conv2_true"
  type: "Convolution"
  bottom: "pool1_true"
  top: "conv2_true"
  param {
    name: "conv2_w"
    lr_mult: 1
  }
  param {
    name: "conv2_b"
    lr_mult: 2
  }
  convolution_param {
    num_output: 7
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool2_true"
  type: "Pooling"
  bottom: "conv2_true"
  top: "pool2_true"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "relu2_true"
  type: "ReLU"
  bottom: "pool2_true"
  top: "pool2_true"
}
layer {
  name: "ip1_true"
  type: "InnerProduct"
  bottom: "pool2_true"
  top: "ip1_true"
  param {
    name: "ip1_w"
    lr_mult: 1
  }
  param {
    name: "ip1_b"
    lr_mult: 2
  }
  inner_product_param {
    num_output: 256
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3_true"
  type: "ReLU"
  bottom: "ip1_true"
  top: "ip1_true"
}
layer {
  name: "feat_true"
  type: "InnerProduct"
  bottom: "ip1_true"
  top: "feat_true"
  param {
    name: "feat_w"
    lr_mult: 1
  }
  param {
    name: "feat_b"
    lr_mult: 2
  }
  inner_product_param {
    num_output: 4
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "conv1_false"
  type: "Convolution"
  bottom: "data_false"
  top: "conv1_false"
  param {
    name: "conv1_w"
    lr_mult: 1
  }
  param {
    name: "conv1_b"
    lr_mult: 2
  }
  convolution_param {
    num_output: 16
    kernel_size: 8
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1_false"
  type: "Pooling"
  bottom: "conv1_false"
  top: "pool1_false"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "relu1_false"
  type: "ReLU"
  bottom: "pool1_false"
  top: "pool1_false"
}
layer {
  name: "conv2_false"
  type: "Convolution"
  bottom: "pool1_false"
  top: "conv2_false"
  param {
    name: "conv2_w"
    lr_mult: 1
  }
  param {
    name: "conv2_b"
    lr_mult: 2
  }
  convolution_param {
    num_output: 7
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool2_false"
  type: "Pooling"
  bottom: "conv2_false"
  top: "pool2_false"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "relu2_false"
  type: "ReLU"
  bottom: "pool2_false"
  top: "pool2_false"
}
layer {
  name: "ip1_false"
  type: "InnerProduct"
  bottom: "pool2_false"
  top: "ip1_false"
  param {
    name: "ip1_w"
    lr_mult: 1
  }
  param {
    name: "ip1_b"
    lr_mult: 2
  }
  inner_product_param {
    num_output: 256
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3_false"
  type: "ReLU"
  bottom: "ip1_false"
  top: "ip1_false"
}
layer {
  name: "feat_false"
  type: "InnerProduct"
  bottom: "ip1_false"
  top: "feat_false"
  param {
    name: "feat_w"
    lr_mult: 1
  }
  param {
    name: "feat_b"
    lr_mult: 2
  }
  inner_product_param {
    num_output: 4
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "conv1_p1"
  type: "Convolution"
  bottom: "data_p1"
  top: "conv1_p1"
  param {
    name: "conv1_w"
    lr_mult: 1
  }
  param {
    name: "conv1_b"
    lr_mult: 2
  }
  convolution_param {
    num_output: 16
    kernel_size: 8
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1_p1"
  type: "Pooling"
  bottom: "conv1_p1"
  top: "pool1_p1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "relu1_p1"
  type: "ReLU"
  bottom: "pool1_p1"
  top: "pool1_p1"
}
layer {
  name: "conv2_p1"
  type: "Convolution"
  bottom: "pool1_p1"
  top: "conv2_p1"
  param {
    name: "conv2_w"
    lr_mult: 1
  }
  param {
    name: "conv2_b"
    lr_mult: 2
  }
  convolution_param {
    num_output: 7
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool2_p1"
  type: "Pooling"
  bottom: "conv2_p1"
  top: "pool2_p1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "relu2_p1"
  type: "ReLU"
  bottom: "pool2_p1"
  top: "pool2_p1"
}
layer {
  name: "ip1_p1"
  type: "InnerProduct"
  bottom: "pool2_p1"
  top: "ip1_p1"
  param {
    name: "ip1_w"
    lr_mult: 1
  }
  param {
    name: "ip1_b"
    lr_mult: 2
  }
  inner_product_param {
    num_output: 256
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3_p1"
  type: "ReLU"
  bottom: "ip1_p1"
  top: "ip1_p1"
}
layer {
  name: "feat_p1"
  type: "InnerProduct"
  bottom: "ip1_p1"
  top: "feat_p1"
  param {
    name: "feat_w"
    lr_mult: 1
  }
  param {
    name: "feat_b"
    lr_mult: 2
  }
  inner_product_param {
    num_output: 4
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "conv1_p2"
  type: "Convolution"
  bottom: "data_p2"
  top: "conv1_p2"
  param {
    name: "conv1_w"
    lr_mult: 1
  }
  param {
    name: "conv1_b"
    lr_mult: 2
  }
  convolution_param {
    num_output: 16
    kernel_size: 8
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1_p2"
  type: "Pooling"
  bottom: "conv1_p2"
  top: "pool1_p2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "relu1_p2"
  type: "ReLU"
  bottom: "pool1_p2"
  top: "pool1_p2"
}
layer {
  name: "conv2_p2"
  type: "Convolution"
  bottom: "pool1_p2"
  top: "conv2_p2"
  param {
    name: "conv2_w"
    lr_mult: 1
  }
  param {
    name: "conv2_b"
    lr_mult: 2
  }
  convolution_param {
    num_output: 7
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool2_p2"
  type: "Pooling"
  bottom: "conv2_p2"
  top: "pool2_p2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "relu2_p2"
  type: "ReLU"
  bottom: "pool2_p2"
  top: "pool2_p2"
}
layer {
  name: "ip1_p2"
  type: "InnerProduct"
  bottom: "pool2_p2"
  top: "ip1_p2"
  param {
    name: "ip1_w"
    lr_mult: 1
  }
  param {
    name: "ip1_b"
    lr_mult: 2
  }
  inner_product_param {
    num_output: 256
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3_p2"
  type: "ReLU"
  bottom: "ip1_p2"
  top: "ip1_p2"
}
layer {
  name: "feat_p2"
  type: "InnerProduct"
  bottom: "ip1_p2"
  top: "feat_p2"
  param {
    name: "feat_w"
    lr_mult: 1
  }
  param {
    name: "feat_b"
    lr_mult: 2
  }
  inner_product_param {
    num_output: 4
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "loss"
  type: "TripletLoss"
  bottom: "feat"
  bottom: "feat_true"
  bottom: "feat_false"
  bottom: "feat_p1"
  bottom: "feat_p2"
  bottom: "sim"
  top: "loss"
  triplet_loss_param {
    margin: 1
  }
}

