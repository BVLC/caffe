!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ADD_FAILURE	src/gtest/gtest.h	/^#define ADD_FAILURE(/;"	d
ADD_FAILURE_AT	src/gtest/gtest.h	/^#define ADD_FAILURE_AT(/;"	d
ALLOWED_IMAGE_EXTENSIONS	examples/web_demo/app.py	/^ALLOWED_IMAGE_EXTENSIONS = set(['png', 'bmp', 'jpg', 'jpe', 'jpeg', 'gif'])$/;"	v
ALL_BUILD_DIRS	Makefile	/^ALL_BUILD_DIRS := $(sort $(BUILD_DIR) $(addprefix $(BUILD_DIR)\/, $(SRC_DIRS)) \\$/;"	m
ALL_CU_WARNS	Makefile	/^ALL_CU_WARNS := $(CU_WARNS) $(TEST_CU_WARNS)$/;"	m
ALL_CXX_WARNS	Makefile	/^ALL_CXX_WARNS := $(CXX_WARNS) $(TOOL_WARNS) $(EXAMPLE_WARNS) $(TEST_WARNS)$/;"	m
ALL_WARNS	Makefile	/^	ALL_WARNS := $(ALL_CXX_WARNS)$/;"	m
ALL_WARNS	Makefile	/^ALL_WARNS := $(ALL_CXX_WARNS) $(ALL_CU_WARNS)$/;"	m
ASSERT_ANY_THROW	src/gtest/gtest.h	/^#define ASSERT_ANY_THROW(/;"	d
ASSERT_DEATH	src/gtest/gtest.h	/^# define ASSERT_DEATH(/;"	d
ASSERT_DEATH_IF_SUPPORTED	src/gtest/gtest.h	/^# define ASSERT_DEATH_IF_SUPPORTED(/;"	d
ASSERT_DEBUG_DEATH	src/gtest/gtest.h	/^#  define ASSERT_DEBUG_DEATH(/;"	d
ASSERT_DOUBLE_EQ	src/gtest/gtest.h	/^#define ASSERT_DOUBLE_EQ(/;"	d
ASSERT_EQ	src/gtest/gtest.h	/^# define ASSERT_EQ(/;"	d
ASSERT_EXIT	src/gtest/gtest.h	/^# define ASSERT_EXIT(/;"	d
ASSERT_FALSE	src/gtest/gtest.h	/^#define ASSERT_FALSE(/;"	d
ASSERT_FLOAT_EQ	src/gtest/gtest.h	/^#define ASSERT_FLOAT_EQ(/;"	d
ASSERT_GE	src/gtest/gtest.h	/^# define ASSERT_GE(/;"	d
ASSERT_GT	src/gtest/gtest.h	/^# define ASSERT_GT(/;"	d
ASSERT_HRESULT_FAILED	src/gtest/gtest.h	/^# define ASSERT_HRESULT_FAILED(/;"	d
ASSERT_HRESULT_SUCCEEDED	src/gtest/gtest.h	/^# define ASSERT_HRESULT_SUCCEEDED(/;"	d
ASSERT_LE	src/gtest/gtest.h	/^# define ASSERT_LE(/;"	d
ASSERT_LT	src/gtest/gtest.h	/^# define ASSERT_LT(/;"	d
ASSERT_NE	src/gtest/gtest.h	/^# define ASSERT_NE(/;"	d
ASSERT_NEAR	src/gtest/gtest.h	/^#define ASSERT_NEAR(/;"	d
ASSERT_NO_FATAL_FAILURE	src/gtest/gtest.h	/^#define ASSERT_NO_FATAL_FAILURE(/;"	d
ASSERT_NO_THROW	src/gtest/gtest.h	/^#define ASSERT_NO_THROW(/;"	d
ASSERT_PRED1	src/gtest/gtest.h	/^#define ASSERT_PRED1(/;"	d
ASSERT_PRED2	src/gtest/gtest.h	/^#define ASSERT_PRED2(/;"	d
ASSERT_PRED3	src/gtest/gtest.h	/^#define ASSERT_PRED3(/;"	d
ASSERT_PRED4	src/gtest/gtest.h	/^#define ASSERT_PRED4(/;"	d
ASSERT_PRED5	src/gtest/gtest.h	/^#define ASSERT_PRED5(/;"	d
ASSERT_PRED_FORMAT1	src/gtest/gtest.h	/^#define ASSERT_PRED_FORMAT1(/;"	d
ASSERT_PRED_FORMAT2	src/gtest/gtest.h	/^#define ASSERT_PRED_FORMAT2(/;"	d
ASSERT_PRED_FORMAT3	src/gtest/gtest.h	/^#define ASSERT_PRED_FORMAT3(/;"	d
ASSERT_PRED_FORMAT4	src/gtest/gtest.h	/^#define ASSERT_PRED_FORMAT4(/;"	d
ASSERT_PRED_FORMAT5	src/gtest/gtest.h	/^#define ASSERT_PRED_FORMAT5(/;"	d
ASSERT_STRCASEEQ	src/gtest/gtest.h	/^#define ASSERT_STRCASEEQ(/;"	d
ASSERT_STRCASENE	src/gtest/gtest.h	/^#define ASSERT_STRCASENE(/;"	d
ASSERT_STREQ	src/gtest/gtest.h	/^#define ASSERT_STREQ(/;"	d
ASSERT_STRNE	src/gtest/gtest.h	/^#define ASSERT_STRNE(/;"	d
ASSERT_THROW	src/gtest/gtest.h	/^#define ASSERT_THROW(/;"	d
ASSERT_TRUE	src/gtest/gtest.h	/^#define ASSERT_TRUE(/;"	d
AS_STRING	include/caffe/common.hpp	/^#define AS_STRING(/;"	d
Abort	src/gtest/gtest-all.cpp	/^void Abort() {$/;"	f	namespace:testing::internal::posix
Abort	src/gtest/gtest-all.cpp	/^void DeathTestImpl::Abort(AbortReason reason) {$/;"	f	class:testing::internal::DeathTestImpl
Abort	src/gtest/gtest.h	/^inline void Abort() { abort(); }$/;"	f	namespace:std::tr1::posix
AbortReason	src/gtest/gtest.h	/^  enum AbortReason {$/;"	g	class:testing::internal::DeathTest
AbsValLayer	include/caffe/layers/absval_layer.hpp	/^  explicit AbsValLayer(const LayerParameter& param)$/;"	f	class:caffe::AbsValLayer
AbsValLayer	include/caffe/layers/absval_layer.hpp	/^class AbsValLayer : public NeuronLayer<Dtype> {$/;"	c	namespace:caffe
AccuracyLayer	include/caffe/layers/accuracy_layer.hpp	/^  explicit AccuracyLayer(const LayerParameter& param)$/;"	f	class:caffe::AccuracyLayer
AccuracyLayer	include/caffe/layers/accuracy_layer.hpp	/^class AccuracyLayer : public Layer<Dtype> {$/;"	c	namespace:caffe
AccuracyLayerTest	src/caffe/test/test_accuracy_layer.cpp	/^  AccuracyLayerTest()$/;"	f	class:caffe::AccuracyLayerTest
AccuracyLayerTest	src/caffe/test/test_accuracy_layer.cpp	/^class AccuracyLayerTest : public CPUDeviceTest<Dtype> {$/;"	c	namespace:caffe	file:
ActionCallback	include/caffe/solver.hpp	/^typedef boost::function<SolverAction::Enum()> ActionCallback;$/;"	t	namespace:caffe
AdaDeltaPreSolve	src/caffe/solvers/adadelta_solver.cpp	/^void AdaDeltaSolver<Dtype>::AdaDeltaPreSolve() {$/;"	f	class:caffe::AdaDeltaSolver
AdaDeltaSolver	include/caffe/sgd_solvers.hpp	/^  explicit AdaDeltaSolver(const SolverParameter& param)$/;"	f	class:caffe::AdaDeltaSolver
AdaDeltaSolver	include/caffe/sgd_solvers.hpp	/^  explicit AdaDeltaSolver(const string& param_file)$/;"	f	class:caffe::AdaDeltaSolver
AdaDeltaSolver	include/caffe/sgd_solvers.hpp	/^class AdaDeltaSolver : public SGDSolver<Dtype> {$/;"	c	namespace:caffe
AdaDeltaSolver	python/caffe/__init__.py	/^from .pycaffe import Net, SGDSolver, NesterovSolver, AdaGradSolver, RMSPropSolver, AdaDeltaSolver, AdamSolver, NCCL, Timer$/;"	i
AdaDeltaSolver	python/caffe/pycaffe.py	/^        RMSPropSolver, AdaDeltaSolver, AdamSolver, NCCL, Timer$/;"	i
AdaDeltaSolverTest	src/caffe/test/test_gradient_based_solver.cpp	/^class AdaDeltaSolverTest : public GradientBasedSolverTest<TypeParam> {$/;"	c	namespace:caffe	file:
AdaGradSolver	include/caffe/sgd_solvers.hpp	/^  explicit AdaGradSolver(const SolverParameter& param)$/;"	f	class:caffe::AdaGradSolver
AdaGradSolver	include/caffe/sgd_solvers.hpp	/^  explicit AdaGradSolver(const string& param_file)$/;"	f	class:caffe::AdaGradSolver
AdaGradSolver	include/caffe/sgd_solvers.hpp	/^class AdaGradSolver : public SGDSolver<Dtype> {$/;"	c	namespace:caffe
AdaGradSolver	python/caffe/__init__.py	/^from .pycaffe import Net, SGDSolver, NesterovSolver, AdaGradSolver, RMSPropSolver, AdaDeltaSolver, AdamSolver, NCCL, Timer$/;"	i
AdaGradSolver	python/caffe/pycaffe.py	/^        RMSPropSolver, AdaDeltaSolver, AdamSolver, NCCL, Timer$/;"	i
AdaGradSolverTest	src/caffe/test/test_gradient_based_solver.cpp	/^class AdaGradSolverTest : public GradientBasedSolverTest<TypeParam> {$/;"	c	namespace:caffe	file:
AdamPreSolve	src/caffe/solvers/adam_solver.cpp	/^void AdamSolver<Dtype>::AdamPreSolve() {$/;"	f	class:caffe::AdamSolver
AdamSolver	include/caffe/sgd_solvers.hpp	/^  explicit AdamSolver(const SolverParameter& param)$/;"	f	class:caffe::AdamSolver
AdamSolver	include/caffe/sgd_solvers.hpp	/^  explicit AdamSolver(const string& param_file)$/;"	f	class:caffe::AdamSolver
AdamSolver	include/caffe/sgd_solvers.hpp	/^class AdamSolver : public SGDSolver<Dtype> {$/;"	c	namespace:caffe
AdamSolver	python/caffe/__init__.py	/^from .pycaffe import Net, SGDSolver, NesterovSolver, AdaGradSolver, RMSPropSolver, AdaDeltaSolver, AdamSolver, NCCL, Timer$/;"	i
AdamSolver	python/caffe/pycaffe.py	/^        RMSPropSolver, AdaDeltaSolver, AdamSolver, NCCL, Timer$/;"	i
AdamSolverTest	src/caffe/test/test_gradient_based_solver.cpp	/^class AdamSolverTest : public GradientBasedSolverTest<TypeParam> {$/;"	c	namespace:caffe	file:
AddArgument	src/gtest/gtest-all.cpp	/^  void AddArgument(const char* argument) {$/;"	f	class:testing::internal::Arguments
AddArguments	src/gtest/gtest-all.cpp	/^  void AddArguments(const ::std::vector<Str>& arguments) {$/;"	f	class:testing::internal::Arguments
AddCreator	include/caffe/layer_factory.hpp	/^  static void AddCreator(const string& type, Creator creator) {$/;"	f	class:caffe::LayerRegistry
AddCreator	include/caffe/solver_factory.hpp	/^  static void AddCreator(const string& type, Creator creator) {$/;"	f	class:caffe::SolverRegistry
AddDatumVector	src/caffe/layers/memory_data_layer.cpp	/^void MemoryDataLayer<Dtype>::AddDatumVector(const vector<Datum>& datum_vector) {$/;"	f	class:caffe::MemoryDataLayer
AddEnvironment	src/gtest/gtest-all.cpp	/^Environment* UnitTest::AddEnvironment(Environment* env) {$/;"	f	class:testing::UnitTest
AddGlobalTestEnvironment	src/gtest/gtest.h	/^inline Environment* AddGlobalTestEnvironment(Environment* env) {$/;"	f	namespace:testing
AddMatVector	src/caffe/layers/memory_data_layer.cpp	/^void MemoryDataLayer<Dtype>::AddMatVector(const vector<cv::Mat>& mat_vector,$/;"	f	class:caffe::MemoryDataLayer
AddRef	src/gtest/gtest.h	/^struct AddRef { typedef T& type; };  \/\/ NOLINT$/;"	s	namespace:std::tr1::gtest_internal
AddRef	src/gtest/gtest.h	/^struct AddRef<T&> { typedef T& type; };  \/\/ NOLINT$/;"	s	namespace:std::tr1::gtest_internal
AddReference	src/gtest/gtest.h	/^struct AddReference { typedef T& type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
AddReference	src/gtest/gtest.h	/^struct AddReference<T&> { typedef T& type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
AddTestCaseInstantiation	src/gtest/gtest.h	/^  int AddTestCaseInstantiation(const string& instantiation_name,$/;"	f	class:testing::internal::ParameterizedTestCaseInfo
AddTestInfo	src/gtest/gtest-all.cpp	/^  void AddTestInfo(Test::SetUpTestCaseFunc set_up_tc,$/;"	f	class:testing::internal::UnitTestImpl
AddTestInfo	src/gtest/gtest-all.cpp	/^void TestCase::AddTestInfo(TestInfo * test_info) {$/;"	f	class:testing::TestCase
AddTestName	src/gtest/gtest.h	/^  bool AddTestName(const char* file, int line, const char* case_name,$/;"	f	class:testing::internal::TypedTestCasePState
AddTestPartResult	src/gtest/gtest-all.cpp	/^void TestResult::AddTestPartResult(const TestPartResult& test_part_result) {$/;"	f	class:testing::TestResult
AddTestPartResult	src/gtest/gtest-all.cpp	/^void UnitTest::AddTestPartResult(TestPartResult::Type result_type,$/;"	f	class:testing::UnitTest
AddTestPattern	src/gtest/gtest.h	/^  void AddTestPattern(const char* test_case_name,$/;"	f	class:testing::internal::ParameterizedTestCaseInfo
Advance	src/gtest/gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
Advance	src/gtest/gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
Advance	src/gtest/gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
Advance	src/gtest/gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
Advance	src/gtest/gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
Advance	src/gtest/gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
Advance	src/gtest/gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
Advance	src/gtest/gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
Advance	src/gtest/gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
Advance	src/gtest/gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::RangeGenerator::Iterator
Advance	src/gtest/gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
AllowForceBackward	include/caffe/layer.hpp	/^  virtual inline bool AllowForceBackward(const int bottom_index) const {$/;"	f	class:caffe::Layer
AllowForceBackward	include/caffe/layers/contrastive_loss_layer.hpp	/^  virtual inline bool AllowForceBackward(const int bottom_index) const {$/;"	f	class:caffe::ContrastiveLossLayer
AllowForceBackward	include/caffe/layers/euclidean_loss_layer.hpp	/^  virtual inline bool AllowForceBackward(const int bottom_index) const {$/;"	f	class:caffe::EuclideanLossLayer
AllowForceBackward	include/caffe/layers/loss_layer.hpp	/^  virtual inline bool AllowForceBackward(const int bottom_index) const {$/;"	f	class:caffe::LossLayer
AllowForceBackward	include/caffe/layers/lstm_layer.hpp	/^  virtual inline bool AllowForceBackward(const int bottom_index) const {$/;"	f	class:caffe::LSTMUnitLayer
AllowForceBackward	include/caffe/layers/recurrent_layer.hpp	/^  virtual inline bool AllowForceBackward(const int bottom_index) const {$/;"	f	class:caffe::RecurrentLayer
AlmostEquals	src/gtest/gtest.h	/^  bool AlmostEquals(const FloatingPoint& rhs) const {$/;"	f	class:testing::internal::FloatingPoint
AlwaysFalse	src/gtest/gtest.h	/^inline bool AlwaysFalse() { return !AlwaysTrue(); }$/;"	f	namespace:testing::internal
AlwaysTrue	src/gtest/gtest-all.cpp	/^bool AlwaysTrue() {$/;"	f	namespace:testing::internal
AnsiToUtf16	src/gtest/gtest-all.cpp	/^LPCWSTR String::AnsiToUtf16(const char* ansi) {$/;"	f	class:testing::internal::String
Append	src/gtest/gtest-all.cpp	/^void TestEventListeners::Append(TestEventListener* listener) {$/;"	f	class:testing::TestEventListeners
Append	src/gtest/gtest-all.cpp	/^void TestEventRepeater::Append(TestEventListener *listener) {$/;"	f	class:testing::internal::TestEventRepeater
Append	src/gtest/gtest-all.cpp	/^void TestPartResultArray::Append(const TestPartResult& result) {$/;"	f	class:testing::TestPartResultArray
AppendBottom	src/caffe/net.cpp	/^int Net<Dtype>::AppendBottom(const NetParameter& param, const int layer_id,$/;"	f	class:caffe::Net
AppendMessage	src/gtest/gtest.h	/^  void AppendMessage(const Message& a_message) {$/;"	f	class:testing::AssertionResult
AppendParam	src/caffe/net.cpp	/^void Net<Dtype>::AppendParam(const NetParameter& param, const int layer_id,$/;"	f	class:caffe::Net
AppendTop	src/caffe/net.cpp	/^void Net<Dtype>::AppendTop(const NetParameter& param, const int layer_id,$/;"	f	class:caffe::Net
AppendUserMessage	src/gtest/gtest-all.cpp	/^String AppendUserMessage(const String& gtest_msg,$/;"	f	namespace:testing::internal
ApplyUpdate	src/caffe/solvers/sgd_solver.cpp	/^void SGDSolver<Dtype>::ApplyUpdate() {$/;"	f	class:caffe::SGDSolver
ArgMaxLayer	include/caffe/layers/argmax_layer.hpp	/^  explicit ArgMaxLayer(const LayerParameter& param)$/;"	f	class:caffe::ArgMaxLayer
ArgMaxLayer	include/caffe/layers/argmax_layer.hpp	/^class ArgMaxLayer : public Layer<Dtype> {$/;"	c	namespace:caffe
ArgMaxLayerTest	src/caffe/test/test_argmax_layer.cpp	/^  ArgMaxLayerTest()$/;"	f	class:caffe::ArgMaxLayerTest
ArgMaxLayerTest	src/caffe/test/test_argmax_layer.cpp	/^class ArgMaxLayerTest : public CPUDeviceTest<Dtype> {$/;"	c	namespace:caffe	file:
Argmax	examples/cpp_classification/classification.cpp	/^static std::vector<int> Argmax(const std::vector<float>& v, int N) {$/;"	f	file:
ArgumentDefaultsHelpFormatter	python/draw_net.py	/^from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter$/;"	i
ArgumentParser	python/draw_net.py	/^from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter$/;"	i
Arguments	src/gtest/gtest-all.cpp	/^  Arguments() {$/;"	f	class:testing::internal::Arguments
Arguments	src/gtest/gtest-all.cpp	/^class Arguments {$/;"	c	namespace:testing::internal	file:
Argv	src/gtest/gtest-all.cpp	/^  char* const* Argv() {$/;"	f	class:testing::internal::Arguments
ArrayAwareFind	src/gtest/gtest.h	/^Iter ArrayAwareFind(Iter begin, Iter end, const Element& elem) {$/;"	f	namespace:testing::internal
ArrayEq	src/gtest/gtest.h	/^bool ArrayEq(const T* lhs, size_t size, const U* rhs) {$/;"	f	namespace:testing::internal
ArrayEq	src/gtest/gtest.h	/^inline bool ArrayEq(const T& lhs, const U& rhs) { return lhs == rhs; }$/;"	f	namespace:testing::internal
AssertHeld	src/gtest/gtest.h	/^  void AssertHeld() const {$/;"	f	class:std::tr1::MutexBase
AssertHeld	src/gtest/gtest.h	/^  void AssertHeld() const {}$/;"	f	class:std::tr1::Mutex
AssertHelper	src/gtest/gtest-all.cpp	/^AssertHelper::AssertHelper(TestPartResult::Type type,$/;"	f	class:testing::internal::AssertHelper
AssertHelper	src/gtest/gtest.h	/^class GTEST_API_ AssertHelper {$/;"	c	namespace:testing::internal
AssertHelperData	src/gtest/gtest.h	/^    AssertHelperData(TestPartResult::Type t,$/;"	f	struct:testing::internal::AssertHelper::AssertHelperData
AssertHelperData	src/gtest/gtest.h	/^  struct AssertHelperData {$/;"	s	class:testing::internal::AssertHelper
AssertPred1Helper	src/gtest/gtest.h	/^AssertionResult AssertPred1Helper(const char* pred_text,$/;"	f	namespace:testing
AssertPred2Helper	src/gtest/gtest.h	/^AssertionResult AssertPred2Helper(const char* pred_text,$/;"	f	namespace:testing
AssertPred3Helper	src/gtest/gtest.h	/^AssertionResult AssertPred3Helper(const char* pred_text,$/;"	f	namespace:testing
AssertPred4Helper	src/gtest/gtest.h	/^AssertionResult AssertPred4Helper(const char* pred_text,$/;"	f	namespace:testing
AssertPred5Helper	src/gtest/gtest.h	/^AssertionResult AssertPred5Helper(const char* pred_text,$/;"	f	namespace:testing
AssertTypeEq	src/gtest/gtest.h	/^struct AssertTypeEq<T, T> {$/;"	s	namespace:testing::internal
AssertionFailure	src/gtest/gtest-all.cpp	/^AssertionResult AssertionFailure() {$/;"	f	namespace:testing
AssertionFailure	src/gtest/gtest-all.cpp	/^AssertionResult AssertionFailure(const Message& message) {$/;"	f	namespace:testing
AssertionResult	src/gtest/gtest-all.cpp	/^AssertionResult::AssertionResult(const AssertionResult& other)$/;"	f	class:testing::AssertionResult
AssertionResult	src/gtest/gtest.h	/^  explicit AssertionResult(bool success) : success_(success) {}$/;"	f	class:testing::AssertionResult
AssertionResult	src/gtest/gtest.h	/^class GTEST_API_ AssertionResult {$/;"	c	namespace:testing
AssertionSuccess	src/gtest/gtest-all.cpp	/^AssertionResult AssertionSuccess() {$/;"	f	namespace:testing
AssumeRole	src/gtest/gtest-all.cpp	/^DeathTest::TestRole ExecDeathTest::AssumeRole() {$/;"	f	class:testing::internal::ExecDeathTest
AssumeRole	src/gtest/gtest-all.cpp	/^DeathTest::TestRole NoExecDeathTest::AssumeRole() {$/;"	f	class:testing::internal::NoExecDeathTest
AssumeRole	src/gtest/gtest-all.cpp	/^DeathTest::TestRole WindowsDeathTest::AssumeRole() {$/;"	f	class:testing::internal::WindowsDeathTest
AtEnd	src/gtest/gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
AtEnd	src/gtest/gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
AtEnd	src/gtest/gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
AtEnd	src/gtest/gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
AtEnd	src/gtest/gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
AtEnd	src/gtest/gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
AtEnd	src/gtest/gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
AtEnd	src/gtest/gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
AtEnd	src/gtest/gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
AtomMatchesChar	src/gtest/gtest-all.cpp	/^bool AtomMatchesChar(bool escaped, char pattern_char, char ch) {$/;"	f	namespace:testing::internal
AutoHandle	src/gtest/gtest-all.cpp	/^  AutoHandle() : handle_(INVALID_HANDLE_VALUE) {}$/;"	f	class:testing::internal::AutoHandle
AutoHandle	src/gtest/gtest-all.cpp	/^  explicit AutoHandle(HANDLE handle) : handle_(handle) {}$/;"	f	class:testing::internal::AutoHandle
AutoHandle	src/gtest/gtest-all.cpp	/^class AutoHandle {$/;"	c	namespace:testing::internal	file:
AutoTopBlobs	include/caffe/layer.hpp	/^  virtual inline bool AutoTopBlobs() const { return false; }$/;"	f	class:caffe::Layer
AutoTopBlobs	include/caffe/layers/loss_layer.hpp	/^  virtual inline bool AutoTopBlobs() const { return true; }$/;"	f	class:caffe::LossLayer
AxisMismatchException	python/caffe/coord_map.py	/^class AxisMismatchException(Exception):$/;"	c
BATCH_SIZE	src/caffe/test/test_batch_norm_layer.cpp	/^#define BATCH_SIZE /;"	d	file:
BLAS	Makefile	/^BLAS ?= atlas$/;"	m
BLAS_INCLUDE	Makefile	/^			BLAS_INCLUDE ?= \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/$(shell ls \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/ | sort | tail -1)\/System\/Library\/Frameworks\/Accelerate.framework\/Versions\/A\/Frameworks\/vecLib.framework\/Versions\/A\/Headers$/;"	m
BLAS_INCLUDE	Makefile	/^			BLAS_INCLUDE ?= \/System\/Library\/Frameworks\/Accelerate.framework\/Versions\/Current\/Frameworks\/vecLib.framework\/Headers\/$/;"	m
BLAS_INCLUDE	Makefile	/^			BLAS_INCLUDE ?= \/System\/Library\/Frameworks\/vecLib.framework\/Versions\/Current\/Headers\/$/;"	m
BLAS_INCLUDE	Makefile	/^	BLAS_INCLUDE ?= $(MKLROOT)\/include$/;"	m
BLAS_LIB	Makefile	/^	BLAS_LIB ?= $(MKLROOT)\/lib $(MKLROOT)\/lib\/intel64$/;"	m
BLOB_STYLE	python/caffe/draw.py	/^BLOB_STYLE = {'shape': 'octagon',$/;"	v
BNLLLayer	include/caffe/layers/bnll_layer.hpp	/^  explicit BNLLLayer(const LayerParameter& param)$/;"	f	class:caffe::BNLLLayer
BNLLLayer	include/caffe/layers/bnll_layer.hpp	/^class BNLLLayer : public NeuronLayer<Dtype> {$/;"	c	namespace:caffe
BOOST_PYTHON_MODULE	python/caffe/_caffe.cpp	/^BOOST_PYTHON_MODULE(_caffe) {$/;"	f	namespace:caffe
BP_REGISTER_SHARED_PTR_TO_PYTHON	python/caffe/_caffe.cpp	/^#define BP_REGISTER_SHARED_PTR_TO_PYTHON(/;"	d	file:
BUILD_DIR	Makefile	/^	BUILD_DIR := $(DEBUG_BUILD_DIR)$/;"	m
BUILD_DIR	Makefile	/^	BUILD_DIR := $(RELEASE_BUILD_DIR)$/;"	m
BUILD_DIR_LINK	Makefile	/^BUILD_DIR_LINK := $(BUILD_DIR)$/;"	m
BUILD_INCLUDE_DIR	Makefile	/^BUILD_INCLUDE_DIR := $(BUILD_DIR)\/src$/;"	m
Backward	include/caffe/layer.hpp	/^inline void Layer<Dtype>::Backward(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::Layer
Backward	src/caffe/net.cpp	/^void Net<Dtype>::Backward() {$/;"	f	class:caffe::Net
BackwardDebugInfo	src/caffe/net.cpp	/^void Net<Dtype>::BackwardDebugInfo(const int layer_id) {$/;"	f	class:caffe::Net
BackwardFrom	src/caffe/net.cpp	/^void Net<Dtype>::BackwardFrom(int start) {$/;"	f	class:caffe::Net
BackwardFromTo	src/caffe/net.cpp	/^void Net<Dtype>::BackwardFromTo(int start, int end) {$/;"	f	class:caffe::Net
BackwardTo	src/caffe/net.cpp	/^void Net<Dtype>::BackwardTo(int end) {$/;"	f	class:caffe::Net
Backward_cpu	include/caffe/layers/accuracy_layer.hpp	/^  virtual void Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::AccuracyLayer
Backward_cpu	include/caffe/layers/argmax_layer.hpp	/^  virtual void Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::ArgMaxLayer
Backward_cpu	include/caffe/layers/base_data_layer.hpp	/^  virtual void Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::BaseDataLayer
Backward_cpu	include/caffe/layers/dummy_data_layer.hpp	/^  virtual void Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::DummyDataLayer
Backward_cpu	include/caffe/layers/hdf5_data_layer.hpp	/^  virtual void Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::HDF5DataLayer
Backward_cpu	include/caffe/layers/input_layer.hpp	/^  virtual void Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::InputLayer
Backward_cpu	include/caffe/layers/parameter_layer.hpp	/^  virtual void Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::ParameterLayer
Backward_cpu	include/caffe/layers/python_layer.hpp	/^  virtual void Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::PythonLayer
Backward_cpu	include/caffe/layers/reshape_layer.hpp	/^  virtual void Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::ReshapeLayer
Backward_cpu	include/caffe/layers/threshold_layer.hpp	/^  virtual void Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::ThresholdLayer
Backward_cpu	src/caffe/layers/absval_layer.cpp	/^void AbsValLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::AbsValLayer
Backward_cpu	src/caffe/layers/batch_norm_layer.cpp	/^void BatchNormLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::BatchNormLayer
Backward_cpu	src/caffe/layers/batch_reindex_layer.cpp	/^void BatchReindexLayer<Dtype>::Backward_cpu($/;"	f	class:caffe::BatchReindexLayer
Backward_cpu	src/caffe/layers/bias_layer.cpp	/^void BiasLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::BiasLayer
Backward_cpu	src/caffe/layers/bnll_layer.cpp	/^void BNLLLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::BNLLLayer
Backward_cpu	src/caffe/layers/concat_layer.cpp	/^void ConcatLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::ConcatLayer
Backward_cpu	src/caffe/layers/contrastive_loss_layer.cpp	/^void ContrastiveLossLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::ContrastiveLossLayer
Backward_cpu	src/caffe/layers/conv_layer.cpp	/^void ConvolutionLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::ConvolutionLayer
Backward_cpu	src/caffe/layers/crop_layer.cpp	/^void CropLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::CropLayer
Backward_cpu	src/caffe/layers/deconv_layer.cpp	/^void DeconvolutionLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::DeconvolutionLayer
Backward_cpu	src/caffe/layers/dropout_layer.cpp	/^void DropoutLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::DropoutLayer
Backward_cpu	src/caffe/layers/eltwise_layer.cpp	/^void EltwiseLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::EltwiseLayer
Backward_cpu	src/caffe/layers/elu_layer.cpp	/^void ELULayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::ELULayer
Backward_cpu	src/caffe/layers/embed_layer.cpp	/^void EmbedLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::EmbedLayer
Backward_cpu	src/caffe/layers/euclidean_loss_layer.cpp	/^void EuclideanLossLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::EuclideanLossLayer
Backward_cpu	src/caffe/layers/exp_layer.cpp	/^void ExpLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::ExpLayer
Backward_cpu	src/caffe/layers/filter_layer.cpp	/^void FilterLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::FilterLayer
Backward_cpu	src/caffe/layers/flatten_layer.cpp	/^void FlattenLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::FlattenLayer
Backward_cpu	src/caffe/layers/hdf5_output_layer.cpp	/^void HDF5OutputLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::HDF5OutputLayer
Backward_cpu	src/caffe/layers/hinge_loss_layer.cpp	/^void HingeLossLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::HingeLossLayer
Backward_cpu	src/caffe/layers/im2col_layer.cpp	/^void Im2colLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::Im2colLayer
Backward_cpu	src/caffe/layers/infogain_loss_layer.cpp	/^void InfogainLossLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::InfogainLossLayer
Backward_cpu	src/caffe/layers/inner_product_layer.cpp	/^void InnerProductLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::InnerProductLayer
Backward_cpu	src/caffe/layers/log_layer.cpp	/^void LogLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::LogLayer
Backward_cpu	src/caffe/layers/lrn_layer.cpp	/^void LRNLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::LRNLayer
Backward_cpu	src/caffe/layers/lstm_unit_layer.cpp	/^void LSTMUnitLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::LSTMUnitLayer
Backward_cpu	src/caffe/layers/multinomial_logistic_loss_layer.cpp	/^void MultinomialLogisticLossLayer<Dtype>::Backward_cpu($/;"	f	class:caffe::MultinomialLogisticLossLayer
Backward_cpu	src/caffe/layers/mvn_layer.cpp	/^void MVNLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::MVNLayer
Backward_cpu	src/caffe/layers/pooling_layer.cpp	/^void PoolingLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::PoolingLayer
Backward_cpu	src/caffe/layers/power_layer.cpp	/^void PowerLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::PowerLayer
Backward_cpu	src/caffe/layers/prelu_layer.cpp	/^void PReLULayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::PReLULayer
Backward_cpu	src/caffe/layers/recurrent_layer.cpp	/^void RecurrentLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::RecurrentLayer
Backward_cpu	src/caffe/layers/reduction_layer.cpp	/^void ReductionLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::ReductionLayer
Backward_cpu	src/caffe/layers/relu_layer.cpp	/^void ReLULayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::ReLULayer
Backward_cpu	src/caffe/layers/scale_layer.cpp	/^void ScaleLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::ScaleLayer
Backward_cpu	src/caffe/layers/sigmoid_cross_entropy_loss_layer.cpp	/^void SigmoidCrossEntropyLossLayer<Dtype>::Backward_cpu($/;"	f	class:caffe::SigmoidCrossEntropyLossLayer
Backward_cpu	src/caffe/layers/sigmoid_layer.cpp	/^void SigmoidLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::SigmoidLayer
Backward_cpu	src/caffe/layers/silence_layer.cpp	/^void SilenceLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::SilenceLayer
Backward_cpu	src/caffe/layers/slice_layer.cpp	/^void SliceLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::SliceLayer
Backward_cpu	src/caffe/layers/softmax_layer.cpp	/^void SoftmaxLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::SoftmaxLayer
Backward_cpu	src/caffe/layers/softmax_loss_layer.cpp	/^void SoftmaxWithLossLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::SoftmaxWithLossLayer
Backward_cpu	src/caffe/layers/split_layer.cpp	/^void SplitLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::SplitLayer
Backward_cpu	src/caffe/layers/spp_layer.cpp	/^void SPPLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::SPPLayer
Backward_cpu	src/caffe/layers/tanh_layer.cpp	/^void TanHLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::TanHLayer
Backward_cpu	src/caffe/layers/tile_layer.cpp	/^void TileLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::TileLayer
Backward_gpu	include/caffe/layer.hpp	/^  virtual void Backward_gpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::Layer
Backward_gpu	include/caffe/layers/base_data_layer.hpp	/^  virtual void Backward_gpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::BaseDataLayer
Backward_gpu	include/caffe/layers/dummy_data_layer.hpp	/^  virtual void Backward_gpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::DummyDataLayer
Backward_gpu	include/caffe/layers/hdf5_data_layer.hpp	/^  virtual void Backward_gpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::HDF5DataLayer
Backward_gpu	include/caffe/layers/reshape_layer.hpp	/^  virtual void Backward_gpu(const vector<Blob<Dtype>*>& top,$/;"	f	class:caffe::ReshapeLayer
BaseConvolutionLayer	include/caffe/layers/base_conv_layer.hpp	/^  explicit BaseConvolutionLayer(const LayerParameter& param)$/;"	f	class:caffe::BaseConvolutionLayer
BaseConvolutionLayer	include/caffe/layers/base_conv_layer.hpp	/^class BaseConvolutionLayer : public Layer<Dtype> {$/;"	c	namespace:caffe
BaseDataLayer	include/caffe/layers/base_data_layer.hpp	/^class BaseDataLayer : public Layer<Dtype> {$/;"	c	namespace:caffe
BaseDataLayer	src/caffe/layers/base_data_layer.cpp	/^BaseDataLayer<Dtype>::BaseDataLayer(const LayerParameter& param)$/;"	f	class:caffe::BaseDataLayer
BaseGenerator	src/gtest/gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
BaseGenerator	src/gtest/gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
BaseGenerator	src/gtest/gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
BaseGenerator	src/gtest/gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
BaseGenerator	src/gtest/gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
BaseGenerator	src/gtest/gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
BaseGenerator	src/gtest/gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
BaseGenerator	src/gtest/gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
BaseGenerator	src/gtest/gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
BaseGenerator	src/gtest/gtest.h	/^    virtual const ParamGeneratorInterface<T>* BaseGenerator() const {$/;"	f	class:testing::internal::RangeGenerator::Iterator
BaseGenerator	src/gtest/gtest.h	/^    virtual const ParamGeneratorInterface<T>* BaseGenerator() const {$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
BaseName	scripts/cpp_lint.py	/^  def BaseName(self):$/;"	m	class:FileInfo
BasePrefetchingDataLayer	include/caffe/layers/base_data_layer.hpp	/^class BasePrefetchingDataLayer :$/;"	c	namespace:caffe
BasePrefetchingDataLayer	src/caffe/layers/base_data_layer.cpp	/^BasePrefetchingDataLayer<Dtype>::BasePrefetchingDataLayer($/;"	f	class:caffe::BasePrefetchingDataLayer
BasicNarrowIoManip	src/gtest/gtest.h	/^  typedef std::ostream& (*BasicNarrowIoManip)(std::ostream&);$/;"	t	class:testing::Message::std
Batch	include/caffe/layers/base_data_layer.hpp	/^class Batch {$/;"	c	namespace:caffe
BatchLoader	examples/pycaffe/layers/pascal_multilabel_datalayers.py	/^class BatchLoader(object):$/;"	c
BatchNormLayer	include/caffe/layers/batch_norm_layer.hpp	/^  explicit BatchNormLayer(const LayerParameter& param)$/;"	f	class:caffe::BatchNormLayer
BatchNormLayer	include/caffe/layers/batch_norm_layer.hpp	/^class BatchNormLayer : public Layer<Dtype> {$/;"	c	namespace:caffe
BatchNormLayerTest	src/caffe/test/test_batch_norm_layer.cpp	/^    BatchNormLayerTest()$/;"	f	class:caffe::BatchNormLayerTest
BatchNormLayerTest	src/caffe/test/test_batch_norm_layer.cpp	/^  class BatchNormLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
BatchReindexLayer	include/caffe/layers/batch_reindex_layer.hpp	/^  explicit BatchReindexLayer(const LayerParameter& param)$/;"	f	class:caffe::BatchReindexLayer
BatchReindexLayer	include/caffe/layers/batch_reindex_layer.hpp	/^class BatchReindexLayer : public Layer<Dtype> {$/;"	c	namespace:caffe
BatchReindexLayerTest	src/caffe/test/test_batch_reindex_layer.cpp	/^  BatchReindexLayerTest()$/;"	f	class:caffe::BatchReindexLayerTest
BatchReindexLayerTest	src/caffe/test/test_batch_reindex_layer.cpp	/^class BatchReindexLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
Begin	scripts/cpp_lint.py	/^  def Begin(self, function_name):$/;"	m	class:_FunctionState
Begin	src/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator10
Begin	src/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator2
Begin	src/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator3
Begin	src/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator4
Begin	src/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator5
Begin	src/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator6
Begin	src/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator7
Begin	src/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator8
Begin	src/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator9
Begin	src/gtest/gtest.h	/^  virtual ParamIteratorInterface<T>* Begin() const {$/;"	f	class:testing::internal::RangeGenerator
Begin	src/gtest/gtest.h	/^  virtual ParamIteratorInterface<T>* Begin() const {$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator
BenchmarkTest	src/caffe/test/test_benchmark.cpp	/^class BenchmarkTest : public MultiDeviceTest<TypeParam> {};$/;"	c	namespace:caffe	file:
BiasLayer	include/caffe/layers/bias_layer.hpp	/^  explicit BiasLayer(const LayerParameter& param)$/;"	f	class:caffe::BiasLayer
BiasLayer	include/caffe/layers/bias_layer.hpp	/^class BiasLayer : public Layer<Dtype> {$/;"	c	namespace:caffe
BiasLayerTest	src/caffe/test/test_bias_layer.cpp	/^  BiasLayerTest()$/;"	f	class:caffe::BiasLayerTest
BiasLayerTest	src/caffe/test/test_bias_layer.cpp	/^class BiasLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
BiggestInt	src/gtest/gtest.h	/^typedef __int64 BiggestInt;$/;"	t	namespace:std::tr1
BiggestInt	src/gtest/gtest.h	/^typedef long long BiggestInt;  \/\/ NOLINT$/;"	t	namespace:std::tr1
BilinearFiller	include/caffe/filler.hpp	/^  explicit BilinearFiller(const FillerParameter& param)$/;"	f	class:caffe::BilinearFiller
BilinearFiller	include/caffe/filler.hpp	/^class BilinearFiller : public Filler<Dtype> {$/;"	c	namespace:caffe
Bind	src/gtest/gtest.h	/^  struct Bind {$/;"	s	struct:testing::internal::TemplateSel
Bits	src/gtest/gtest.h	/^  typedef typename TypeWithSize<sizeof(RawType)>::UInt Bits;$/;"	t	class:testing::internal::FloatingPoint
Blob	include/caffe/blob.hpp	/^  Blob()$/;"	f	class:caffe::Blob
Blob	include/caffe/blob.hpp	/^class Blob {$/;"	c	namespace:caffe
Blob	src/caffe/blob.cpp	/^Blob<Dtype>::Blob(const int num, const int channels, const int height,$/;"	f	class:caffe::Blob
Blob	src/caffe/blob.cpp	/^Blob<Dtype>::Blob(const vector<int>& shape)$/;"	f	class:caffe::Blob
BlobMathTest	src/caffe/test/test_blob.cpp	/^  BlobMathTest()$/;"	f	class:caffe::BlobMathTest
BlobMathTest	src/caffe/test/test_blob.cpp	/^class BlobMathTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
BlobSimpleTest	src/caffe/test/test_blob.cpp	/^  BlobSimpleTest()$/;"	f	class:caffe::BlobSimpleTest
BlobSimpleTest	src/caffe/test/test_blob.cpp	/^class BlobSimpleTest : public ::testing::Test {$/;"	c	namespace:caffe	file:
BlobVec_add_blob	python/caffe/_caffe.cpp	/^bp::object BlobVec_add_blob(bp::tuple args, bp::dict kwargs) {$/;"	f	namespace:caffe
Blob_Reshape	python/caffe/_caffe.cpp	/^bp::object Blob_Reshape(bp::tuple args, bp::dict kwargs) {$/;"	f	namespace:caffe
BlockingQueue	include/caffe/util/blocking_queue.hpp	/^class BlockingQueue {$/;"	c	namespace:caffe
BlockingQueue	src/caffe/util/blocking_queue.cpp	/^BlockingQueue<T>::BlockingQueue()$/;"	f	class:caffe::BlockingQueue
Bool	src/gtest/gtest.h	/^inline internal::ParamGenerator<bool> Bool() {$/;"	f	namespace:testing
BoolFromGTestEnv	src/gtest/gtest-all.cpp	/^bool BoolFromGTestEnv(const char* flag, bool default_value) {$/;"	f	namespace:testing::internal
Brew	include/caffe/common.hpp	/^  enum Brew { CPU, GPU };$/;"	g	class:caffe::Caffe
BrewFunction	tools/caffe.cpp	/^typedef int (*BrewFunction)();$/;"	t	file:
BrewMap	tools/caffe.cpp	/^typedef std::map<caffe::string, BrewFunction> BrewMap;$/;"	t	file:
Broadcast	src/caffe/parallel.cpp	/^void NCCL<Dtype>::Broadcast() {$/;"	f	class:caffe::NCCL
ByRef	src/gtest/gtest.h	/^struct ByRef { typedef const T& type; };  \/\/ NOLINT$/;"	s	namespace:std::tr1::gtest_internal
ByRef	src/gtest/gtest.h	/^struct ByRef<T&> { typedef T& type; };  \/\/ NOLINT$/;"	s	namespace:std::tr1::gtest_internal
CAFFE_ABSVAL_LAYER_HPP_	include/caffe/layers/absval_layer.hpp	/^#define CAFFE_ABSVAL_LAYER_HPP_$/;"	d
CAFFE_ACCURACY_LAYER_HPP_	include/caffe/layers/accuracy_layer.hpp	/^#define CAFFE_ACCURACY_LAYER_HPP_$/;"	d
CAFFE_ARGMAX_LAYER_HPP_	include/caffe/layers/argmax_layer.hpp	/^#define CAFFE_ARGMAX_LAYER_HPP_$/;"	d
CAFFE_BASE_CONVOLUTION_LAYER_HPP_	include/caffe/layers/base_conv_layer.hpp	/^#define CAFFE_BASE_CONVOLUTION_LAYER_HPP_$/;"	d
CAFFE_BATCHNORM_LAYER_HPP_	include/caffe/layers/batch_norm_layer.hpp	/^#define CAFFE_BATCHNORM_LAYER_HPP_$/;"	d
CAFFE_BATCHREINDEX_LAYER_HPP_	include/caffe/layers/batch_reindex_layer.hpp	/^#define CAFFE_BATCHREINDEX_LAYER_HPP_$/;"	d
CAFFE_BIAS_LAYER_HPP_	include/caffe/layers/bias_layer.hpp	/^#define CAFFE_BIAS_LAYER_HPP_$/;"	d
CAFFE_BLOB_HPP_	include/caffe/blob.hpp	/^#define CAFFE_BLOB_HPP_$/;"	d
CAFFE_BNLL_LAYER_HPP_	include/caffe/layers/bnll_layer.hpp	/^#define CAFFE_BNLL_LAYER_HPP_$/;"	d
CAFFE_CAFFE_HPP_	include/caffe/caffe.hpp	/^#define CAFFE_CAFFE_HPP_$/;"	d
CAFFE_COMMON_HPP_	include/caffe/common.hpp	/^#define CAFFE_COMMON_HPP_$/;"	d
CAFFE_CONCAT_LAYER_HPP_	include/caffe/layers/concat_layer.hpp	/^#define CAFFE_CONCAT_LAYER_HPP_$/;"	d
CAFFE_CONTRASTIVE_LOSS_LAYER_HPP_	include/caffe/layers/contrastive_loss_layer.hpp	/^#define CAFFE_CONTRASTIVE_LOSS_LAYER_HPP_$/;"	d
CAFFE_CONV_LAYER_HPP_	include/caffe/layers/conv_layer.hpp	/^#define CAFFE_CONV_LAYER_HPP_$/;"	d
CAFFE_CROP_LAYER_HPP_	include/caffe/layers/crop_layer.hpp	/^#define CAFFE_CROP_LAYER_HPP_$/;"	d
CAFFE_CUDA_NUM_THREADS	include/caffe/util/device_alternate.hpp	/^const int CAFFE_CUDA_NUM_THREADS = 512;$/;"	m	namespace:caffe
CAFFE_CUDNN_CONV_LAYER_HPP_	include/caffe/layers/cudnn_conv_layer.hpp	/^#define CAFFE_CUDNN_CONV_LAYER_HPP_$/;"	d
CAFFE_CUDNN_LCN_LAYER_HPP_	include/caffe/layers/cudnn_lcn_layer.hpp	/^#define CAFFE_CUDNN_LCN_LAYER_HPP_$/;"	d
CAFFE_CUDNN_LRN_LAYER_HPP_	include/caffe/layers/cudnn_lrn_layer.hpp	/^#define CAFFE_CUDNN_LRN_LAYER_HPP_$/;"	d
CAFFE_CUDNN_POOLING_LAYER_HPP_	include/caffe/layers/cudnn_pooling_layer.hpp	/^#define CAFFE_CUDNN_POOLING_LAYER_HPP_$/;"	d
CAFFE_CUDNN_RELU_LAYER_HPP_	include/caffe/layers/cudnn_relu_layer.hpp	/^#define CAFFE_CUDNN_RELU_LAYER_HPP_$/;"	d
CAFFE_CUDNN_SIGMOID_LAYER_HPP_	include/caffe/layers/cudnn_sigmoid_layer.hpp	/^#define CAFFE_CUDNN_SIGMOID_LAYER_HPP_$/;"	d
CAFFE_CUDNN_SOFTMAX_LAYER_HPP_	include/caffe/layers/cudnn_softmax_layer.hpp	/^#define CAFFE_CUDNN_SOFTMAX_LAYER_HPP_$/;"	d
CAFFE_CUDNN_TANH_LAYER_HPP_	include/caffe/layers/cudnn_tanh_layer.hpp	/^#define CAFFE_CUDNN_TANH_LAYER_HPP_$/;"	d
CAFFE_DATA_LAYERS_HPP_	include/caffe/layers/base_data_layer.hpp	/^#define CAFFE_DATA_LAYERS_HPP_$/;"	d
CAFFE_DATA_LAYER_HPP_	include/caffe/layers/data_layer.hpp	/^#define CAFFE_DATA_LAYER_HPP_$/;"	d
CAFFE_DATA_TRANSFORMER_HPP	include/caffe/data_transformer.hpp	/^#define CAFFE_DATA_TRANSFORMER_HPP$/;"	d
CAFFE_DECONV_LAYER_HPP_	include/caffe/layers/deconv_layer.hpp	/^#define CAFFE_DECONV_LAYER_HPP_$/;"	d
CAFFE_DROPOUT_LAYER_HPP_	include/caffe/layers/dropout_layer.hpp	/^#define CAFFE_DROPOUT_LAYER_HPP_$/;"	d
CAFFE_DUMMY_DATA_LAYER_HPP_	include/caffe/layers/dummy_data_layer.hpp	/^#define CAFFE_DUMMY_DATA_LAYER_HPP_$/;"	d
CAFFE_ELTWISE_LAYER_HPP_	include/caffe/layers/eltwise_layer.hpp	/^#define CAFFE_ELTWISE_LAYER_HPP_$/;"	d
CAFFE_ELU_LAYER_HPP_	include/caffe/layers/elu_layer.hpp	/^#define CAFFE_ELU_LAYER_HPP_$/;"	d
CAFFE_EMBED_LAYER_HPP_	include/caffe/layers/embed_layer.hpp	/^#define CAFFE_EMBED_LAYER_HPP_$/;"	d
CAFFE_EUCLIDEAN_LOSS_LAYER_HPP_	include/caffe/layers/euclidean_loss_layer.hpp	/^#define CAFFE_EUCLIDEAN_LOSS_LAYER_HPP_$/;"	d
CAFFE_EXP_LAYER_HPP_	include/caffe/layers/exp_layer.hpp	/^#define CAFFE_EXP_LAYER_HPP_$/;"	d
CAFFE_FILLER_HPP	include/caffe/filler.hpp	/^#define CAFFE_FILLER_HPP$/;"	d
CAFFE_FILTER_LAYER_HPP_	include/caffe/layers/filter_layer.hpp	/^#define CAFFE_FILTER_LAYER_HPP_$/;"	d
CAFFE_FLATTEN_LAYER_HPP_	include/caffe/layers/flatten_layer.hpp	/^#define CAFFE_FLATTEN_LAYER_HPP_$/;"	d
CAFFE_GET_BLOCKS	include/caffe/util/device_alternate.hpp	/^inline int CAFFE_GET_BLOCKS(const int N) {$/;"	f	namespace:caffe
CAFFE_HDF5_DATA_LAYER_HPP_	include/caffe/layers/hdf5_data_layer.hpp	/^#define CAFFE_HDF5_DATA_LAYER_HPP_$/;"	d
CAFFE_HDF5_OUTPUT_LAYER_HPP_	include/caffe/layers/hdf5_output_layer.hpp	/^#define CAFFE_HDF5_OUTPUT_LAYER_HPP_$/;"	d
CAFFE_HINGE_LOSS_LAYER_HPP_	include/caffe/layers/hinge_loss_layer.hpp	/^#define CAFFE_HINGE_LOSS_LAYER_HPP_$/;"	d
CAFFE_IM2COL_LAYER_HPP_	include/caffe/layers/im2col_layer.hpp	/^#define CAFFE_IM2COL_LAYER_HPP_$/;"	d
CAFFE_IMAGE_DATA_LAYER_HPP_	include/caffe/layers/image_data_layer.hpp	/^#define CAFFE_IMAGE_DATA_LAYER_HPP_$/;"	d
CAFFE_INFOGAIN_LOSS_LAYER_HPP_	include/caffe/layers/infogain_loss_layer.hpp	/^#define CAFFE_INFOGAIN_LOSS_LAYER_HPP_$/;"	d
CAFFE_INNER_PRODUCT_LAYER_HPP_	include/caffe/layers/inner_product_layer.hpp	/^#define CAFFE_INNER_PRODUCT_LAYER_HPP_$/;"	d
CAFFE_INPUT_LAYER_HPP_	include/caffe/layers/input_layer.hpp	/^#define CAFFE_INPUT_LAYER_HPP_$/;"	d
CAFFE_INTERNAL_THREAD_HPP_	include/caffe/internal_thread.hpp	/^#define CAFFE_INTERNAL_THREAD_HPP_$/;"	d
CAFFE_LAYER_FACTORY_H_	include/caffe/layer_factory.hpp	/^#define CAFFE_LAYER_FACTORY_H_$/;"	d
CAFFE_LAYER_H_	include/caffe/layer.hpp	/^#define CAFFE_LAYER_H_$/;"	d
CAFFE_LOG_LAYER_HPP_	include/caffe/layers/log_layer.hpp	/^#define CAFFE_LOG_LAYER_HPP_$/;"	d
CAFFE_LOSS_LAYER_HPP_	include/caffe/layers/loss_layer.hpp	/^#define CAFFE_LOSS_LAYER_HPP_$/;"	d
CAFFE_LRN_LAYER_HPP_	include/caffe/layers/lrn_layer.hpp	/^#define CAFFE_LRN_LAYER_HPP_$/;"	d
CAFFE_LSTM_LAYER_HPP_	include/caffe/layers/lstm_layer.hpp	/^#define CAFFE_LSTM_LAYER_HPP_$/;"	d
CAFFE_MEMORY_DATA_LAYER_HPP_	include/caffe/layers/memory_data_layer.hpp	/^#define CAFFE_MEMORY_DATA_LAYER_HPP_$/;"	d
CAFFE_MULTINOMIAL_LOGISTIC_LOSS_LAYER_HPP_	include/caffe/layers/multinomial_logistic_loss_layer.hpp	/^#define CAFFE_MULTINOMIAL_LOGISTIC_LOSS_LAYER_HPP_$/;"	d
CAFFE_MVN_LAYER_HPP_	include/caffe/layers/mvn_layer.hpp	/^#define CAFFE_MVN_LAYER_HPP_$/;"	d
CAFFE_NET_HPP_	include/caffe/net.hpp	/^#define CAFFE_NET_HPP_$/;"	d
CAFFE_NEURON_LAYER_HPP_	include/caffe/layers/neuron_layer.hpp	/^#define CAFFE_NEURON_LAYER_HPP_$/;"	d
CAFFE_PARALLEL_HPP_	include/caffe/parallel.hpp	/^#define CAFFE_PARALLEL_HPP_$/;"	d
CAFFE_PARAMETER_LAYER_HPP_	include/caffe/layers/parameter_layer.hpp	/^#define CAFFE_PARAMETER_LAYER_HPP_$/;"	d
CAFFE_POOLING_LAYER_HPP_	include/caffe/layers/pooling_layer.hpp	/^#define CAFFE_POOLING_LAYER_HPP_$/;"	d
CAFFE_POWER_LAYER_HPP_	include/caffe/layers/power_layer.hpp	/^#define CAFFE_POWER_LAYER_HPP_$/;"	d
CAFFE_PRELU_LAYER_HPP_	include/caffe/layers/prelu_layer.hpp	/^#define CAFFE_PRELU_LAYER_HPP_$/;"	d
CAFFE_PYTHON_LAYER_HPP_	include/caffe/layers/python_layer.hpp	/^#define CAFFE_PYTHON_LAYER_HPP_$/;"	d
CAFFE_RECURRENT_LAYER_HPP_	include/caffe/layers/recurrent_layer.hpp	/^#define CAFFE_RECURRENT_LAYER_HPP_$/;"	d
CAFFE_REDUCTION_LAYER_HPP_	include/caffe/layers/reduction_layer.hpp	/^#define CAFFE_REDUCTION_LAYER_HPP_$/;"	d
CAFFE_RELU_LAYER_HPP_	include/caffe/layers/relu_layer.hpp	/^#define CAFFE_RELU_LAYER_HPP_$/;"	d
CAFFE_RNG_CPP_HPP_	include/caffe/util/rng.hpp	/^#define CAFFE_RNG_CPP_HPP_$/;"	d
CAFFE_RNN_LAYER_HPP_	include/caffe/layers/rnn_layer.hpp	/^#define CAFFE_RNN_LAYER_HPP_$/;"	d
CAFFE_SCALE_LAYER_HPP_	include/caffe/layers/scale_layer.hpp	/^#define CAFFE_SCALE_LAYER_HPP_$/;"	d
CAFFE_SGD_SOLVERS_HPP_	include/caffe/sgd_solvers.hpp	/^#define CAFFE_SGD_SOLVERS_HPP_$/;"	d
CAFFE_SIGMOID_CROSS_ENTROPY_LOSS_LAYER_HPP_	include/caffe/layers/sigmoid_cross_entropy_loss_layer.hpp	/^#define CAFFE_SIGMOID_CROSS_ENTROPY_LOSS_LAYER_HPP_$/;"	d
CAFFE_SIGMOID_LAYER_HPP_	include/caffe/layers/sigmoid_layer.hpp	/^#define CAFFE_SIGMOID_LAYER_HPP_$/;"	d
CAFFE_SILENCE_LAYER_HPP_	include/caffe/layers/silence_layer.hpp	/^#define CAFFE_SILENCE_LAYER_HPP_$/;"	d
CAFFE_SLICE_LAYER_HPP_	include/caffe/layers/slice_layer.hpp	/^#define CAFFE_SLICE_LAYER_HPP_$/;"	d
CAFFE_SOFTMAX_LAYER_HPP_	include/caffe/layers/softmax_layer.hpp	/^#define CAFFE_SOFTMAX_LAYER_HPP_$/;"	d
CAFFE_SOFTMAX_WITH_LOSS_LAYER_HPP_	include/caffe/layers/softmax_loss_layer.hpp	/^#define CAFFE_SOFTMAX_WITH_LOSS_LAYER_HPP_$/;"	d
CAFFE_SOLVER_FACTORY_H_	include/caffe/solver_factory.hpp	/^#define CAFFE_SOLVER_FACTORY_H_$/;"	d
CAFFE_SOLVER_HPP_	include/caffe/solver.hpp	/^#define CAFFE_SOLVER_HPP_$/;"	d
CAFFE_SPLIT_LAYER_HPP_	include/caffe/layers/split_layer.hpp	/^#define CAFFE_SPLIT_LAYER_HPP_$/;"	d
CAFFE_SPP_LAYER_HPP_	include/caffe/layers/spp_layer.hpp	/^#define CAFFE_SPP_LAYER_HPP_$/;"	d
CAFFE_SYNCEDMEM_HPP_	include/caffe/syncedmem.hpp	/^#define CAFFE_SYNCEDMEM_HPP_$/;"	d
CAFFE_TANH_LAYER_HPP_	include/caffe/layers/tanh_layer.hpp	/^#define CAFFE_TANH_LAYER_HPP_$/;"	d
CAFFE_TEST_CUDA_PROP	src/caffe/test/test_caffe_main.cpp	/^  cudaDeviceProp CAFFE_TEST_CUDA_PROP;$/;"	m	namespace:caffe	file:
CAFFE_TEST_GRADIENT_CHECK_UTIL_H_	include/caffe/test/test_gradient_check_util.hpp	/^#define CAFFE_TEST_GRADIENT_CHECK_UTIL_H_$/;"	d
CAFFE_TEST_TEST_CAFFE_MAIN_HPP_	include/caffe/test/test_caffe_main.hpp	/^#define CAFFE_TEST_TEST_CAFFE_MAIN_HPP_$/;"	d
CAFFE_THRESHOLD_LAYER_HPP_	include/caffe/layers/threshold_layer.hpp	/^#define CAFFE_THRESHOLD_LAYER_HPP_$/;"	d
CAFFE_TILE_LAYER_HPP_	include/caffe/layers/tile_layer.hpp	/^#define CAFFE_TILE_LAYER_HPP_$/;"	d
CAFFE_TMP_DIR_RETRIES	include/caffe/util/io.hpp	/^#define CAFFE_TMP_DIR_RETRIES /;"	d
CAFFE_UTIL_BENCHMARK_H_	include/caffe/util/benchmark.hpp	/^#define CAFFE_UTIL_BENCHMARK_H_$/;"	d
CAFFE_UTIL_BLOCKING_QUEUE_HPP_	include/caffe/util/blocking_queue.hpp	/^#define CAFFE_UTIL_BLOCKING_QUEUE_HPP_$/;"	d
CAFFE_UTIL_CUDNN_H_	include/caffe/util/cudnn.hpp	/^#define CAFFE_UTIL_CUDNN_H_$/;"	d
CAFFE_UTIL_DB_HPP	include/caffe/util/db.hpp	/^#define CAFFE_UTIL_DB_HPP$/;"	d
CAFFE_UTIL_DB_LEVELDB_HPP	include/caffe/util/db_leveldb.hpp	/^#define CAFFE_UTIL_DB_LEVELDB_HPP$/;"	d
CAFFE_UTIL_DB_LMDB_HPP	include/caffe/util/db_lmdb.hpp	/^#define CAFFE_UTIL_DB_LMDB_HPP$/;"	d
CAFFE_UTIL_DEVICE_ALTERNATE_H_	include/caffe/util/device_alternate.hpp	/^#define CAFFE_UTIL_DEVICE_ALTERNATE_H_$/;"	d
CAFFE_UTIL_FORMAT_H_	include/caffe/util/format.hpp	/^#define CAFFE_UTIL_FORMAT_H_$/;"	d
CAFFE_UTIL_HDF5_H_	include/caffe/util/hdf5.hpp	/^#define CAFFE_UTIL_HDF5_H_$/;"	d
CAFFE_UTIL_IO_H_	include/caffe/util/io.hpp	/^#define CAFFE_UTIL_IO_H_$/;"	d
CAFFE_UTIL_MATH_FUNCTIONS_H_	include/caffe/util/math_functions.hpp	/^#define CAFFE_UTIL_MATH_FUNCTIONS_H_$/;"	d
CAFFE_UTIL_MKL_ALTERNATE_H_	include/caffe/util/mkl_alternate.hpp	/^#define CAFFE_UTIL_MKL_ALTERNATE_H_$/;"	d
CAFFE_UTIL_NCCL_H_	include/caffe/util/nccl.hpp	/^#define CAFFE_UTIL_NCCL_H_$/;"	d
CAFFE_UTIL_UPGRADE_PROTO_H_	include/caffe/util/upgrade_proto.hpp	/^#define CAFFE_UTIL_UPGRADE_PROTO_H_$/;"	d
CAFFE_WINDOW_DATA_LAYER_HPP_	include/caffe/layers/window_data_layer.hpp	/^#define CAFFE_WINDOW_DATA_LAYER_HPP_$/;"	d
CAFFE_XXX_LAYER_HPP_	include/caffe/layers/reshape_layer.hpp	/^#define CAFFE_XXX_LAYER_HPP_$/;"	d
CHECK	matlab/+caffe/private/CHECK.m	/^function CHECK(expr, error_msg)$/;"	f
CHECK_FILE_EXIST	matlab/+caffe/private/CHECK_FILE_EXIST.m	/^function CHECK_FILE_EXIST(filename)$/;"	f
COLORS	tools/extra/summarize.py	/^COLORS = ['92', '93', '94', '95', '97', '96', '42', '43;30', '100',$/;"	v
COLOR_DEFAULT	src/gtest/gtest-all.cpp	/^  COLOR_DEFAULT,$/;"	e	enum:testing::internal::GTestColor	file:
COLOR_GREEN	src/gtest/gtest-all.cpp	/^  COLOR_GREEN,$/;"	e	enum:testing::internal::GTestColor	file:
COLOR_RED	src/gtest/gtest-all.cpp	/^  COLOR_RED,$/;"	e	enum:testing::internal::GTestColor	file:
COLOR_YELLOW	src/gtest/gtest-all.cpp	/^  COLOR_YELLOW$/;"	e	enum:testing::internal::GTestColor	file:
CONFIG_FILE	Makefile	/^CONFIG_FILE := Makefile.config$/;"	m
CONVERT_LAYER_TRANSFORM_PARAM	src/caffe/util/upgrade_proto.cpp	/^#define CONVERT_LAYER_TRANSFORM_PARAM(/;"	d	file:
COORD_COLS	python/detect.py	/^COORD_COLS = ['ymin', 'xmin', 'ymax', 'xmax']$/;"	v
CPU	include/caffe/common.hpp	/^  enum Brew { CPU, GPU };$/;"	e	enum:caffe::Caffe::Brew
CPUDevice	include/caffe/test/test_caffe_main.hpp	/^struct CPUDevice {$/;"	s	namespace:caffe
CPUDeviceTest	include/caffe/test/test_caffe_main.hpp	/^class CPUDeviceTest : public MultiDeviceTest<CPUDevice<Dtype> > {$/;"	c	namespace:caffe
CPUMathFunctionsTest	src/caffe/test/test_math_functions.cpp	/^class CPUMathFunctionsTest$/;"	c	namespace:caffe	file:
CPUStochasticPoolingLayerTest	src/caffe/test/test_stochastic_pooling.cpp	/^class CPUStochasticPoolingLayerTest$/;"	c	namespace:caffe	file:
CPUTimer	include/caffe/util/benchmark.hpp	/^class CPUTimer : public Timer {$/;"	c	namespace:caffe
CPUTimer	src/caffe/util/benchmark.cpp	/^CPUTimer::CPUTimer() {$/;"	f	class:caffe::CPUTimer
CROP_MODES	python/detect.py	/^CROP_MODES = ['list', 'selective_search']$/;"	v
CStringEquals	src/gtest/gtest-all.cpp	/^bool String::CStringEquals(const char * lhs, const char * rhs) {$/;"	f	class:testing::internal::String
CUBLAS_CHECK	include/caffe/util/device_alternate.hpp	/^#define CUBLAS_CHECK(/;"	d
CUDA_CHECK	include/caffe/util/device_alternate.hpp	/^#define CUDA_CHECK(/;"	d
CUDA_INCLUDE_DIR	Makefile	/^CUDA_INCLUDE_DIR := $(CUDA_DIR)\/include$/;"	m
CUDA_KERNEL_LOOP	include/caffe/util/device_alternate.hpp	/^#define CUDA_KERNEL_LOOP(/;"	d
CUDA_LIB_DIR	Makefile	/^CUDA_LIB_DIR :=$/;"	m
CUDA_POST_KERNEL_CHECK	include/caffe/util/device_alternate.hpp	/^#define CUDA_POST_KERNEL_CHECK /;"	d
CUDA_VERSION	Makefile	/^		CUDA_VERSION := $(shell $(CUDA_DIR)\/bin\/nvcc -V | grep -o 'release [0-9.]*' | tr -d '[a-z ]')$/;"	m
CUDNN_CHECK	include/caffe/util/cudnn.hpp	/^#define CUDNN_CHECK(/;"	d
CUDNN_STREAMS_PER_GROUP	src/caffe/layers/cudnn_conv_layer.cpp	/^#define CUDNN_STREAMS_PER_GROUP /;"	d	file:
CUDNN_VERSION_MIN	include/caffe/util/cudnn.hpp	/^#define CUDNN_VERSION_MIN(/;"	d
CURAND_CHECK	include/caffe/util/device_alternate.hpp	/^#define CURAND_CHECK(/;"	d
CU_OBJS	Makefile	/^CU_OBJS := $(addprefix $(BUILD_DIR)\/cuda\/, ${CU_SRCS:.cu=.o})$/;"	m
CU_SRCS	Makefile	/^CU_SRCS := $(shell find src\/$(PROJECT) ! -name "test_*.cu" -name "*.cu")$/;"	m
CU_WARNS	Makefile	/^CU_WARNS := $(addprefix $(BUILD_DIR)\/cuda\/, ${CU_SRCS:.cu=.o.$(WARNS_EXT)})$/;"	m
CVMatToDatum	src/caffe/util/io.cpp	/^void CVMatToDatum(const cv::Mat& cv_img, Datum* datum) {$/;"	f	namespace:caffe
CXX	Makefile	/^	CXX := $(CUSTOM_CXX)$/;"	m
CXX	Makefile	/^	CXX := \/usr\/bin\/clang++$/;"	m
CXX	Makefile	/^	CXX ?= \/usr\/bin\/g++$/;"	m
CXX_OBJS	Makefile	/^CXX_OBJS := $(addprefix $(BUILD_DIR)\/, ${CXX_SRCS:.cpp=.o})$/;"	m
CXX_SRCS	Makefile	/^CXX_SRCS := $(shell find src\/$(PROJECT) ! -name "test_*.cpp" -name "*.cpp")$/;"	m
CXX_WARNS	Makefile	/^CXX_WARNS := $(addprefix $(BUILD_DIR)\/, ${CXX_SRCS:.cpp=.o.$(WARNS_EXT)})$/;"	m
Caffe	include/caffe/common.hpp	/^class Caffe {$/;"	c	namespace:caffe
Caffe	src/caffe/common.cpp	/^Caffe::Caffe()$/;"	f	class:caffe::Caffe
CaffeFreeHost	include/caffe/syncedmem.hpp	/^inline void CaffeFreeHost(void* ptr, bool use_cuda) {$/;"	f	namespace:caffe
CaffeMallocHost	include/caffe/syncedmem.hpp	/^inline void CaffeMallocHost(void** ptr, size_t size, bool* use_cuda) {$/;"	f	namespace:caffe
CaffeSolver	examples/pycaffe/tools.py	/^class CaffeSolver:$/;"	c
CalculateEndIndex	src/gtest/gtest.h	/^  static int CalculateEndIndex(const T& begin,$/;"	f	class:testing::internal::RangeGenerator
Callback	include/caffe/net.hpp	/^  class Callback {$/;"	c	class:caffe::Net
Callback	include/caffe/solver.hpp	/^  class Callback {$/;"	c	class:caffe::Solver
CanonicalAxisIndex	include/caffe/blob.hpp	/^  inline int CanonicalAxisIndex(int axis_index) const {$/;"	f	class:caffe::Blob
CanonicalizeAlphabeticalOrder	scripts/cpp_lint.py	/^  def CanonicalizeAlphabeticalOrder(self, header_path):$/;"	m	class:_IncludeState
CaptureStderr	src/gtest/gtest-all.cpp	/^void CaptureStderr() {$/;"	f	namespace:testing::internal
CaptureStdout	src/gtest/gtest-all.cpp	/^void CaptureStdout() {$/;"	f	namespace:testing::internal
CaptureStream	src/gtest/gtest-all.cpp	/^void CaptureStream(int fd, const char* stream_name, CapturedStream** stream) {$/;"	f	namespace:testing::internal
CapturedStream	src/gtest/gtest-all.cpp	/^  CapturedStream(int fd) : fd_(fd), uncaptured_fd_(dup(fd)) {$/;"	f	class:testing::internal::CapturedStream
CapturedStream	src/gtest/gtest-all.cpp	/^class CapturedStream {$/;"	c	namespace:testing::internal	file:
CartesianProductGenerator10	src/gtest/gtest.h	/^  CartesianProductGenerator10(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator10
CartesianProductGenerator10	src/gtest/gtest.h	/^class CartesianProductGenerator10$/;"	c	namespace:testing::internal
CartesianProductGenerator2	src/gtest/gtest.h	/^  CartesianProductGenerator2(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator2
CartesianProductGenerator2	src/gtest/gtest.h	/^class CartesianProductGenerator2$/;"	c	namespace:testing::internal
CartesianProductGenerator3	src/gtest/gtest.h	/^  CartesianProductGenerator3(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator3
CartesianProductGenerator3	src/gtest/gtest.h	/^class CartesianProductGenerator3$/;"	c	namespace:testing::internal
CartesianProductGenerator4	src/gtest/gtest.h	/^  CartesianProductGenerator4(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator4
CartesianProductGenerator4	src/gtest/gtest.h	/^class CartesianProductGenerator4$/;"	c	namespace:testing::internal
CartesianProductGenerator5	src/gtest/gtest.h	/^  CartesianProductGenerator5(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator5
CartesianProductGenerator5	src/gtest/gtest.h	/^class CartesianProductGenerator5$/;"	c	namespace:testing::internal
CartesianProductGenerator6	src/gtest/gtest.h	/^  CartesianProductGenerator6(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator6
CartesianProductGenerator6	src/gtest/gtest.h	/^class CartesianProductGenerator6$/;"	c	namespace:testing::internal
CartesianProductGenerator7	src/gtest/gtest.h	/^  CartesianProductGenerator7(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator7
CartesianProductGenerator7	src/gtest/gtest.h	/^class CartesianProductGenerator7$/;"	c	namespace:testing::internal
CartesianProductGenerator8	src/gtest/gtest.h	/^  CartesianProductGenerator8(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator8
CartesianProductGenerator8	src/gtest/gtest.h	/^class CartesianProductGenerator8$/;"	c	namespace:testing::internal
CartesianProductGenerator9	src/gtest/gtest.h	/^  CartesianProductGenerator9(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator9
CartesianProductGenerator9	src/gtest/gtest.h	/^class CartesianProductGenerator9$/;"	c	namespace:testing::internal
CartesianProductHolder10	src/gtest/gtest.h	/^CartesianProductHolder10(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder10
CartesianProductHolder10	src/gtest/gtest.h	/^class CartesianProductHolder10 {$/;"	c	namespace:testing::internal
CartesianProductHolder2	src/gtest/gtest.h	/^CartesianProductHolder2(const Generator1& g1, const Generator2& g2)$/;"	f	class:testing::internal::CartesianProductHolder2
CartesianProductHolder2	src/gtest/gtest.h	/^class CartesianProductHolder2 {$/;"	c	namespace:testing::internal
CartesianProductHolder3	src/gtest/gtest.h	/^CartesianProductHolder3(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder3
CartesianProductHolder3	src/gtest/gtest.h	/^class CartesianProductHolder3 {$/;"	c	namespace:testing::internal
CartesianProductHolder4	src/gtest/gtest.h	/^CartesianProductHolder4(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder4
CartesianProductHolder4	src/gtest/gtest.h	/^class CartesianProductHolder4 {$/;"	c	namespace:testing::internal
CartesianProductHolder5	src/gtest/gtest.h	/^CartesianProductHolder5(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder5
CartesianProductHolder5	src/gtest/gtest.h	/^class CartesianProductHolder5 {$/;"	c	namespace:testing::internal
CartesianProductHolder6	src/gtest/gtest.h	/^CartesianProductHolder6(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder6
CartesianProductHolder6	src/gtest/gtest.h	/^class CartesianProductHolder6 {$/;"	c	namespace:testing::internal
CartesianProductHolder7	src/gtest/gtest.h	/^CartesianProductHolder7(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder7
CartesianProductHolder7	src/gtest/gtest.h	/^class CartesianProductHolder7 {$/;"	c	namespace:testing::internal
CartesianProductHolder8	src/gtest/gtest.h	/^CartesianProductHolder8(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder8
CartesianProductHolder8	src/gtest/gtest.h	/^class CartesianProductHolder8 {$/;"	c	namespace:testing::internal
CartesianProductHolder9	src/gtest/gtest.h	/^CartesianProductHolder9(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder9
CartesianProductHolder9	src/gtest/gtest.h	/^class CartesianProductHolder9 {$/;"	c	namespace:testing::internal
CaseInsensitiveCStringEquals	src/gtest/gtest-all.cpp	/^bool String::CaseInsensitiveCStringEquals(const char * lhs, const char * rhs) {$/;"	f	class:testing::internal::String
CaseInsensitiveWideCStringEquals	src/gtest/gtest-all.cpp	/^bool String::CaseInsensitiveWideCStringEquals(const wchar_t* lhs,$/;"	f	class:testing::internal::String
ChDir	src/gtest/gtest.h	/^inline int ChDir(const char* dir) { return chdir(dir); }$/;"	f	namespace:std::tr1::posix
CharFormat	src/gtest/gtest-all.cpp	/^enum CharFormat {$/;"	g	namespace:testing::internal	file:
Check	scripts/cpp_lint.py	/^  def Check(self, error, filename, linenum):$/;"	m	class:_FunctionState
CheckAccess	scripts/cpp_lint.py	/^def CheckAccess(filename, clean_lines, linenum, nesting_state, error):$/;"	f
CheckAccumulation	src/caffe/test/test_gradient_based_solver.cpp	/^  void CheckAccumulation(const Dtype kLearningRate, const Dtype kWeightDecay,$/;"	f	class:caffe::GradientBasedSolverTest
CheckAltTokens	scripts/cpp_lint.py	/^def CheckAltTokens(filename, clean_lines, linenum, error):$/;"	f
CheckBegin	scripts/cpp_lint.py	/^  def CheckBegin(self, filename, clean_lines, linenum, error):$/;"	m	class:_BlockInfo
CheckBegin	scripts/cpp_lint.py	/^  def CheckBegin(self, filename, clean_lines, linenum, error):$/;"	m	class:_ClassInfo
CheckBlobCounts	include/caffe/layer.hpp	/^  virtual void CheckBlobCounts(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::Layer
CheckBlobEqual	src/caffe/test/test_hdf5_output_layer.cpp	/^void HDF5OutputLayerTest<TypeParam>::CheckBlobEqual(const Blob<Dtype>& b1,$/;"	f	class:caffe::HDF5OutputLayerTest
CheckBraces	scripts/cpp_lint.py	/^def CheckBraces(filename, clean_lines, linenum, error):$/;"	f
CheckCStyleCast	scripts/cpp_lint.py	/^def CheckCStyleCast(filename, linenum, line, raw_line, cast_type, pattern,$/;"	f
CheckCaffeAlternatives	scripts/cpp_lint.py	/^def CheckCaffeAlternatives(filename, clean_lines, linenum, error):$/;"	f
CheckCaffeDataLayerSetUp	scripts/cpp_lint.py	/^def CheckCaffeDataLayerSetUp(filename, clean_lines, linenum, error):$/;"	f
CheckCaffeRandom	scripts/cpp_lint.py	/^def CheckCaffeRandom(filename, clean_lines, linenum, error):$/;"	f
CheckCheck	scripts/cpp_lint.py	/^def CheckCheck(filename, clean_lines, linenum, error):$/;"	f
CheckComment	scripts/cpp_lint.py	/^def CheckComment(comment, filename, linenum, error):$/;"	f
CheckCompletedBlocks	scripts/cpp_lint.py	/^  def CheckCompletedBlocks(self, filename, error):$/;"	m	class:_NestingState
CheckContiguousArray	python/caffe/_caffe.cpp	/^void CheckContiguousArray(PyArrayObject* arr, string name,$/;"	f	namespace:caffe
CheckDevice	src/caffe/common.cpp	/^bool Caffe::CheckDevice(const int device_id) {$/;"	f	class:caffe::Caffe
CheckEmptyBlockBody	scripts/cpp_lint.py	/^def CheckEmptyBlockBody(filename, clean_lines, linenum, error):$/;"	f
CheckEnd	scripts/cpp_lint.py	/^  def CheckEnd(self, filename, clean_lines, linenum, error):$/;"	m	class:_BlockInfo
CheckEnd	scripts/cpp_lint.py	/^  def CheckEnd(self, filename, clean_lines, linenum, error):$/;"	m	class:_ClassInfo
CheckEnd	scripts/cpp_lint.py	/^  def CheckEnd(self, filename, clean_lines, linenum, error):$/;"	m	class:_NamespaceInfo
CheckFile	python/caffe/_caffe.cpp	/^static void CheckFile(const string& filename) {$/;"	f	namespace:caffe
CheckForBadCharacters	scripts/cpp_lint.py	/^def CheckForBadCharacters(filename, lines, error):$/;"	f
CheckForCopyright	scripts/cpp_lint.py	/^def CheckForCopyright(filename, lines, error):$/;"	f
CheckForFunctionLengths	scripts/cpp_lint.py	/^def CheckForFunctionLengths(filename, clean_lines, linenum,$/;"	f
CheckForHeaderGuard	scripts/cpp_lint.py	/^def CheckForHeaderGuard(filename, lines, error):$/;"	f
CheckForIncludeWhatYouUse	scripts/cpp_lint.py	/^def CheckForIncludeWhatYouUse(filename, clean_lines, include_state, error,$/;"	f
CheckForMultilineCommentsAndStrings	scripts/cpp_lint.py	/^def CheckForMultilineCommentsAndStrings(filename, clean_lines, linenum, error):$/;"	f
CheckForNewlineAtEOF	scripts/cpp_lint.py	/^def CheckForNewlineAtEOF(filename, lines, error):$/;"	f
CheckForNonConstReference	scripts/cpp_lint.py	/^def CheckForNonConstReference(filename, clean_lines, linenum,$/;"	f
CheckForNonStandardConstructs	scripts/cpp_lint.py	/^def CheckForNonStandardConstructs(filename, clean_lines, linenum,$/;"	f
CheckForSignals	src/caffe/util/signal_handler.cpp	/^SolverAction::Enum SignalHandler::CheckForSignals() const {$/;"	f	class:caffe::SignalHandler
CheckGradient	include/caffe/test/test_gradient_check_util.hpp	/^  void CheckGradient(Layer<Dtype>* layer, const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::GradientChecker
CheckGradientEltwise	include/caffe/test/test_gradient_check_util.hpp	/^void GradientChecker<Dtype>::CheckGradientEltwise(Layer<Dtype>* layer,$/;"	f	class:caffe::GradientChecker
CheckGradientExhaustive	include/caffe/test/test_gradient_check_util.hpp	/^void GradientChecker<Dtype>::CheckGradientExhaustive(Layer<Dtype>* layer,$/;"	f	class:caffe::GradientChecker
CheckGradientNet	include/caffe/test/test_gradient_check_util.hpp	/^void GradientChecker<Dtype>::CheckGradientNet($/;"	f	class:caffe::GradientChecker
CheckGradientSingle	include/caffe/test/test_gradient_check_util.hpp	/^void GradientChecker<Dtype>::CheckGradientSingle(Layer<Dtype>* layer,$/;"	f	class:caffe::GradientChecker
CheckIncludeLine	scripts/cpp_lint.py	/^def CheckIncludeLine(filename, clean_lines, linenum, include_state, error):$/;"	f
CheckInvalidIncrement	scripts/cpp_lint.py	/^def CheckInvalidIncrement(filename, clean_lines, linenum, error):$/;"	f
CheckLanguage	scripts/cpp_lint.py	/^def CheckLanguage(filename, clean_lines, linenum, file_extension,$/;"	f
CheckLeastSquaresUpdate	src/caffe/test/test_gradient_based_solver.cpp	/^  void CheckLeastSquaresUpdate($/;"	f	class:caffe::GradientBasedSolverTest
CheckMakePairUsesDeduction	scripts/cpp_lint.py	/^def CheckMakePairUsesDeduction(filename, clean_lines, linenum, error):$/;"	f
CheckNextIncludeOrder	scripts/cpp_lint.py	/^  def CheckNextIncludeOrder(self, header_type):$/;"	m	class:_IncludeState
CheckPosixThreading	scripts/cpp_lint.py	/^def CheckPosixThreading(filename, clean_lines, linenum, error):$/;"	f
CheckSectionSpacing	scripts/cpp_lint.py	/^def CheckSectionSpacing(filename, clean_lines, class_info, linenum, error):$/;"	f
CheckSnapshotWritePermissions	src/caffe/solver.cpp	/^void Solver<Dtype>::CheckSnapshotWritePermissions() {$/;"	f	class:caffe::Solver
CheckSpacing	scripts/cpp_lint.py	/^def CheckSpacing(filename, clean_lines, linenum, nesting_state, error):$/;"	f
CheckSpacingForFunctionCall	scripts/cpp_lint.py	/^def CheckSpacingForFunctionCall(filename, line, linenum, error):$/;"	f
CheckStyle	scripts/cpp_lint.py	/^def CheckStyle(filename, clean_lines, linenum, file_extension, nesting_state,$/;"	f
CheckVlogArguments	scripts/cpp_lint.py	/^def CheckVlogArguments(filename, clean_lines, linenum, error):$/;"	f
CheckedDowncastToActualType	src/gtest/gtest.h	/^Derived* CheckedDowncastToActualType(Base* base) {$/;"	f	namespace:std::tr1
ChopLowBits	src/gtest/gtest-all.cpp	/^inline UInt32 ChopLowBits(UInt32* bits, int n) {$/;"	f	namespace:testing::internal
ClassUniqueToAlwaysTrue	src/gtest/gtest-all.cpp	/^class ClassUniqueToAlwaysTrue {};$/;"	c	namespace:testing::internal::__anon5	file:
Classifier	examples/cpp_classification/classification.cpp	/^Classifier::Classifier(const string& model_file,$/;"	f	class:Classifier
Classifier	examples/cpp_classification/classification.cpp	/^class Classifier {$/;"	c	file:
Classifier	python/caffe/__init__.py	/^from .classifier import Classifier$/;"	i
Classifier	python/caffe/classifier.py	/^class Classifier(caffe.Net):$/;"	c
Classify	examples/cpp_classification/classification.cpp	/^std::vector<Prediction> Classifier::Classify(const cv::Mat& img, int N) {$/;"	f	class:Classifier
CleanseComments	scripts/cpp_lint.py	/^def CleanseComments(line):$/;"	f
CleanseRawStrings	scripts/cpp_lint.py	/^def CleanseRawStrings(raw_lines):$/;"	f
CleansedLines	scripts/cpp_lint.py	/^class CleansedLines(object):$/;"	c
Clear	src/gtest/gtest-all.cpp	/^void TestResult::Clear() {$/;"	f	class:testing::TestResult
ClearAdHocTestResult	src/gtest/gtest-all.cpp	/^  void ClearAdHocTestResult() {$/;"	f	class:testing::internal::UnitTestImpl
ClearNonAdHocTestResult	src/gtest/gtest-all.cpp	/^  void ClearNonAdHocTestResult() {$/;"	f	class:testing::internal::UnitTestImpl
ClearParamDiffs	src/caffe/net.cpp	/^void Net<Dtype>::ClearParamDiffs() {$/;"	f	class:caffe::Net
ClearResult	src/gtest/gtest-all.cpp	/^void TestCase::ClearResult() {$/;"	f	class:testing::TestCase
ClearTestCaseResult	src/gtest/gtest.h	/^  static void ClearTestCaseResult(TestCase* test_case) {$/;"	f	class:testing::TestCase
ClearTestPartResults	src/gtest/gtest-all.cpp	/^  static void ClearTestPartResults(TestResult* test_result) {$/;"	f	class:testing::internal::TestResultAccessor
ClearTestPartResults	src/gtest/gtest-all.cpp	/^void TestResult::ClearTestPartResults() {$/;"	f	class:testing::TestResult
ClearTestResult	src/gtest/gtest.h	/^  static void ClearTestResult(TestInfo* test_info) {$/;"	f	class:testing::TestInfo
ClipGradients	src/caffe/solvers/sgd_solver.cpp	/^void SGDSolver<Dtype>::ClipGradients() {$/;"	f	class:caffe::SGDSolver
Clone	src/gtest/gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
Clone	src/gtest/gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
Clone	src/gtest/gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
Clone	src/gtest/gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
Clone	src/gtest/gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
Clone	src/gtest/gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
Clone	src/gtest/gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
Clone	src/gtest/gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
Clone	src/gtest/gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
Clone	src/gtest/gtest.h	/^    virtual ParamIteratorInterface<T>* Clone() const {$/;"	f	class:testing::internal::RangeGenerator::Iterator
Clone	src/gtest/gtest.h	/^    virtual ParamIteratorInterface<T>* Clone() const {$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
CloneCString	src/gtest/gtest-all.cpp	/^const char * String::CloneCString(const char* c_str) {$/;"	f	class:testing::internal::String
CloneString	src/gtest/gtest-all.cpp	/^static char* CloneString(const char* str, size_t length) {$/;"	f	namespace:testing::internal
Close	include/caffe/util/db_leveldb.hpp	/^  virtual void Close() {$/;"	f	class:caffe::db::LevelDB
Close	include/caffe/util/db_lmdb.hpp	/^  virtual void Close() {$/;"	f	class:caffe::db::LMDB
Close	src/gtest/gtest.h	/^inline int Close(int fd) { return close(fd); }$/;"	f	namespace:std::tr1::posix
CloseConnection	src/gtest/gtest-all.cpp	/^  void CloseConnection() {$/;"	f	class:testing::internal::StreamingListener	file:
CloseExpression	scripts/cpp_lint.py	/^def CloseExpression(clean_lines, linenum, pos):$/;"	f
CmpHelperEQ	src/gtest/gtest-all.cpp	/^AssertionResult CmpHelperEQ(const char* expected_expression,$/;"	f	namespace:testing::internal
CmpHelperEQ	src/gtest/gtest.h	/^AssertionResult CmpHelperEQ(const char* expected_expression,$/;"	f	namespace:testing::internal
CmpHelperFloatingPointEQ	src/gtest/gtest.h	/^AssertionResult CmpHelperFloatingPointEQ(const char* expected_expression,$/;"	f	namespace:testing::internal
CmpHelperSTRCASEEQ	src/gtest/gtest-all.cpp	/^AssertionResult CmpHelperSTRCASEEQ(const char* expected_expression,$/;"	f	namespace:testing::internal
CmpHelperSTRCASENE	src/gtest/gtest-all.cpp	/^AssertionResult CmpHelperSTRCASENE(const char* s1_expression,$/;"	f	namespace:testing::internal
CmpHelperSTREQ	src/gtest/gtest-all.cpp	/^AssertionResult CmpHelperSTREQ(const char* expected_expression,$/;"	f	namespace:testing::internal
CmpHelperSTRNE	src/gtest/gtest-all.cpp	/^AssertionResult CmpHelperSTRNE(const char* s1_expression,$/;"	f	namespace:testing::internal
CodePointToUtf8	src/gtest/gtest-all.cpp	/^char* CodePointToUtf8(UInt32 code_point, char* str) {$/;"	f	namespace:testing::internal
ColoredPrintf	src/gtest/gtest-all.cpp	/^void ColoredPrintf(GTestColor color, const char* fmt, ...) {$/;"	f	namespace:testing::internal
Combine	src/gtest/gtest.h	/^    Generator10> Combine($/;"	f	namespace:testing
Combine	src/gtest/gtest.h	/^    Generator4, Generator5, Generator6, Generator7, Generator8> Combine($/;"	f	namespace:testing
Combine	src/gtest/gtest.h	/^    Generator4, Generator5, Generator6, Generator7> Combine($/;"	f	namespace:testing
Combine	src/gtest/gtest.h	/^    Generator4, Generator5, Generator6> Combine($/;"	f	namespace:testing
Combine	src/gtest/gtest.h	/^    Generator4, Generator5> Combine($/;"	f	namespace:testing
Combine	src/gtest/gtest.h	/^    Generator4> Combine($/;"	f	namespace:testing
Combine	src/gtest/gtest.h	/^    Generator9> Combine($/;"	f	namespace:testing
Combine	src/gtest/gtest.h	/^internal::CartesianProductHolder2<Generator1, Generator2> Combine($/;"	f	namespace:testing
Combine	src/gtest/gtest.h	/^internal::CartesianProductHolder3<Generator1, Generator2, Generator3> Combine($/;"	f	namespace:testing
Commit	include/caffe/util/db_leveldb.hpp	/^  virtual void Commit() {$/;"	f	class:caffe::db::LevelDBTransaction
Commit	src/caffe/util/db_lmdb.cpp	/^void LMDBTransaction::Commit() {$/;"	f	class:caffe::db::LMDBTransaction
CommonTest	src/caffe/test/test_common.cpp	/^class CommonTest : public ::testing::Test {};$/;"	c	namespace:caffe	file:
Compare	src/gtest/gtest-all.cpp	/^int String::Compare(const String & rhs) const {$/;"	f	class:testing::internal::String
Compare	src/gtest/gtest.h	/^  static AssertionResult Compare($/;"	f	class:testing::internal::EqHelper
Compare	src/gtest/gtest.h	/^  static AssertionResult Compare(const char* expected_expression,$/;"	f	class:testing::internal::EqHelper
CompileAssertTypesEqual	src/gtest/gtest.h	/^struct CompileAssertTypesEqual<T, T> {$/;"	s	namespace:testing::internal
ComputeCurrentValue	src/gtest/gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
ComputeCurrentValue	src/gtest/gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
ComputeCurrentValue	src/gtest/gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
ComputeCurrentValue	src/gtest/gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
ComputeCurrentValue	src/gtest/gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
ComputeCurrentValue	src/gtest/gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
ComputeCurrentValue	src/gtest/gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
ComputeCurrentValue	src/gtest/gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
ComputeCurrentValue	src/gtest/gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
ComputeLeastSquaresUpdate	src/caffe/test/test_gradient_based_solver.cpp	/^  void ComputeLeastSquaresUpdate(const Dtype learning_rate,$/;"	f	class:caffe::GradientBasedSolverTest
ComputeUpdateValue	src/caffe/solvers/adadelta_solver.cpp	/^void AdaDeltaSolver<Dtype>::ComputeUpdateValue(int param_id, Dtype rate) {$/;"	f	class:caffe::AdaDeltaSolver
ComputeUpdateValue	src/caffe/solvers/adagrad_solver.cpp	/^void AdaGradSolver<Dtype>::ComputeUpdateValue(int param_id, Dtype rate) {$/;"	f	class:caffe::AdaGradSolver
ComputeUpdateValue	src/caffe/solvers/adam_solver.cpp	/^void AdamSolver<Dtype>::ComputeUpdateValue(int param_id, Dtype rate) {$/;"	f	class:caffe::AdamSolver
ComputeUpdateValue	src/caffe/solvers/nesterov_solver.cpp	/^void NesterovSolver<Dtype>::ComputeUpdateValue(int param_id, Dtype rate) {$/;"	f	class:caffe::NesterovSolver
ComputeUpdateValue	src/caffe/solvers/rmsprop_solver.cpp	/^void RMSPropSolver<Dtype>::ComputeUpdateValue(int param_id, Dtype rate) {$/;"	f	class:caffe::RMSPropSolver
ComputeUpdateValue	src/caffe/solvers/sgd_solver.cpp	/^void SGDSolver<Dtype>::ComputeUpdateValue(int param_id, Dtype rate) {$/;"	f	class:caffe::SGDSolver
ConcatLayer	include/caffe/layers/concat_layer.hpp	/^  explicit ConcatLayer(const LayerParameter& param)$/;"	f	class:caffe::ConcatLayer
ConcatLayer	include/caffe/layers/concat_layer.hpp	/^class ConcatLayer : public Layer<Dtype> {$/;"	c	namespace:caffe
ConcatLayerTest	src/caffe/test/test_concat_layer.cpp	/^  ConcatLayerTest()$/;"	f	class:caffe::ConcatLayerTest
ConcatLayerTest	src/caffe/test/test_concat_layer.cpp	/^class ConcatLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
ConcatPaths	src/gtest/gtest-all.cpp	/^FilePath FilePath::ConcatPaths(const FilePath& directory,$/;"	f	class:testing::internal::FilePath
Configure	src/caffe/parallel.cpp	/^void GPUParams<Dtype>::Configure(Solver<Dtype>* solver) const {$/;"	f	class:caffe::GPUParams
ConfigureSplitLayer	src/caffe/util/insert_splits.cpp	/^void ConfigureSplitLayer(const string& layer_name, const string& blob_name,$/;"	f	namespace:caffe
ConfigureStreamingOutput	src/gtest/gtest-all.cpp	/^void UnitTestImpl::ConfigureStreamingOutput() {$/;"	f	class:testing::internal::UnitTestImpl
ConfigureXmlOutput	src/gtest/gtest-all.cpp	/^void UnitTestImpl::ConfigureXmlOutput() {$/;"	f	class:testing::internal::UnitTestImpl
ConstCharPtr	src/gtest/gtest.h	/^  ConstCharPtr(const char* str) : value(str) {}$/;"	f	struct:testing::internal::ConstCharPtr
ConstCharPtr	src/gtest/gtest.h	/^struct GTEST_API_ ConstCharPtr {$/;"	s	namespace:testing::internal
ConstantFiller	include/caffe/filler.hpp	/^  explicit ConstantFiller(const FillerParameter& param)$/;"	f	class:caffe::ConstantFiller
ConstantFiller	include/caffe/filler.hpp	/^class ConstantFiller : public Filler<Dtype> {$/;"	c	namespace:caffe
ConstantFillerTest	src/caffe/test/test_filler.cpp	/^  ConstantFillerTest()$/;"	f	class:caffe::ConstantFillerTest
ConstantFillerTest	src/caffe/test/test_filler.cpp	/^class ConstantFillerTest : public ::testing::Test {$/;"	c	namespace:caffe	file:
ConstructNonNull	src/gtest/gtest.h	/^  void ConstructNonNull(const char* buffer, size_t a_length) {$/;"	f	class:testing::internal::String
ContainerType	src/gtest/gtest.h	/^  typedef typename ::std::vector<T> ContainerType;$/;"	t	class:testing::internal::ValuesInIteratorRangeGenerator
ContrastiveLossLayer	include/caffe/layers/contrastive_loss_layer.hpp	/^  explicit ContrastiveLossLayer(const LayerParameter& param)$/;"	f	class:caffe::ContrastiveLossLayer
ContrastiveLossLayer	include/caffe/layers/contrastive_loss_layer.hpp	/^class ContrastiveLossLayer : public LossLayer<Dtype> {$/;"	c	namespace:caffe
ContrastiveLossLayerTest	src/caffe/test/test_contrastive_loss_layer.cpp	/^  ContrastiveLossLayerTest()$/;"	f	class:caffe::ContrastiveLossLayerTest
ContrastiveLossLayerTest	src/caffe/test/test_contrastive_loss_layer.cpp	/^class ContrastiveLossLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
ConvolutionLayer	include/caffe/layers/conv_layer.hpp	/^  explicit ConvolutionLayer(const LayerParameter& param)$/;"	f	class:caffe::ConvolutionLayer
ConvolutionLayer	include/caffe/layers/conv_layer.hpp	/^class ConvolutionLayer : public BaseConvolutionLayer<Dtype> {$/;"	c	namespace:caffe
ConvolutionLayerTest	src/caffe/test/test_convolution_layer.cpp	/^  ConvolutionLayerTest()$/;"	f	class:caffe::ConvolutionLayerTest
ConvolutionLayerTest	src/caffe/test/test_convolution_layer.cpp	/^class ConvolutionLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
CopyArray	src/gtest/gtest.h	/^inline void CopyArray(const T& from, U* to) { *to = from; }$/;"	f	namespace:testing::internal
CopyArray	src/gtest/gtest.h	/^void CopyArray(const T* from, size_t size, U* to) {$/;"	f	namespace:testing::internal
CopyFrom	src/caffe/blob.cpp	/^void Blob<Dtype>::CopyFrom(const Blob& source, bool copy_diff, bool reshape) {$/;"	f	class:caffe::Blob
CopyLayers	tools/caffe.cpp	/^void CopyLayers(caffe::Solver<float>* solver, const std::string& model_list) {$/;"	f
CopyNetBlobs	src/caffe/test/test_net.cpp	/^  virtual void CopyNetBlobs(const bool copy_diff,$/;"	f	class:caffe::NetTest
CopyNetParams	src/caffe/test/test_net.cpp	/^  virtual void CopyNetParams(const bool copy_diff,$/;"	f	class:caffe::NetTest
CopyTrainedLayersFrom	src/caffe/net.cpp	/^void Net<Dtype>::CopyTrainedLayersFrom(const NetParameter& param) {$/;"	f	class:caffe::Net
CopyTrainedLayersFrom	src/caffe/net.cpp	/^void Net<Dtype>::CopyTrainedLayersFrom(const string trained_filename) {$/;"	f	class:caffe::Net
CopyTrainedLayersFromBinaryProto	src/caffe/net.cpp	/^void Net<Dtype>::CopyTrainedLayersFromBinaryProto($/;"	f	class:caffe::Net
CopyTrainedLayersFromHDF5	src/caffe/net.cpp	/^void Net<Dtype>::CopyTrainedLayersFromHDF5(const string trained_filename) {$/;"	f	class:caffe::Net
Count	scripts/cpp_lint.py	/^  def Count(self):$/;"	m	class:_FunctionState
CountIf	src/gtest/gtest-all.cpp	/^inline int CountIf(const Container& c, Predicate predicate) {$/;"	f	namespace:testing::internal
Counter	python/caffe/net_spec.py	/^from collections import OrderedDict, Counter$/;"	i
Create	src/gtest/gtest-all.cpp	/^bool DeathTest::Create(const char* statement, const RE* regex,$/;"	f	class:testing::internal::DeathTest
Create	src/gtest/gtest-all.cpp	/^bool DefaultDeathTestFactory::Create(const char* statement, const RE* regex,$/;"	f	class:testing::internal::DefaultDeathTestFactory
CreateCodePointFromUtf16SurrogatePair	src/gtest/gtest-all.cpp	/^inline UInt32 CreateCodePointFromUtf16SurrogatePair(wchar_t first,$/;"	f	namespace:testing::internal
CreateDirectoriesRecursively	src/gtest/gtest-all.cpp	/^bool FilePath::CreateDirectoriesRecursively() const {$/;"	f	class:testing::internal::FilePath
CreateFolder	src/gtest/gtest-all.cpp	/^bool FilePath::CreateFolder() const {$/;"	f	class:testing::internal::FilePath
CreateKey	src/gtest/gtest.h	/^  static pthread_key_t CreateKey() {$/;"	f	class:std::tr1::ThreadLocal
CreateLayer	include/caffe/layer_factory.hpp	/^  static shared_ptr<Layer<Dtype> > CreateLayer(const LayerParameter& param) {$/;"	f	class:caffe::LayerRegistry
CreateSolver	include/caffe/solver_factory.hpp	/^  static Solver<Dtype>* CreateSolver(const SolverParameter& param) {$/;"	f	class:caffe::SolverRegistry
CreateTest	src/gtest/gtest.h	/^  virtual Test* CreateTest() { return new TestClass; }$/;"	f	class:testing::internal::TestFactoryImpl
CreateTest	src/gtest/gtest.h	/^  virtual Test* CreateTest() {$/;"	f	class:testing::internal::ParameterizedTestFactory
CreateTestFactory	src/gtest/gtest.h	/^  virtual TestFactoryBase* CreateTestFactory(ParamType parameter) {$/;"	f	class:testing::internal::TestMetaFactory
Creator	include/caffe/layer_factory.hpp	/^  typedef shared_ptr<Layer<Dtype> > (*Creator)(const LayerParameter&);$/;"	t	class:caffe::LayerRegistry
Creator	include/caffe/solver_factory.hpp	/^  typedef Solver<Dtype>* (*Creator)(const SolverParameter&);$/;"	t	class:caffe::SolverRegistry
CreatorRegistry	include/caffe/layer_factory.hpp	/^  typedef std::map<string, Creator> CreatorRegistry;$/;"	t	class:caffe::LayerRegistry
CreatorRegistry	include/caffe/solver_factory.hpp	/^  typedef std::map<string, Creator> CreatorRegistry;$/;"	t	class:caffe::SolverRegistry
CropLayer	include/caffe/layers/crop_layer.hpp	/^  explicit CropLayer(const LayerParameter& param)$/;"	f	class:caffe::CropLayer
CropLayer	include/caffe/layers/crop_layer.hpp	/^class CropLayer : public Layer<Dtype> {$/;"	c	namespace:caffe
CropLayerTest	src/caffe/test/test_crop_layer.cpp	/^  CropLayerTest()$/;"	f	class:caffe::CropLayerTest
CropLayerTest	src/caffe/test/test_crop_layer.cpp	/^class CropLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
CrossChannelBackward_cpu	src/caffe/layers/lrn_layer.cpp	/^void LRNLayer<Dtype>::CrossChannelBackward_cpu($/;"	f	class:caffe::LRNLayer
CrossChannelForward_cpu	src/caffe/layers/lrn_layer.cpp	/^void LRNLayer<Dtype>::CrossChannelForward_cpu($/;"	f	class:caffe::LRNLayer
CuDNNConvolutionLayer	include/caffe/layers/cudnn_conv_layer.hpp	/^  explicit CuDNNConvolutionLayer(const LayerParameter& param)$/;"	f	class:caffe::CuDNNConvolutionLayer
CuDNNConvolutionLayer	include/caffe/layers/cudnn_conv_layer.hpp	/^class CuDNNConvolutionLayer : public ConvolutionLayer<Dtype> {$/;"	c	namespace:caffe
CuDNNConvolutionLayerTest	src/caffe/test/test_convolution_layer.cpp	/^  CuDNNConvolutionLayerTest()$/;"	f	class:caffe::CuDNNConvolutionLayerTest
CuDNNConvolutionLayerTest	src/caffe/test/test_convolution_layer.cpp	/^class CuDNNConvolutionLayerTest : public GPUDeviceTest<Dtype> {$/;"	c	namespace:caffe	file:
CuDNNLCNLayer	include/caffe/layers/cudnn_lcn_layer.hpp	/^  explicit CuDNNLCNLayer(const LayerParameter& param)$/;"	f	class:caffe::CuDNNLCNLayer
CuDNNLCNLayer	include/caffe/layers/cudnn_lcn_layer.hpp	/^class CuDNNLCNLayer : public LRNLayer<Dtype> {$/;"	c	namespace:caffe
CuDNNLRNLayer	include/caffe/layers/cudnn_lrn_layer.hpp	/^  explicit CuDNNLRNLayer(const LayerParameter& param)$/;"	f	class:caffe::CuDNNLRNLayer
CuDNNLRNLayer	include/caffe/layers/cudnn_lrn_layer.hpp	/^class CuDNNLRNLayer : public LRNLayer<Dtype> {$/;"	c	namespace:caffe
CuDNNLRNLayerTest	src/caffe/test/test_lrn_layer.cpp	/^  CuDNNLRNLayerTest()$/;"	f	class:caffe::CuDNNLRNLayerTest
CuDNNLRNLayerTest	src/caffe/test/test_lrn_layer.cpp	/^class CuDNNLRNLayerTest : public GPUDeviceTest<Dtype> {$/;"	c	namespace:caffe	file:
CuDNNNeuronLayerTest	src/caffe/test/test_neuron_layer.cpp	/^  CuDNNNeuronLayerTest()$/;"	f	class:caffe::CuDNNNeuronLayerTest
CuDNNNeuronLayerTest	src/caffe/test/test_neuron_layer.cpp	/^class CuDNNNeuronLayerTest : public GPUDeviceTest<Dtype> {$/;"	c	namespace:caffe	file:
CuDNNPoolingLayer	include/caffe/layers/cudnn_pooling_layer.hpp	/^  explicit CuDNNPoolingLayer(const LayerParameter& param)$/;"	f	class:caffe::CuDNNPoolingLayer
CuDNNPoolingLayer	include/caffe/layers/cudnn_pooling_layer.hpp	/^class CuDNNPoolingLayer : public PoolingLayer<Dtype> {$/;"	c	namespace:caffe
CuDNNPoolingLayerTest	src/caffe/test/test_pooling_layer.cpp	/^  CuDNNPoolingLayerTest()$/;"	f	class:caffe::CuDNNPoolingLayerTest
CuDNNPoolingLayerTest	src/caffe/test/test_pooling_layer.cpp	/^class CuDNNPoolingLayerTest : public GPUDeviceTest<Dtype> {$/;"	c	namespace:caffe	file:
CuDNNReLULayer	include/caffe/layers/cudnn_relu_layer.hpp	/^  explicit CuDNNReLULayer(const LayerParameter& param)$/;"	f	class:caffe::CuDNNReLULayer
CuDNNReLULayer	include/caffe/layers/cudnn_relu_layer.hpp	/^class CuDNNReLULayer : public ReLULayer<Dtype> {$/;"	c	namespace:caffe
CuDNNSigmoidLayer	include/caffe/layers/cudnn_sigmoid_layer.hpp	/^  explicit CuDNNSigmoidLayer(const LayerParameter& param)$/;"	f	class:caffe::CuDNNSigmoidLayer
CuDNNSigmoidLayer	include/caffe/layers/cudnn_sigmoid_layer.hpp	/^class CuDNNSigmoidLayer : public SigmoidLayer<Dtype> {$/;"	c	namespace:caffe
CuDNNSoftmaxLayer	include/caffe/layers/cudnn_softmax_layer.hpp	/^  explicit CuDNNSoftmaxLayer(const LayerParameter& param)$/;"	f	class:caffe::CuDNNSoftmaxLayer
CuDNNSoftmaxLayer	include/caffe/layers/cudnn_softmax_layer.hpp	/^class CuDNNSoftmaxLayer : public SoftmaxLayer<Dtype> {$/;"	c	namespace:caffe
CuDNNSoftmaxLayerTest	src/caffe/test/test_softmax_layer.cpp	/^  CuDNNSoftmaxLayerTest()$/;"	f	class:caffe::CuDNNSoftmaxLayerTest
CuDNNSoftmaxLayerTest	src/caffe/test/test_softmax_layer.cpp	/^class CuDNNSoftmaxLayerTest : public GPUDeviceTest<Dtype> {$/;"	c	namespace:caffe	file:
CuDNNTanHLayer	include/caffe/layers/cudnn_tanh_layer.hpp	/^  explicit CuDNNTanHLayer(const LayerParameter& param)$/;"	f	class:caffe::CuDNNTanHLayer
CuDNNTanHLayer	include/caffe/layers/cudnn_tanh_layer.hpp	/^class CuDNNTanHLayer : public TanHLayer<Dtype> {$/;"	c	namespace:caffe
Current	src/gtest/gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
Current	src/gtest/gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
Current	src/gtest/gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
Current	src/gtest/gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
Current	src/gtest/gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
Current	src/gtest/gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
Current	src/gtest/gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
Current	src/gtest/gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
Current	src/gtest/gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
Current	src/gtest/gtest.h	/^    virtual const T* Current() const { return &value_; }$/;"	f	class:testing::internal::RangeGenerator::Iterator
Current	src/gtest/gtest.h	/^    virtual const T* Current() const {$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
CurrentOsStackTraceExceptTop	src/gtest/gtest-all.cpp	/^String UnitTestImpl::CurrentOsStackTraceExceptTop(int skip_count) {$/;"	f	class:testing::internal::UnitTestImpl
CurrentStackTrace	src/gtest/gtest-all.cpp	/^String OsStackTraceGetter::CurrentStackTrace(int, int) {$/;"	f	class:testing::internal::OsStackTraceGetter
Cursor	include/caffe/util/db.hpp	/^  Cursor() { }$/;"	f	class:caffe::db::Cursor
Cursor	include/caffe/util/db.hpp	/^class Cursor {$/;"	c	namespace:caffe::db
DATA	matlab/+caffe/private/caffe_.cpp	/^enum WhichMemory { DATA, DIFF };$/;"	e	enum:WhichMemory	file:
DB	include/caffe/util/db.hpp	/^  DB() { }$/;"	f	class:caffe::db::DB
DB	include/caffe/util/db.hpp	/^class DB {$/;"	c	namespace:caffe::db
DBTest	src/caffe/test/test_db.cpp	/^  DBTest()$/;"	f	class:caffe::DBTest
DBTest	src/caffe/test/test_db.cpp	/^class DBTest : public ::testing::Test {$/;"	c	namespace:caffe	file:
DEBUG	Makefile	/^DEBUG ?= 0$/;"	m
DEBUG_BUILD_DIR	Makefile	/^	DEBUG_BUILD_DIR := .$(BUILD_DIR)_debug$/;"	m
DEFINE_AND_INSTANTIATE_GPU_UNARY_FUNC	include/caffe/util/math_functions.hpp	/^#define DEFINE_AND_INSTANTIATE_GPU_UNARY_FUNC(/;"	d
DEFINE_CAFFE_CPU_UNARY_FUNC	include/caffe/util/math_functions.hpp	/^#define DEFINE_CAFFE_CPU_UNARY_FUNC(/;"	d
DEFINE_VSL_BINARY_FUNC	include/caffe/util/mkl_alternate.hpp	/^#define DEFINE_VSL_BINARY_FUNC(/;"	d
DEFINE_VSL_UNARY_FUNC	include/caffe/util/mkl_alternate.hpp	/^#define DEFINE_VSL_UNARY_FUNC(/;"	d
DEFINE_VSL_UNARY_FUNC_WITH_PARAM	include/caffe/util/mkl_alternate.hpp	/^#define DEFINE_VSL_UNARY_FUNC_WITH_PARAM(/;"	d
DEPS	Makefile	/^DEPS := ${CXX_OBJS:.o=.d} ${CU_OBJS:.o=.d} ${TEST_CXX_OBJS:.o=.d} \\$/;"	m
DIED	src/gtest/gtest-all.cpp	/^enum DeathTestOutcome { IN_PROGRESS, DIED, LIVED, RETURNED, THREW };$/;"	e	enum:testing::internal::DeathTestOutcome	file:
DIFF	matlab/+caffe/private/caffe_.cpp	/^enum WhichMemory { DATA, DIFF };$/;"	e	enum:WhichMemory	file:
DISABLE_COPY_AND_ASSIGN	include/caffe/common.hpp	/^#define DISABLE_COPY_AND_ASSIGN(/;"	d
DISCONNECTED_COLOR	tools/extra/summarize.py	/^DISCONNECTED_COLOR = '41'$/;"	v
DISTRIBUTE_DIR	Makefile	/^DISTRIBUTE_DIR ?= distribute$/;"	m
DISTRIBUTE_SUBDIRS	Makefile	/^DISTRIBUTE_SUBDIRS := $(DISTRIBUTE_DIR)\/bin $(DISTRIBUTE_DIR)\/lib$/;"	m
DIST_ALIASES	Makefile	/^DIST_ALIASES := dist$/;"	m
DOXYGEN_COMMAND	Makefile	/^DOXYGEN_COMMAND ?= doxygen$/;"	m
DOXYGEN_CONFIG_FILE	Makefile	/^DOXYGEN_CONFIG_FILE ?= .\/.Doxyfile$/;"	m
DOXYGEN_OUTPUT_DIR	Makefile	/^DOXYGEN_OUTPUT_DIR ?= .\/doxygen$/;"	m
DOXYGEN_SOURCES	Makefile	/^DOXYGEN_SOURCES := $(shell find \\$/;"	m
DYNAMIC_NAME	Makefile	/^DYNAMIC_NAME := $(LIB_BUILD_DIR)\/$(DYNAMIC_VERSIONED_NAME_SHORT)$/;"	m
DYNAMIC_NAME_SHORT	Makefile	/^DYNAMIC_NAME_SHORT := lib$(LIBRARY_NAME).so$/;"	m
DYNAMIC_VERSIONED_NAME_SHORT	Makefile	/^DYNAMIC_VERSIONED_NAME_SHORT := $(DYNAMIC_NAME_SHORT).$(DYNAMIC_VERSION_MAJOR).$(DYNAMIC_VERSION_MINOR).$(DYNAMIC_VERSION_REVISION)$/;"	m
DYNAMIC_VERSION_MAJOR	Makefile	/^DYNAMIC_VERSION_MAJOR 		:= 1$/;"	m
DYNAMIC_VERSION_MINOR	Makefile	/^DYNAMIC_VERSION_MINOR 		:= 0$/;"	m
DYNAMIC_VERSION_REVISION	Makefile	/^DYNAMIC_VERSION_REVISION 	:= 0$/;"	m
DataLayer	include/caffe/layers/data_layer.hpp	/^class DataLayer : public BasePrefetchingDataLayer<Dtype> {$/;"	c	namespace:caffe
DataLayer	src/caffe/layers/data_layer.cpp	/^DataLayer<Dtype>::DataLayer(const LayerParameter& param)$/;"	f	class:caffe::DataLayer
DataLayerSetUp	include/caffe/layers/base_data_layer.hpp	/^  virtual void DataLayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BaseDataLayer
DataLayerSetUp	src/caffe/layers/data_layer.cpp	/^void DataLayer<Dtype>::DataLayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::DataLayer
DataLayerSetUp	src/caffe/layers/image_data_layer.cpp	/^void ImageDataLayer<Dtype>::DataLayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ImageDataLayer
DataLayerSetUp	src/caffe/layers/memory_data_layer.cpp	/^void MemoryDataLayer<Dtype>::DataLayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::MemoryDataLayer
DataLayerSetUp	src/caffe/layers/window_data_layer.cpp	/^void WindowDataLayer<Dtype>::DataLayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::WindowDataLayer
DataLayerTest	src/caffe/test/test_data_layer.cpp	/^  DataLayerTest()$/;"	f	class:caffe::DataLayerTest
DataLayerTest	src/caffe/test/test_data_layer.cpp	/^class DataLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
DataTransformTest	src/caffe/test/test_data_transformer.cpp	/^  DataTransformTest()$/;"	f	class:caffe::DataTransformTest
DataTransformTest	src/caffe/test/test_data_transformer.cpp	/^class DataTransformTest : public ::testing::Test {$/;"	c	namespace:caffe	file:
DataTransformer	include/caffe/data_transformer.hpp	/^class DataTransformer {$/;"	c	namespace:caffe
DataTransformer	src/caffe/data_transformer.cpp	/^DataTransformer<Dtype>::DataTransformer(const TransformationParameter& param,$/;"	f	class:caffe::DataTransformer
DeathTest	src/gtest/gtest-all.cpp	/^DeathTest::DeathTest() {$/;"	f	class:testing::internal::DeathTest
DeathTest	src/gtest/gtest.h	/^class GTEST_API_ DeathTest {$/;"	c	namespace:testing::internal
DeathTestAbort	src/gtest/gtest-all.cpp	/^void DeathTestAbort(const String& message) {$/;"	f	namespace:testing::internal
DeathTestFactory	src/gtest/gtest.h	/^class DeathTestFactory {$/;"	c	namespace:testing::internal
DeathTestImpl	src/gtest/gtest-all.cpp	/^  DeathTestImpl(const char* a_statement, const RE* a_regex)$/;"	f	class:testing::internal::DeathTestImpl
DeathTestImpl	src/gtest/gtest-all.cpp	/^class DeathTestImpl : public DeathTest {$/;"	c	namespace:testing::internal	file:
DeathTestOutcome	src/gtest/gtest-all.cpp	/^enum DeathTestOutcome { IN_PROGRESS, DIED, LIVED, RETURNED, THREW };$/;"	g	namespace:testing::internal	file:
DeathTestThreadWarning	src/gtest/gtest-all.cpp	/^static String DeathTestThreadWarning(size_t thread_count) {$/;"	f	namespace:testing::internal
DecodeDatum	src/caffe/util/io.cpp	/^bool DecodeDatum(Datum* datum, bool is_color) {$/;"	f	namespace:caffe
DecodeDatumNative	src/caffe/util/io.cpp	/^bool DecodeDatumNative(Datum* datum) {$/;"	f	namespace:caffe
DecodeDatumToCVMat	src/caffe/util/io.cpp	/^cv::Mat DecodeDatumToCVMat(const Datum& datum, bool is_color) {$/;"	f	namespace:caffe
DecodeDatumToCVMatNative	src/caffe/util/io.cpp	/^cv::Mat DecodeDatumToCVMatNative(const Datum& datum) {$/;"	f	namespace:caffe
DeconvolutionLayer	include/caffe/layers/deconv_layer.hpp	/^  explicit DeconvolutionLayer(const LayerParameter& param)$/;"	f	class:caffe::DeconvolutionLayer
DeconvolutionLayer	include/caffe/layers/deconv_layer.hpp	/^class DeconvolutionLayer : public BaseConvolutionLayer<Dtype> {$/;"	c	namespace:caffe
DeconvolutionLayerTest	src/caffe/test/test_deconvolution_layer.cpp	/^  DeconvolutionLayerTest()$/;"	f	class:caffe::DeconvolutionLayerTest
DeconvolutionLayerTest	src/caffe/test/test_deconvolution_layer.cpp	/^class DeconvolutionLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
DefaultDeathTestFactory	src/gtest/gtest.h	/^class DefaultDeathTestFactory : public DeathTestFactory {$/;"	c	namespace:testing::internal
DefaultGlobalTestPartResultReporter	src/gtest/gtest-all.cpp	/^DefaultGlobalTestPartResultReporter::DefaultGlobalTestPartResultReporter($/;"	f	class:testing::internal::DefaultGlobalTestPartResultReporter
DefaultGlobalTestPartResultReporter	src/gtest/gtest-all.cpp	/^class DefaultGlobalTestPartResultReporter$/;"	c	namespace:testing::internal	file:
DefaultPerThreadTestPartResultReporter	src/gtest/gtest-all.cpp	/^DefaultPerThreadTestPartResultReporter::DefaultPerThreadTestPartResultReporter($/;"	f	class:testing::internal::DefaultPerThreadTestPartResultReporter
DefaultPerThreadTestPartResultReporter	src/gtest/gtest-all.cpp	/^class DefaultPerThreadTestPartResultReporter$/;"	c	namespace:testing::internal	file:
DefaultPrintNonContainerTo	src/gtest/gtest.h	/^void DefaultPrintNonContainerTo(const T& value, ::std::ostream* os) {$/;"	f	namespace:testing_internal
DefaultPrintTo	src/gtest/gtest.h	/^void DefaultPrintTo(IsContainer \/* dummy *\/,$/;"	f	namespace:testing::internal
DefaultPrintTo	src/gtest/gtest.h	/^void DefaultPrintTo(IsNotContainer \/* dummy *\/,$/;"	f	namespace:testing::internal
Delete	src/gtest/gtest-all.cpp	/^static void Delete(T* x) {$/;"	f	namespace:testing::internal
DeleteSelf_	src/gtest/gtest.h	/^  void DeleteSelf_() { delete this; }$/;"	f	class:testing::Test
DeleteThreadLocalValue	src/gtest/gtest.h	/^extern "C" inline void DeleteThreadLocalValue(void* value_holder) {$/;"	f	namespace:std::tr1
Detector	python/caffe/__init__.py	/^from .detector import Detector$/;"	i
Detector	python/caffe/detector.py	/^class Detector(caffe.Net):$/;"	c
DeviceQuery	src/caffe/common.cpp	/^void Caffe::DeviceQuery() {$/;"	f	class:caffe::Caffe
DirectoryExists	src/gtest/gtest-all.cpp	/^bool FilePath::DirectoryExists() const {$/;"	f	class:testing::internal::FilePath
DistanceBetweenSignAndMagnitudeNumbers	src/gtest/gtest.h	/^  static Bits DistanceBetweenSignAndMagnitudeNumbers(const Bits &sam1,$/;"	f	class:testing::internal::FloatingPoint
Double	src/gtest/gtest.h	/^typedef FloatingPoint<double> Double;$/;"	t	namespace:testing::internal
DoubleLE	src/gtest/gtest-all.cpp	/^AssertionResult DoubleLE(const char* expr1, const char* expr2,$/;"	f	namespace:testing
DoubleMapSize	src/caffe/util/db_lmdb.cpp	/^void LMDBTransaction::DoubleMapSize() {$/;"	f	class:caffe::db::LMDBTransaction
DoubleNearPredFormat	src/gtest/gtest-all.cpp	/^AssertionResult DoubleNearPredFormat(const char* expr1,$/;"	f	namespace:testing::internal
DownCast_	src/gtest/gtest.h	/^inline To DownCast_(From* f) {  \/\/ so we only accept pointers$/;"	f	namespace:std::tr1
DropoutLayer	include/caffe/layers/dropout_layer.hpp	/^  explicit DropoutLayer(const LayerParameter& param)$/;"	f	class:caffe::DropoutLayer
DropoutLayer	include/caffe/layers/dropout_layer.hpp	/^class DropoutLayer : public NeuronLayer<Dtype> {$/;"	c	namespace:caffe
Dtype	include/caffe/test/test_caffe_main.hpp	/^  typedef TypeParam Dtype;$/;"	t	struct:caffe::CPUDevice
Dtype	include/caffe/test/test_caffe_main.hpp	/^  typedef TypeParam Dtype;$/;"	t	struct:caffe::GPUDevice
Dtype	include/caffe/test/test_caffe_main.hpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::MultiDeviceTest
Dtype	python/caffe/_caffe.cpp	/^typedef float Dtype;$/;"	t	namespace:caffe	file:
Dtype	src/caffe/test/test_batch_norm_layer.cpp	/^    typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::BatchNormLayerTest	file:
Dtype	src/caffe/test/test_batch_reindex_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::BatchReindexLayerTest	file:
Dtype	src/caffe/test/test_bias_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::BiasLayerTest	file:
Dtype	src/caffe/test/test_blob.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::BlobMathTest	file:
Dtype	src/caffe/test/test_concat_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::ConcatLayerTest	file:
Dtype	src/caffe/test/test_contrastive_loss_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::ContrastiveLossLayerTest	file:
Dtype	src/caffe/test/test_convolution_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::ConvolutionLayerTest	file:
Dtype	src/caffe/test/test_crop_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::CropLayerTest	file:
Dtype	src/caffe/test/test_data_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::DataLayerTest	file:
Dtype	src/caffe/test/test_deconvolution_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::DeconvolutionLayerTest	file:
Dtype	src/caffe/test/test_eltwise_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::EltwiseLayerTest	file:
Dtype	src/caffe/test/test_embed_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::EmbedLayerTest	file:
Dtype	src/caffe/test/test_euclidean_loss_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::EuclideanLossLayerTest	file:
Dtype	src/caffe/test/test_filter_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::FilterLayerTest	file:
Dtype	src/caffe/test/test_flatten_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::FlattenLayerTest	file:
Dtype	src/caffe/test/test_gradient_based_solver.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::AdaDeltaSolverTest	file:
Dtype	src/caffe/test/test_gradient_based_solver.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::AdaGradSolverTest	file:
Dtype	src/caffe/test/test_gradient_based_solver.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::AdamSolverTest	file:
Dtype	src/caffe/test/test_gradient_based_solver.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::GradientBasedSolverTest	file:
Dtype	src/caffe/test/test_gradient_based_solver.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::NesterovSolverTest	file:
Dtype	src/caffe/test/test_gradient_based_solver.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::RMSPropSolverTest	file:
Dtype	src/caffe/test/test_gradient_based_solver.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::SGDSolverTest	file:
Dtype	src/caffe/test/test_hdf5_output_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::HDF5OutputLayerTest	file:
Dtype	src/caffe/test/test_hdf5data_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::HDF5DataLayerTest	file:
Dtype	src/caffe/test/test_hinge_loss_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::HingeLossLayerTest	file:
Dtype	src/caffe/test/test_im2col_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::Im2colLayerTest	file:
Dtype	src/caffe/test/test_image_data_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::ImageDataLayerTest	file:
Dtype	src/caffe/test/test_infogain_loss_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::InfogainLossLayerTest	file:
Dtype	src/caffe/test/test_inner_product_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::InnerProductLayerTest	file:
Dtype	src/caffe/test/test_lrn_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::LRNLayerTest	file:
Dtype	src/caffe/test/test_lstm_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::LSTMLayerTest	file:
Dtype	src/caffe/test/test_math_functions.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::MathFunctionsTest	file:
Dtype	src/caffe/test/test_maxpool_dropout_layers.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::MaxPoolingDropoutTest	file:
Dtype	src/caffe/test/test_memory_data_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::MemoryDataLayerTest	file:
Dtype	src/caffe/test/test_mvn_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::MVNLayerTest	file:
Dtype	src/caffe/test/test_net.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::NetTest	file:
Dtype	src/caffe/test/test_neuron_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::NeuronLayerTest	file:
Dtype	src/caffe/test/test_pooling_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::PoolingLayerTest	file:
Dtype	src/caffe/test/test_power_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::PowerLayerTest	file:
Dtype	src/caffe/test/test_reduction_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::ReductionLayerTest	file:
Dtype	src/caffe/test/test_reshape_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::ReshapeLayerTest	file:
Dtype	src/caffe/test/test_rnn_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::RNNLayerTest	file:
Dtype	src/caffe/test/test_scale_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::ScaleLayerTest	file:
Dtype	src/caffe/test/test_sigmoid_cross_entropy_loss_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::SigmoidCrossEntropyLossLayerTest	file:
Dtype	src/caffe/test/test_slice_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::SliceLayerTest	file:
Dtype	src/caffe/test/test_softmax_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::SoftmaxLayerTest	file:
Dtype	src/caffe/test/test_softmax_with_loss_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::SoftmaxWithLossLayerTest	file:
Dtype	src/caffe/test/test_solver.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::SolverTest	file:
Dtype	src/caffe/test/test_split_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::SplitLayerTest	file:
Dtype	src/caffe/test/test_spp_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::SPPLayerTest	file:
Dtype	src/caffe/test/test_stochastic_pooling.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::StochasticPoolingLayerTest	file:
Dtype	src/caffe/test/test_tanh_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::TanHLayerTest	file:
Dtype	src/caffe/test/test_threshold_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::ThresholdLayerTest	file:
Dtype	src/caffe/test/test_tile_layer.cpp	/^  typedef typename TypeParam::Dtype Dtype;$/;"	t	class:caffe::TileLayerTest	file:
DummyDataLayer	include/caffe/layers/dummy_data_layer.hpp	/^  explicit DummyDataLayer(const LayerParameter& param)$/;"	f	class:caffe::DummyDataLayer
DummyDataLayer	include/caffe/layers/dummy_data_layer.hpp	/^class DummyDataLayer : public Layer<Dtype> {$/;"	c	namespace:caffe
DummyDataLayerTest	src/caffe/test/test_dummy_data_layer.cpp	/^  DummyDataLayerTest()$/;"	f	class:caffe::DummyDataLayerTest
DummyDataLayerTest	src/caffe/test/test_dummy_data_layer.cpp	/^class DummyDataLayerTest : public CPUDeviceTest<Dtype> {$/;"	c	namespace:caffe	file:
ELULayer	include/caffe/layers/elu_layer.hpp	/^  explicit ELULayer(const LayerParameter& param)$/;"	f	class:caffe::ELULayer
ELULayer	include/caffe/layers/elu_layer.hpp	/^class ELULayer : public NeuronLayer<Dtype> {$/;"	c	namespace:caffe
EMPTY_LINT_REPORT	Makefile	/^EMPTY_LINT_REPORT := $(BUILD_DIR)\/.$(LINT_EXT)$/;"	m
EMPTY_WARN_REPORT	Makefile	/^EMPTY_WARN_REPORT := $(BUILD_DIR)\/.$(WARNS_EXT)$/;"	m
EVERYTHING_TARGETS	Makefile	/^EVERYTHING_TARGETS := all py$(PROJECT) test warn lint$/;"	m
EXAMPLE_BINS	Makefile	/^EXAMPLE_BINS := ${EXAMPLE_OBJS:.o=.bin}$/;"	m
EXAMPLE_OBJS	Makefile	/^EXAMPLE_OBJS := $(addprefix $(BUILD_DIR)\/, ${EXAMPLE_SRCS:.cpp=.o})$/;"	m
EXAMPLE_SRCS	Makefile	/^EXAMPLE_SRCS := $(shell find examples -name "*.cpp")$/;"	m
EXAMPLE_WARNS	Makefile	/^EXAMPLE_WARNS := $(addprefix $(BUILD_DIR)\/, ${EXAMPLE_SRCS:.cpp=.o.$(WARNS_EXT)})$/;"	m
EXECUTE_TEST	src/gtest/gtest.h	/^  enum TestRole { OVERSEE_TEST, EXECUTE_TEST };$/;"	e	enum:testing::internal::DeathTest::TestRole
EXPECT_ANY_THROW	src/gtest/gtest.h	/^#define EXPECT_ANY_THROW(/;"	d
EXPECT_DEATH	src/gtest/gtest.h	/^# define EXPECT_DEATH(/;"	d
EXPECT_DEATH_IF_SUPPORTED	src/gtest/gtest.h	/^# define EXPECT_DEATH_IF_SUPPORTED(/;"	d
EXPECT_DEBUG_DEATH	src/gtest/gtest.h	/^#  define EXPECT_DEBUG_DEATH(/;"	d
EXPECT_DOUBLE_EQ	src/gtest/gtest.h	/^#define EXPECT_DOUBLE_EQ(/;"	d
EXPECT_EQ	src/gtest/gtest.h	/^#define EXPECT_EQ(/;"	d
EXPECT_EXIT	src/gtest/gtest.h	/^# define EXPECT_EXIT(/;"	d
EXPECT_FALSE	src/gtest/gtest.h	/^#define EXPECT_FALSE(/;"	d
EXPECT_FATAL_FAILURE	src/gtest/gtest-all.cpp	/^#define EXPECT_FATAL_FAILURE(/;"	d	file:
EXPECT_FATAL_FAILURE_ON_ALL_THREADS	src/gtest/gtest-all.cpp	/^#define EXPECT_FATAL_FAILURE_ON_ALL_THREADS(/;"	d	file:
EXPECT_FLOAT_EQ	src/gtest/gtest.h	/^#define EXPECT_FLOAT_EQ(/;"	d
EXPECT_GE	src/gtest/gtest.h	/^#define EXPECT_GE(/;"	d
EXPECT_GT	src/gtest/gtest.h	/^#define EXPECT_GT(/;"	d
EXPECT_HRESULT_FAILED	src/gtest/gtest.h	/^# define EXPECT_HRESULT_FAILED(/;"	d
EXPECT_HRESULT_SUCCEEDED	src/gtest/gtest.h	/^# define EXPECT_HRESULT_SUCCEEDED(/;"	d
EXPECT_LE	src/gtest/gtest.h	/^#define EXPECT_LE(/;"	d
EXPECT_LT	src/gtest/gtest.h	/^#define EXPECT_LT(/;"	d
EXPECT_NE	src/gtest/gtest.h	/^#define EXPECT_NE(/;"	d
EXPECT_NEAR	src/gtest/gtest.h	/^#define EXPECT_NEAR(/;"	d
EXPECT_NONFATAL_FAILURE	src/gtest/gtest-all.cpp	/^#define EXPECT_NONFATAL_FAILURE(/;"	d	file:
EXPECT_NONFATAL_FAILURE_ON_ALL_THREADS	src/gtest/gtest-all.cpp	/^#define EXPECT_NONFATAL_FAILURE_ON_ALL_THREADS(/;"	d	file:
EXPECT_NO_FATAL_FAILURE	src/gtest/gtest.h	/^#define EXPECT_NO_FATAL_FAILURE(/;"	d
EXPECT_NO_THROW	src/gtest/gtest.h	/^#define EXPECT_NO_THROW(/;"	d
EXPECT_PRED1	src/gtest/gtest.h	/^#define EXPECT_PRED1(/;"	d
EXPECT_PRED2	src/gtest/gtest.h	/^#define EXPECT_PRED2(/;"	d
EXPECT_PRED3	src/gtest/gtest.h	/^#define EXPECT_PRED3(/;"	d
EXPECT_PRED4	src/gtest/gtest.h	/^#define EXPECT_PRED4(/;"	d
EXPECT_PRED5	src/gtest/gtest.h	/^#define EXPECT_PRED5(/;"	d
EXPECT_PRED_FORMAT1	src/gtest/gtest.h	/^#define EXPECT_PRED_FORMAT1(/;"	d
EXPECT_PRED_FORMAT2	src/gtest/gtest.h	/^#define EXPECT_PRED_FORMAT2(/;"	d
EXPECT_PRED_FORMAT3	src/gtest/gtest.h	/^#define EXPECT_PRED_FORMAT3(/;"	d
EXPECT_PRED_FORMAT4	src/gtest/gtest.h	/^#define EXPECT_PRED_FORMAT4(/;"	d
EXPECT_PRED_FORMAT5	src/gtest/gtest.h	/^#define EXPECT_PRED_FORMAT5(/;"	d
EXPECT_STRCASEEQ	src/gtest/gtest.h	/^#define EXPECT_STRCASEEQ(/;"	d
EXPECT_STRCASENE	src/gtest/gtest.h	/^#define EXPECT_STRCASENE(/;"	d
EXPECT_STREQ	src/gtest/gtest.h	/^#define EXPECT_STREQ(/;"	d
EXPECT_STRNE	src/gtest/gtest.h	/^#define EXPECT_STRNE(/;"	d
EXPECT_THROW	src/gtest/gtest.h	/^#define EXPECT_THROW(/;"	d
EXPECT_TRUE	src/gtest/gtest.h	/^#define EXPECT_TRUE(/;"	d
EltwiseLayer	include/caffe/layers/eltwise_layer.hpp	/^  explicit EltwiseLayer(const LayerParameter& param)$/;"	f	class:caffe::EltwiseLayer
EltwiseLayer	include/caffe/layers/eltwise_layer.hpp	/^class EltwiseLayer : public Layer<Dtype> {$/;"	c	namespace:caffe
EltwiseLayerTest	src/caffe/test/test_eltwise_layer.cpp	/^  EltwiseLayerTest()$/;"	f	class:caffe::EltwiseLayerTest
EltwiseLayerTest	src/caffe/test/test_eltwise_layer.cpp	/^class EltwiseLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
EmbedLayer	include/caffe/layers/embed_layer.hpp	/^  explicit EmbedLayer(const LayerParameter& param)$/;"	f	class:caffe::EmbedLayer
EmbedLayer	include/caffe/layers/embed_layer.hpp	/^class EmbedLayer : public Layer<Dtype> {$/;"	c	namespace:caffe
EmbedLayerTest	src/caffe/test/test_embed_layer.cpp	/^  EmbedLayerTest()$/;"	f	class:caffe::EmbedLayerTest
EmbedLayerTest	src/caffe/test/test_embed_layer.cpp	/^class EmbedLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
EmptyTestEventListener	src/gtest/gtest.h	/^class EmptyTestEventListener : public TestEventListener {$/;"	c	namespace:testing
EnableIf	src/gtest/gtest.h	/^template<> struct EnableIf<true> { typedef void type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
End	scripts/cpp_lint.py	/^  def End(self):$/;"	m	class:_FunctionState
End	src/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator10
End	src/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator2
End	src/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator3
End	src/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator4
End	src/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator5
End	src/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator6
End	src/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator7
End	src/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator8
End	src/gtest/gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator9
End	src/gtest/gtest.h	/^  virtual ParamIteratorInterface<T>* End() const {$/;"	f	class:testing::internal::RangeGenerator
End	src/gtest/gtest.h	/^  virtual ParamIteratorInterface<T>* End() const {$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator
EndsWith	src/gtest/gtest-all.cpp	/^bool String::EndsWith(const char* suffix) const {$/;"	f	class:testing::internal::String
EndsWithCaseInsensitive	src/gtest/gtest-all.cpp	/^bool String::EndsWithCaseInsensitive(const char* suffix) const {$/;"	f	class:testing::internal::String
Enum	include/caffe/solver.hpp	/^    enum Enum {$/;"	g	namespace:caffe::SolverAction
Environment	src/gtest/gtest.h	/^class Environment {$/;"	c	namespace:testing
EqFailure	src/gtest/gtest-all.cpp	/^AssertionResult EqFailure(const char* expected_expression,$/;"	f	namespace:testing::internal
EqHelper	src/gtest/gtest.h	/^class EqHelper {$/;"	c	namespace:testing::internal
EqHelper	src/gtest/gtest.h	/^class EqHelper<true> {$/;"	c	namespace:testing::internal
EqualNumBottomTopBlobs	include/caffe/layer.hpp	/^  virtual inline bool EqualNumBottomTopBlobs() const { return false; }$/;"	f	class:caffe::Layer
EqualNumBottomTopBlobs	include/caffe/layers/base_conv_layer.hpp	/^  virtual inline bool EqualNumBottomTopBlobs() const { return true; }$/;"	f	class:caffe::BaseConvolutionLayer
Equals	src/gtest/gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
Equals	src/gtest/gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
Equals	src/gtest/gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
Equals	src/gtest/gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
Equals	src/gtest/gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
Equals	src/gtest/gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
Equals	src/gtest/gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
Equals	src/gtest/gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
Equals	src/gtest/gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
Equals	src/gtest/gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<T>& other) const {$/;"	f	class:testing::internal::RangeGenerator::Iterator
Equals	src/gtest/gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<T>& other) const {$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
Error	scripts/cpp_lint.py	/^def Error(filename, linenum, category, confidence, message):$/;"	f
EscapeXml	src/gtest/gtest-all.cpp	/^String XmlUnitTestResultPrinter::EscapeXml(const char* str, bool is_attribute) {$/;"	f	class:testing::internal::XmlUnitTestResultPrinter
EscapeXmlAttribute	src/gtest/gtest-all.cpp	/^  static String EscapeXmlAttribute(const char* str) {$/;"	f	class:testing::internal::XmlUnitTestResultPrinter	file:
EscapeXmlText	src/gtest/gtest-all.cpp	/^  static String EscapeXmlText(const char* str) { return EscapeXml(str, false); }$/;"	f	class:testing::internal::XmlUnitTestResultPrinter	file:
EuclideanLossLayer	examples/pycaffe/layers/pyloss.py	/^class EuclideanLossLayer(caffe.Layer):$/;"	c
EuclideanLossLayer	include/caffe/layers/euclidean_loss_layer.hpp	/^  explicit EuclideanLossLayer(const LayerParameter& param)$/;"	f	class:caffe::EuclideanLossLayer
EuclideanLossLayer	include/caffe/layers/euclidean_loss_layer.hpp	/^class EuclideanLossLayer : public LossLayer<Dtype> {$/;"	c	namespace:caffe
EuclideanLossLayerTest	src/caffe/test/test_euclidean_loss_layer.cpp	/^  EuclideanLossLayerTest()$/;"	f	class:caffe::EuclideanLossLayerTest
EuclideanLossLayerTest	src/caffe/test/test_euclidean_loss_layer.cpp	/^class EuclideanLossLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
EventForwardingEnabled	src/gtest/gtest-all.cpp	/^bool TestEventListeners::EventForwardingEnabled() const {$/;"	f	class:testing::TestEventListeners
ExactNumBottomBlobs	include/caffe/layer.hpp	/^  virtual inline int ExactNumBottomBlobs() const { return -1; }$/;"	f	class:caffe::Layer
ExactNumBottomBlobs	include/caffe/layers/absval_layer.hpp	/^  virtual inline int ExactNumBottomBlobs() const { return 1; }$/;"	f	class:caffe::AbsValLayer
ExactNumBottomBlobs	include/caffe/layers/accuracy_layer.hpp	/^  virtual inline int ExactNumBottomBlobs() const { return 2; }$/;"	f	class:caffe::AccuracyLayer
ExactNumBottomBlobs	include/caffe/layers/argmax_layer.hpp	/^  virtual inline int ExactNumBottomBlobs() const { return 1; }$/;"	f	class:caffe::ArgMaxLayer
ExactNumBottomBlobs	include/caffe/layers/batch_norm_layer.hpp	/^  virtual inline int ExactNumBottomBlobs() const { return 1; }$/;"	f	class:caffe::BatchNormLayer
ExactNumBottomBlobs	include/caffe/layers/batch_reindex_layer.hpp	/^  virtual inline int ExactNumBottomBlobs() const { return 2; }$/;"	f	class:caffe::BatchReindexLayer
ExactNumBottomBlobs	include/caffe/layers/contrastive_loss_layer.hpp	/^  virtual inline int ExactNumBottomBlobs() const { return 3; }$/;"	f	class:caffe::ContrastiveLossLayer
ExactNumBottomBlobs	include/caffe/layers/crop_layer.hpp	/^  virtual inline int ExactNumBottomBlobs() const { return 2; }$/;"	f	class:caffe::CropLayer
ExactNumBottomBlobs	include/caffe/layers/data_layer.hpp	/^  virtual inline int ExactNumBottomBlobs() const { return 0; }$/;"	f	class:caffe::DataLayer
ExactNumBottomBlobs	include/caffe/layers/dummy_data_layer.hpp	/^  virtual inline int ExactNumBottomBlobs() const { return 0; }$/;"	f	class:caffe::DummyDataLayer
ExactNumBottomBlobs	include/caffe/layers/embed_layer.hpp	/^  virtual inline int ExactNumBottomBlobs() const { return 1; }$/;"	f	class:caffe::EmbedLayer
ExactNumBottomBlobs	include/caffe/layers/flatten_layer.hpp	/^  virtual inline int ExactNumBottomBlobs() const { return 1; }$/;"	f	class:caffe::FlattenLayer
ExactNumBottomBlobs	include/caffe/layers/hdf5_data_layer.hpp	/^  virtual inline int ExactNumBottomBlobs() const { return 0; }$/;"	f	class:caffe::HDF5DataLayer
ExactNumBottomBlobs	include/caffe/layers/hdf5_output_layer.hpp	/^  virtual inline int ExactNumBottomBlobs() const { return 2; }$/;"	f	class:caffe::HDF5OutputLayer
ExactNumBottomBlobs	include/caffe/layers/im2col_layer.hpp	/^  virtual inline int ExactNumBottomBlobs() const { return 1; }$/;"	f	class:caffe::Im2colLayer
ExactNumBottomBlobs	include/caffe/layers/image_data_layer.hpp	/^  virtual inline int ExactNumBottomBlobs() const { return 0; }$/;"	f	class:caffe::ImageDataLayer
ExactNumBottomBlobs	include/caffe/layers/infogain_loss_layer.hpp	/^  virtual inline int ExactNumBottomBlobs() const { return -1; }$/;"	f	class:caffe::InfogainLossLayer
ExactNumBottomBlobs	include/caffe/layers/inner_product_layer.hpp	/^  virtual inline int ExactNumBottomBlobs() const { return 1; }$/;"	f	class:caffe::InnerProductLayer
ExactNumBottomBlobs	include/caffe/layers/input_layer.hpp	/^  virtual inline int ExactNumBottomBlobs() const { return 0; }$/;"	f	class:caffe::InputLayer
ExactNumBottomBlobs	include/caffe/layers/loss_layer.hpp	/^  virtual inline int ExactNumBottomBlobs() const { return 2; }$/;"	f	class:caffe::LossLayer
ExactNumBottomBlobs	include/caffe/layers/lrn_layer.hpp	/^  virtual inline int ExactNumBottomBlobs() const { return 1; }$/;"	f	class:caffe::LRNLayer
ExactNumBottomBlobs	include/caffe/layers/lstm_layer.hpp	/^  virtual inline int ExactNumBottomBlobs() const { return 3; }$/;"	f	class:caffe::LSTMUnitLayer
ExactNumBottomBlobs	include/caffe/layers/memory_data_layer.hpp	/^  virtual inline int ExactNumBottomBlobs() const { return 0; }$/;"	f	class:caffe::MemoryDataLayer
ExactNumBottomBlobs	include/caffe/layers/mvn_layer.hpp	/^  virtual inline int ExactNumBottomBlobs() const { return 1; }$/;"	f	class:caffe::MVNLayer
ExactNumBottomBlobs	include/caffe/layers/neuron_layer.hpp	/^  virtual inline int ExactNumBottomBlobs() const { return 1; }$/;"	f	class:caffe::NeuronLayer
ExactNumBottomBlobs	include/caffe/layers/parameter_layer.hpp	/^  virtual inline int ExactNumBottomBlobs() const { return 0; }$/;"	f	class:caffe::ParameterLayer
ExactNumBottomBlobs	include/caffe/layers/pooling_layer.hpp	/^  virtual inline int ExactNumBottomBlobs() const { return 1; }$/;"	f	class:caffe::PoolingLayer
ExactNumBottomBlobs	include/caffe/layers/reduction_layer.hpp	/^  virtual inline int ExactNumBottomBlobs() const { return 1; }$/;"	f	class:caffe::ReductionLayer
ExactNumBottomBlobs	include/caffe/layers/reshape_layer.hpp	/^  virtual inline int ExactNumBottomBlobs() const { return 1; }$/;"	f	class:caffe::ReshapeLayer
ExactNumBottomBlobs	include/caffe/layers/slice_layer.hpp	/^  virtual inline int ExactNumBottomBlobs() const { return 1; }$/;"	f	class:caffe::SliceLayer
ExactNumBottomBlobs	include/caffe/layers/softmax_layer.hpp	/^  virtual inline int ExactNumBottomBlobs() const { return 1; }$/;"	f	class:caffe::SoftmaxLayer
ExactNumBottomBlobs	include/caffe/layers/split_layer.hpp	/^  virtual inline int ExactNumBottomBlobs() const { return 1; }$/;"	f	class:caffe::SplitLayer
ExactNumBottomBlobs	include/caffe/layers/spp_layer.hpp	/^  virtual inline int ExactNumBottomBlobs() const { return 1; }$/;"	f	class:caffe::SPPLayer
ExactNumBottomBlobs	include/caffe/layers/tile_layer.hpp	/^  virtual inline int ExactNumBottomBlobs() const { return 1; }$/;"	f	class:caffe::TileLayer
ExactNumBottomBlobs	include/caffe/layers/window_data_layer.hpp	/^  virtual inline int ExactNumBottomBlobs() const { return 0; }$/;"	f	class:caffe::WindowDataLayer
ExactNumTopBlobs	include/caffe/layer.hpp	/^  virtual inline int ExactNumTopBlobs() const { return -1; }$/;"	f	class:caffe::Layer
ExactNumTopBlobs	include/caffe/layers/absval_layer.hpp	/^  virtual inline int ExactNumTopBlobs() const { return 1; }$/;"	f	class:caffe::AbsValLayer
ExactNumTopBlobs	include/caffe/layers/argmax_layer.hpp	/^  virtual inline int ExactNumTopBlobs() const { return 1; }$/;"	f	class:caffe::ArgMaxLayer
ExactNumTopBlobs	include/caffe/layers/batch_norm_layer.hpp	/^  virtual inline int ExactNumTopBlobs() const { return 1; }$/;"	f	class:caffe::BatchNormLayer
ExactNumTopBlobs	include/caffe/layers/batch_reindex_layer.hpp	/^  virtual inline int ExactNumTopBlobs() const { return 1; }$/;"	f	class:caffe::BatchReindexLayer
ExactNumTopBlobs	include/caffe/layers/bias_layer.hpp	/^  virtual inline int ExactNumTopBlobs() const { return 1; }$/;"	f	class:caffe::BiasLayer
ExactNumTopBlobs	include/caffe/layers/concat_layer.hpp	/^  virtual inline int ExactNumTopBlobs() const { return 1; }$/;"	f	class:caffe::ConcatLayer
ExactNumTopBlobs	include/caffe/layers/crop_layer.hpp	/^  virtual inline int ExactNumTopBlobs() const { return 1; }$/;"	f	class:caffe::CropLayer
ExactNumTopBlobs	include/caffe/layers/cudnn_pooling_layer.hpp	/^  virtual inline int ExactNumTopBlobs() const { return 1; }$/;"	f	class:caffe::CuDNNPoolingLayer
ExactNumTopBlobs	include/caffe/layers/eltwise_layer.hpp	/^  virtual inline int ExactNumTopBlobs() const { return 1; }$/;"	f	class:caffe::EltwiseLayer
ExactNumTopBlobs	include/caffe/layers/embed_layer.hpp	/^  virtual inline int ExactNumTopBlobs() const { return 1; }$/;"	f	class:caffe::EmbedLayer
ExactNumTopBlobs	include/caffe/layers/flatten_layer.hpp	/^  virtual inline int ExactNumTopBlobs() const { return 1; }$/;"	f	class:caffe::FlattenLayer
ExactNumTopBlobs	include/caffe/layers/hdf5_output_layer.hpp	/^  virtual inline int ExactNumTopBlobs() const { return 0; }$/;"	f	class:caffe::HDF5OutputLayer
ExactNumTopBlobs	include/caffe/layers/im2col_layer.hpp	/^  virtual inline int ExactNumTopBlobs() const { return 1; }$/;"	f	class:caffe::Im2colLayer
ExactNumTopBlobs	include/caffe/layers/image_data_layer.hpp	/^  virtual inline int ExactNumTopBlobs() const { return 2; }$/;"	f	class:caffe::ImageDataLayer
ExactNumTopBlobs	include/caffe/layers/infogain_loss_layer.hpp	/^  virtual inline int ExactNumTopBlobs() const { return -1; }$/;"	f	class:caffe::InfogainLossLayer
ExactNumTopBlobs	include/caffe/layers/inner_product_layer.hpp	/^  virtual inline int ExactNumTopBlobs() const { return 1; }$/;"	f	class:caffe::InnerProductLayer
ExactNumTopBlobs	include/caffe/layers/loss_layer.hpp	/^  virtual inline int ExactNumTopBlobs() const { return 1; }$/;"	f	class:caffe::LossLayer
ExactNumTopBlobs	include/caffe/layers/lrn_layer.hpp	/^  virtual inline int ExactNumTopBlobs() const { return 1; }$/;"	f	class:caffe::LRNLayer
ExactNumTopBlobs	include/caffe/layers/lstm_layer.hpp	/^  virtual inline int ExactNumTopBlobs() const { return 2; }$/;"	f	class:caffe::LSTMUnitLayer
ExactNumTopBlobs	include/caffe/layers/memory_data_layer.hpp	/^  virtual inline int ExactNumTopBlobs() const { return 2; }$/;"	f	class:caffe::MemoryDataLayer
ExactNumTopBlobs	include/caffe/layers/mvn_layer.hpp	/^  virtual inline int ExactNumTopBlobs() const { return 1; }$/;"	f	class:caffe::MVNLayer
ExactNumTopBlobs	include/caffe/layers/neuron_layer.hpp	/^  virtual inline int ExactNumTopBlobs() const { return 1; }$/;"	f	class:caffe::NeuronLayer
ExactNumTopBlobs	include/caffe/layers/parameter_layer.hpp	/^  virtual inline int ExactNumTopBlobs() const { return 1; }$/;"	f	class:caffe::ParameterLayer
ExactNumTopBlobs	include/caffe/layers/recurrent_layer.hpp	/^  virtual inline int ExactNumTopBlobs() const {$/;"	f	class:caffe::RecurrentLayer
ExactNumTopBlobs	include/caffe/layers/reduction_layer.hpp	/^  virtual inline int ExactNumTopBlobs() const { return 1; }$/;"	f	class:caffe::ReductionLayer
ExactNumTopBlobs	include/caffe/layers/reshape_layer.hpp	/^  virtual inline int ExactNumTopBlobs() const { return 1; }$/;"	f	class:caffe::ReshapeLayer
ExactNumTopBlobs	include/caffe/layers/scale_layer.hpp	/^  virtual inline int ExactNumTopBlobs() const { return 1; }$/;"	f	class:caffe::ScaleLayer
ExactNumTopBlobs	include/caffe/layers/silence_layer.hpp	/^  virtual inline int ExactNumTopBlobs() const { return 0; }$/;"	f	class:caffe::SilenceLayer
ExactNumTopBlobs	include/caffe/layers/softmax_layer.hpp	/^  virtual inline int ExactNumTopBlobs() const { return 1; }$/;"	f	class:caffe::SoftmaxLayer
ExactNumTopBlobs	include/caffe/layers/softmax_loss_layer.hpp	/^  virtual inline int ExactNumTopBlobs() const { return -1; }$/;"	f	class:caffe::SoftmaxWithLossLayer
ExactNumTopBlobs	include/caffe/layers/spp_layer.hpp	/^  virtual inline int ExactNumTopBlobs() const { return 1; }$/;"	f	class:caffe::SPPLayer
ExactNumTopBlobs	include/caffe/layers/tile_layer.hpp	/^  virtual inline int ExactNumTopBlobs() const { return 1; }$/;"	f	class:caffe::TileLayer
ExactNumTopBlobs	include/caffe/layers/window_data_layer.hpp	/^  virtual inline int ExactNumTopBlobs() const { return 2; }$/;"	f	class:caffe::WindowDataLayer
ExceptionLayer	python/caffe/test/test_python_layer.py	/^class ExceptionLayer(caffe.Layer):$/;"	c
ExecDeathTest	src/gtest/gtest-all.cpp	/^  ExecDeathTest(const char* a_statement, const RE* a_regex,$/;"	f	class:testing::internal::ExecDeathTest
ExecDeathTest	src/gtest/gtest-all.cpp	/^class ExecDeathTest : public ForkingDeathTest {$/;"	c	namespace:testing::internal	file:
ExecDeathTestArgs	src/gtest/gtest-all.cpp	/^struct ExecDeathTestArgs {$/;"	s	namespace:testing::internal	file:
ExecDeathTestChildMain	src/gtest/gtest-all.cpp	/^static int ExecDeathTestChildMain(void* child_arg) {$/;"	f	namespace:testing::internal
ExecDeathTestFork	src/gtest/gtest-all.cpp	/^static pid_t ExecDeathTestFork(char* const* argv, int close_fd) {$/;"	f	namespace:testing::internal
ExitSummary	src/gtest/gtest-all.cpp	/^static String ExitSummary(int exit_code) {$/;"	f	namespace:testing::internal
ExitedUnsuccessfully	src/gtest/gtest-all.cpp	/^bool ExitedUnsuccessfully(int exit_status) {$/;"	f	namespace:testing::internal
ExitedWithCode	src/gtest/gtest-all.cpp	/^ExitedWithCode::ExitedWithCode(int exit_code) : exit_code_(exit_code) {$/;"	f	class:testing::ExitedWithCode
ExitedWithCode	src/gtest/gtest.h	/^class GTEST_API_ ExitedWithCode {$/;"	c	namespace:testing
ExpLayer	include/caffe/layers/exp_layer.hpp	/^  explicit ExpLayer(const LayerParameter& param)$/;"	f	class:caffe::ExpLayer
ExpLayer	include/caffe/layers/exp_layer.hpp	/^class ExpLayer : public NeuronLayer<Dtype> {$/;"	c	namespace:caffe
Extension	scripts/cpp_lint.py	/^  def Extension(self):$/;"	m	class:FileInfo
ExtractSummary	src/gtest/gtest-all.cpp	/^internal::String TestPartResult::ExtractSummary(const char* message) {$/;"	f	class:testing::TestPartResult
FAIL	src/gtest/gtest.h	/^# define FAIL(/;"	d
FClose	src/gtest/gtest.h	/^inline int FClose(FILE* fp) { return fclose(fp); }$/;"	f	namespace:std::tr1::posix
FDOpen	src/gtest/gtest.h	/^inline FILE* FDOpen(int fd, const char* mode) { return fdopen(fd, mode); }$/;"	f	namespace:std::tr1::posix
FLAGS	tools/extra/resize_and_crop_images.py	/^FLAGS = gflags.FLAGS$/;"	v
FOpen	src/gtest/gtest.h	/^inline FILE* FOpen(const char* path, const char* mode) {$/;"	f	namespace:std::tr1::posix
FRIEND_TEST	src/gtest/gtest.h	/^#define FRIEND_TEST(/;"	d
FReopen	src/gtest/gtest.h	/^inline FILE *FReopen(const char* path, const char* mode, FILE* stream) {$/;"	f	namespace:std::tr1::posix
FailFromInternalError	src/gtest/gtest-all.cpp	/^static void FailFromInternalError(int fd) {$/;"	f	namespace:testing::internal
Failed	src/gtest/gtest-all.cpp	/^  bool Failed() const {$/;"	f	class:testing::internal::UnitTestImpl
Failed	src/gtest/gtest-all.cpp	/^bool TestResult::Failed() const {$/;"	f	class:testing::TestResult
Failed	src/gtest/gtest-all.cpp	/^bool UnitTest::Failed() const { return impl()->Failed(); }$/;"	f	class:testing::UnitTest
Failed	src/gtest/gtest.h	/^  bool Failed() const { return failed_test_count() > 0; }$/;"	f	class:testing::TestCase
FileInfo	scripts/cpp_lint.py	/^class FileInfo:$/;"	c
FileNo	src/gtest/gtest.h	/^inline int FileNo(FILE* file) { return _fileno(file); }$/;"	f	namespace:std::tr1::posix
FileNo	src/gtest/gtest.h	/^inline int FileNo(FILE* file) { return reinterpret_cast<int>(_fileno(file)); }$/;"	f	namespace:std::tr1::posix
FileOrDirectoryExists	src/gtest/gtest-all.cpp	/^bool FilePath::FileOrDirectoryExists() const {$/;"	f	class:testing::internal::FilePath
FilePath	src/gtest/gtest.h	/^  FilePath() : pathname_("") { }$/;"	f	class:testing::internal::FilePath
FilePath	src/gtest/gtest.h	/^  FilePath(const FilePath& rhs) : pathname_(rhs.pathname_) { }$/;"	f	class:testing::internal::FilePath
FilePath	src/gtest/gtest.h	/^  explicit FilePath(const String& pathname) : pathname_(pathname) {$/;"	f	class:testing::internal::FilePath
FilePath	src/gtest/gtest.h	/^  explicit FilePath(const char* pathname) : pathname_(pathname) {$/;"	f	class:testing::internal::FilePath
FilePath	src/gtest/gtest.h	/^class GTEST_API_ FilePath {$/;"	c	namespace:testing::internal
FilesBelongToSameModule	scripts/cpp_lint.py	/^def FilesBelongToSameModule(filename_cc, filename_h):$/;"	f
Fill	include/caffe/filler.hpp	/^  virtual void Fill(Blob<Dtype>* blob) {$/;"	f	class:caffe::BilinearFiller
Fill	include/caffe/filler.hpp	/^  virtual void Fill(Blob<Dtype>* blob) {$/;"	f	class:caffe::ConstantFiller
Fill	include/caffe/filler.hpp	/^  virtual void Fill(Blob<Dtype>* blob) {$/;"	f	class:caffe::GaussianFiller
Fill	include/caffe/filler.hpp	/^  virtual void Fill(Blob<Dtype>* blob) {$/;"	f	class:caffe::MSRAFiller
Fill	include/caffe/filler.hpp	/^  virtual void Fill(Blob<Dtype>* blob) {$/;"	f	class:caffe::PositiveUnitballFiller
Fill	include/caffe/filler.hpp	/^  virtual void Fill(Blob<Dtype>* blob) {$/;"	f	class:caffe::UniformFiller
Fill	include/caffe/filler.hpp	/^  virtual void Fill(Blob<Dtype>* blob) {$/;"	f	class:caffe::XavierFiller
Fill	src/caffe/test/test_data_layer.cpp	/^  void Fill(const bool unique_pixels, DataParameter_DB backend) {$/;"	f	class:caffe::DataLayerTest
FillBottoms	src/caffe/test/test_accuracy_layer.cpp	/^  virtual void FillBottoms() {$/;"	f	class:caffe::AccuracyLayerTest
FillDatum	src/caffe/test/test_data_transformer.cpp	/^void FillDatum(const int label, const int channels, const int height,$/;"	f	namespace:caffe
FillUnrolledNet	src/caffe/layers/lstm_layer.cpp	/^void LSTMLayer<Dtype>::FillUnrolledNet(NetParameter* net_param) const {$/;"	f	class:caffe::LSTMLayer
FillUnrolledNet	src/caffe/layers/rnn_layer.cpp	/^void RNNLayer<Dtype>::FillUnrolledNet(NetParameter* net_param) const {$/;"	f	class:caffe::RNNLayer
Filler	include/caffe/filler.hpp	/^  explicit Filler(const FillerParameter& param) : filler_param_(param) {}$/;"	f	class:caffe::Filler
Filler	include/caffe/filler.hpp	/^class Filler {$/;"	c	namespace:caffe
FilterLayer	include/caffe/layers/filter_layer.hpp	/^  explicit FilterLayer(const LayerParameter& param)$/;"	f	class:caffe::FilterLayer
FilterLayer	include/caffe/layers/filter_layer.hpp	/^class FilterLayer : public Layer<Dtype> {$/;"	c	namespace:caffe
FilterLayerTest	src/caffe/test/test_filter_layer.cpp	/^  FilterLayerTest()$/;"	f	class:caffe::FilterLayerTest
FilterLayerTest	src/caffe/test/test_filter_layer.cpp	/^class FilterLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
FilterMatchesTest	src/gtest/gtest-all.cpp	/^bool UnitTestOptions::FilterMatchesTest(const String &test_case_name,$/;"	f	class:testing::internal::UnitTestOptions
FilterNet	src/caffe/net.cpp	/^void Net<Dtype>::FilterNet(const NetParameter& param,$/;"	f	class:caffe::Net
FilterNetTest	src/caffe/test/test_net.cpp	/^class FilterNetTest : public ::testing::Test {$/;"	c	namespace:caffe	file:
FilterTests	src/gtest/gtest-all.cpp	/^int UnitTestImpl::FilterTests(ReactionToSharding shard_tests) {$/;"	f	class:testing::internal::UnitTestImpl
FindDevice	src/caffe/common.cpp	/^int Caffe::FindDevice(const int start_id) {$/;"	f	class:caffe::Caffe
FindEndOfExpressionInLine	scripts/cpp_lint.py	/^def FindEndOfExpressionInLine(line, startpos, depth, startchar, endchar):$/;"	f
FindLastPathSeparator	src/gtest/gtest-all.cpp	/^const char* FilePath::FindLastPathSeparator() const {$/;"	f	class:testing::internal::FilePath
FindNextMatchingAngleBracket	scripts/cpp_lint.py	/^def FindNextMatchingAngleBracket(clean_lines, linenum, init_suffix):$/;"	f
FindNextMultiLineCommentEnd	scripts/cpp_lint.py	/^def FindNextMultiLineCommentEnd(lines, lineix):$/;"	f
FindNextMultiLineCommentStart	scripts/cpp_lint.py	/^def FindNextMultiLineCommentStart(lines, lineix):$/;"	f
FindPreviousMatchingAngleBracket	scripts/cpp_lint.py	/^def FindPreviousMatchingAngleBracket(clean_lines, linenum, init_prefix):$/;"	f
FindStartOfExpressionInLine	scripts/cpp_lint.py	/^def FindStartOfExpressionInLine(line, endpos, depth, startchar, endchar):$/;"	f
FlagToEnvVar	src/gtest/gtest-all.cpp	/^static String FlagToEnvVar(const char* flag) {$/;"	f	namespace:testing::internal
FlattenLayer	include/caffe/layers/flatten_layer.hpp	/^  explicit FlattenLayer(const LayerParameter& param)$/;"	f	class:caffe::FlattenLayer
FlattenLayer	include/caffe/layers/flatten_layer.hpp	/^class FlattenLayer : public Layer<Dtype> {$/;"	c	namespace:caffe
FlattenLayerTest	src/caffe/test/test_flatten_layer.cpp	/^  FlattenLayerTest()$/;"	f	class:caffe::FlattenLayerTest
FlattenLayerTest	src/caffe/test/test_flatten_layer.cpp	/^class FlattenLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
Float	src/gtest/gtest.h	/^typedef FloatingPoint<float> Float;$/;"	t	namespace:testing::internal
FloatLE	src/gtest/gtest-all.cpp	/^AssertionResult FloatLE(const char* expr1, const char* expr2,$/;"	f	namespace:testing
FloatingPoint	src/gtest/gtest.h	/^  explicit FloatingPoint(const RawType& x) { u_.value_ = x; }$/;"	f	class:testing::internal::FloatingPoint
FloatingPoint	src/gtest/gtest.h	/^class FloatingPoint {$/;"	c	namespace:testing::internal
FloatingPointLE	src/gtest/gtest-all.cpp	/^AssertionResult FloatingPointLE(const char* expr1,$/;"	f	namespace:testing::internal
FloatingPointUnion	src/gtest/gtest.h	/^  union FloatingPointUnion {$/;"	u	class:testing::internal::FloatingPoint
FlushInfoLog	src/gtest/gtest.h	/^inline void FlushInfoLog() { fflush(NULL); }$/;"	f	namespace:std::tr1
ForEach	src/gtest/gtest-all.cpp	/^void ForEach(const Container& c, Functor functor) {$/;"	f	namespace:testing::internal
ForkingDeathTest	src/gtest/gtest-all.cpp	/^ForkingDeathTest::ForkingDeathTest(const char* a_statement, const RE* a_regex)$/;"	f	class:testing::internal::ForkingDeathTest
ForkingDeathTest	src/gtest/gtest-all.cpp	/^class ForkingDeathTest : public DeathTestImpl {$/;"	c	namespace:testing::internal	file:
Format	src/gtest/gtest-all.cpp	/^String String::Format(const char * format, ...) {$/;"	f	class:testing::internal::String
FormatCompilerIndependentFileLocation	src/gtest/gtest-all.cpp	/^GTEST_API_ ::std::string FormatCompilerIndependentFileLocation($/;"	f	namespace:testing::internal
FormatCountableNoun	src/gtest/gtest-all.cpp	/^static internal::String FormatCountableNoun(int count,$/;"	f	namespace:testing
FormatCxxExceptionMessage	src/gtest/gtest-all.cpp	/^static internal::String FormatCxxExceptionMessage(const char* description,$/;"	f	namespace:testing
FormatDeathTestOutput	src/gtest/gtest-all.cpp	/^static ::std::string FormatDeathTestOutput(const ::std::string& output) {$/;"	f	namespace:testing::internal
FormatFileLocation	src/gtest/gtest-all.cpp	/^GTEST_API_ ::std::string FormatFileLocation(const char* file, int line) {$/;"	f	namespace:testing::internal
FormatForComparisonFailureMessage	src/gtest/gtest.h	/^String FormatForComparisonFailureMessage(const T1& value,$/;"	f	namespace:testing::internal
FormatRegexSyntaxError	src/gtest/gtest-all.cpp	/^String FormatRegexSyntaxError(const char* regex, int index) {$/;"	f	namespace:testing::internal
FormatSehExceptionMessage	src/gtest/gtest-all.cpp	/^static internal::String* FormatSehExceptionMessage(DWORD exception_code,$/;"	f	namespace:testing
FormatTestCaseCount	src/gtest/gtest-all.cpp	/^static internal::String FormatTestCaseCount(int test_case_count) {$/;"	f	namespace:testing
FormatTestCount	src/gtest/gtest-all.cpp	/^static internal::String FormatTestCount(int test_count) {$/;"	f	namespace:testing
FormatTimeInMillisAsSeconds	src/gtest/gtest-all.cpp	/^std::string FormatTimeInMillisAsSeconds(TimeInMillis ms) {$/;"	f	namespace:testing::internal
Forward	include/caffe/layer.hpp	/^inline Dtype Layer<Dtype>::Forward(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::Layer
Forward	src/caffe/net.cpp	/^const vector<Blob<Dtype>*>& Net<Dtype>::Forward($/;"	f	class:caffe::Net
Forward	src/caffe/net.cpp	/^const vector<Blob<Dtype>*>& Net<Dtype>::Forward(Dtype* loss) {$/;"	f	class:caffe::Net
ForwardBackward	include/caffe/net.hpp	/^  Dtype ForwardBackward() {$/;"	f	class:caffe::Net
ForwardDebugInfo	src/caffe/net.cpp	/^void Net<Dtype>::ForwardDebugInfo(const int layer_id) {$/;"	f	class:caffe::Net
ForwardFrom	src/caffe/net.cpp	/^Dtype Net<Dtype>::ForwardFrom(int start) {$/;"	f	class:caffe::Net
ForwardFromTo	src/caffe/net.cpp	/^Dtype Net<Dtype>::ForwardFromTo(int start, int end) {$/;"	f	class:caffe::Net
ForwardPrefilled	include/caffe/net.hpp	/^  const vector<Blob<Dtype>*>& ForwardPrefilled(Dtype* loss = NULL) {$/;"	f	class:caffe::Net
ForwardTo	src/caffe/net.cpp	/^Dtype Net<Dtype>::ForwardTo(int end) {$/;"	f	class:caffe::Net
Forward_cpu	include/caffe/layers/input_layer.hpp	/^  virtual void Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::InputLayer
Forward_cpu	include/caffe/layers/parameter_layer.hpp	/^  virtual void Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ParameterLayer
Forward_cpu	include/caffe/layers/python_layer.hpp	/^  virtual void Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PythonLayer
Forward_cpu	include/caffe/layers/reshape_layer.hpp	/^  virtual void Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ReshapeLayer
Forward_cpu	include/caffe/layers/silence_layer.hpp	/^  virtual void Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SilenceLayer
Forward_cpu	src/caffe/layers/absval_layer.cpp	/^void AbsValLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::AbsValLayer
Forward_cpu	src/caffe/layers/accuracy_layer.cpp	/^void AccuracyLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::AccuracyLayer
Forward_cpu	src/caffe/layers/argmax_layer.cpp	/^void ArgMaxLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ArgMaxLayer
Forward_cpu	src/caffe/layers/base_data_layer.cpp	/^void BasePrefetchingDataLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::BasePrefetchingDataLayer
Forward_cpu	src/caffe/layers/batch_norm_layer.cpp	/^void BatchNormLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BatchNormLayer
Forward_cpu	src/caffe/layers/batch_reindex_layer.cpp	/^void BatchReindexLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BatchReindexLayer
Forward_cpu	src/caffe/layers/bias_layer.cpp	/^void BiasLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BiasLayer
Forward_cpu	src/caffe/layers/bnll_layer.cpp	/^void BNLLLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BNLLLayer
Forward_cpu	src/caffe/layers/concat_layer.cpp	/^void ConcatLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ConcatLayer
Forward_cpu	src/caffe/layers/contrastive_loss_layer.cpp	/^void ContrastiveLossLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::ContrastiveLossLayer
Forward_cpu	src/caffe/layers/conv_layer.cpp	/^void ConvolutionLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ConvolutionLayer
Forward_cpu	src/caffe/layers/crop_layer.cpp	/^void CropLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CropLayer
Forward_cpu	src/caffe/layers/deconv_layer.cpp	/^void DeconvolutionLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::DeconvolutionLayer
Forward_cpu	src/caffe/layers/dropout_layer.cpp	/^void DropoutLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::DropoutLayer
Forward_cpu	src/caffe/layers/dummy_data_layer.cpp	/^void DummyDataLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::DummyDataLayer
Forward_cpu	src/caffe/layers/eltwise_layer.cpp	/^void EltwiseLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::EltwiseLayer
Forward_cpu	src/caffe/layers/elu_layer.cpp	/^void ELULayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ELULayer
Forward_cpu	src/caffe/layers/embed_layer.cpp	/^void EmbedLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::EmbedLayer
Forward_cpu	src/caffe/layers/euclidean_loss_layer.cpp	/^void EuclideanLossLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::EuclideanLossLayer
Forward_cpu	src/caffe/layers/exp_layer.cpp	/^void ExpLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ExpLayer
Forward_cpu	src/caffe/layers/filter_layer.cpp	/^void FilterLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::FilterLayer
Forward_cpu	src/caffe/layers/flatten_layer.cpp	/^void FlattenLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::FlattenLayer
Forward_cpu	src/caffe/layers/hdf5_data_layer.cpp	/^void HDF5DataLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::HDF5DataLayer
Forward_cpu	src/caffe/layers/hdf5_output_layer.cpp	/^void HDF5OutputLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::HDF5OutputLayer
Forward_cpu	src/caffe/layers/hinge_loss_layer.cpp	/^void HingeLossLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::HingeLossLayer
Forward_cpu	src/caffe/layers/im2col_layer.cpp	/^void Im2colLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::Im2colLayer
Forward_cpu	src/caffe/layers/infogain_loss_layer.cpp	/^void InfogainLossLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::InfogainLossLayer
Forward_cpu	src/caffe/layers/inner_product_layer.cpp	/^void InnerProductLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::InnerProductLayer
Forward_cpu	src/caffe/layers/log_layer.cpp	/^void LogLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::LogLayer
Forward_cpu	src/caffe/layers/lrn_layer.cpp	/^void LRNLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::LRNLayer
Forward_cpu	src/caffe/layers/lstm_unit_layer.cpp	/^void LSTMUnitLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::LSTMUnitLayer
Forward_cpu	src/caffe/layers/memory_data_layer.cpp	/^void MemoryDataLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::MemoryDataLayer
Forward_cpu	src/caffe/layers/multinomial_logistic_loss_layer.cpp	/^void MultinomialLogisticLossLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::MultinomialLogisticLossLayer
Forward_cpu	src/caffe/layers/mvn_layer.cpp	/^void MVNLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::MVNLayer
Forward_cpu	src/caffe/layers/pooling_layer.cpp	/^void PoolingLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PoolingLayer
Forward_cpu	src/caffe/layers/power_layer.cpp	/^void PowerLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PowerLayer
Forward_cpu	src/caffe/layers/prelu_layer.cpp	/^void PReLULayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PReLULayer
Forward_cpu	src/caffe/layers/recurrent_layer.cpp	/^void RecurrentLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::RecurrentLayer
Forward_cpu	src/caffe/layers/reduction_layer.cpp	/^void ReductionLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::ReductionLayer
Forward_cpu	src/caffe/layers/relu_layer.cpp	/^void ReLULayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ReLULayer
Forward_cpu	src/caffe/layers/scale_layer.cpp	/^void ScaleLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::ScaleLayer
Forward_cpu	src/caffe/layers/sigmoid_cross_entropy_loss_layer.cpp	/^void SigmoidCrossEntropyLossLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::SigmoidCrossEntropyLossLayer
Forward_cpu	src/caffe/layers/sigmoid_layer.cpp	/^void SigmoidLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SigmoidLayer
Forward_cpu	src/caffe/layers/slice_layer.cpp	/^void SliceLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SliceLayer
Forward_cpu	src/caffe/layers/softmax_layer.cpp	/^void SoftmaxLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SoftmaxLayer
Forward_cpu	src/caffe/layers/softmax_loss_layer.cpp	/^void SoftmaxWithLossLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::SoftmaxWithLossLayer
Forward_cpu	src/caffe/layers/split_layer.cpp	/^void SplitLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SplitLayer
Forward_cpu	src/caffe/layers/spp_layer.cpp	/^void SPPLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SPPLayer
Forward_cpu	src/caffe/layers/tanh_layer.cpp	/^void TanHLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::TanHLayer
Forward_cpu	src/caffe/layers/threshold_layer.cpp	/^void ThresholdLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ThresholdLayer
Forward_cpu	src/caffe/layers/tile_layer.cpp	/^void TileLayer<Dtype>::Forward_cpu($/;"	f	class:caffe::TileLayer
Forward_gpu	include/caffe/layer.hpp	/^  virtual void Forward_gpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::Layer
Forward_gpu	include/caffe/layers/reshape_layer.hpp	/^  virtual void Forward_gpu(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ReshapeLayer
FromProto	src/caffe/blob.cpp	/^void Blob<Dtype>::FromProto(const BlobProto& proto, bool reshape) {$/;"	f	class:caffe::Blob
FullMatch	src/gtest/gtest-all.cpp	/^bool RE::FullMatch(const char* str, const RE& re) {$/;"	f	class:testing::internal::RE
FullMatch	src/gtest/gtest.h	/^  static bool FullMatch(const ::std::string& str, const RE& re) {$/;"	f	class:std::tr1::RE
FullMatch	src/gtest/gtest.h	/^  static bool FullMatch(const ::string& str, const RE& re) {$/;"	f	class:std::tr1::RE
FullName	scripts/cpp_lint.py	/^  def FullName(self):$/;"	m	class:FileInfo
Function	python/caffe/net_spec.py	/^class Function(object):$/;"	c
GCCVERSION	Makefile	/^	GCCVERSION := $(shell $(CXX) -dumpversion | cut -f1,2 -d.)$/;"	m
GPU	include/caffe/common.hpp	/^  enum Brew { CPU, GPU };$/;"	e	enum:caffe::Caffe::Brew
GPUDevice	include/caffe/test/test_caffe_main.hpp	/^struct GPUDevice {$/;"	s	namespace:caffe
GPUDeviceTest	include/caffe/test/test_caffe_main.hpp	/^class GPUDeviceTest : public MultiDeviceTest<GPUDevice<Dtype> > {$/;"	c	namespace:caffe
GPUMathFunctionsTest	src/caffe/test/test_math_functions.cpp	/^class GPUMathFunctionsTest : public MathFunctionsTest<GPUDevice<Dtype> > {$/;"	c	namespace:caffe	file:
GPUParams	include/caffe/parallel.hpp	/^class GPUParams : public Params<Dtype> {$/;"	c	namespace:caffe
GPUParams	src/caffe/parallel.cpp	/^GPUParams<Dtype>::GPUParams(shared_ptr<Solver<Dtype> > root_solver, int device)$/;"	f	class:caffe::GPUParams
GPUStochasticPoolingLayerTest	src/caffe/test/test_stochastic_pooling.cpp	/^class GPUStochasticPoolingLayerTest$/;"	c	namespace:caffe	file:
GTEST_0_TUPLE_	src/gtest/gtest.h	/^#define GTEST_0_TUPLE_(/;"	d
GTEST_0_TUPLE_	src/gtest/gtest.h	/^#undef GTEST_0_TUPLE_$/;"	d
GTEST_0_TYPENAMES_	src/gtest/gtest.h	/^#define GTEST_0_TYPENAMES_(/;"	d
GTEST_0_TYPENAMES_	src/gtest/gtest.h	/^#undef GTEST_0_TYPENAMES_$/;"	d
GTEST_10_TUPLE_	src/gtest/gtest.h	/^#define GTEST_10_TUPLE_(/;"	d
GTEST_10_TUPLE_	src/gtest/gtest.h	/^#undef GTEST_10_TUPLE_$/;"	d
GTEST_10_TYPENAMES_	src/gtest/gtest.h	/^#define GTEST_10_TYPENAMES_(/;"	d
GTEST_10_TYPENAMES_	src/gtest/gtest.h	/^#undef GTEST_10_TYPENAMES_$/;"	d
GTEST_1_TUPLE_	src/gtest/gtest.h	/^#define GTEST_1_TUPLE_(/;"	d
GTEST_1_TUPLE_	src/gtest/gtest.h	/^#undef GTEST_1_TUPLE_$/;"	d
GTEST_1_TUPLE_	src/gtest/gtest.h	/^class GTEST_1_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_1_TYPENAMES_	src/gtest/gtest.h	/^#define GTEST_1_TYPENAMES_(/;"	d
GTEST_1_TYPENAMES_	src/gtest/gtest.h	/^#undef GTEST_1_TYPENAMES_$/;"	d
GTEST_2_TUPLE_	src/gtest/gtest.h	/^#define GTEST_2_TUPLE_(/;"	d
GTEST_2_TUPLE_	src/gtest/gtest.h	/^#undef GTEST_2_TUPLE_$/;"	d
GTEST_2_TUPLE_	src/gtest/gtest.h	/^class GTEST_2_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_2_TYPENAMES_	src/gtest/gtest.h	/^#define GTEST_2_TYPENAMES_(/;"	d
GTEST_2_TYPENAMES_	src/gtest/gtest.h	/^#undef GTEST_2_TYPENAMES_$/;"	d
GTEST_3_TUPLE_	src/gtest/gtest.h	/^#define GTEST_3_TUPLE_(/;"	d
GTEST_3_TUPLE_	src/gtest/gtest.h	/^#undef GTEST_3_TUPLE_$/;"	d
GTEST_3_TUPLE_	src/gtest/gtest.h	/^class GTEST_3_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_3_TYPENAMES_	src/gtest/gtest.h	/^#define GTEST_3_TYPENAMES_(/;"	d
GTEST_3_TYPENAMES_	src/gtest/gtest.h	/^#undef GTEST_3_TYPENAMES_$/;"	d
GTEST_4_TUPLE_	src/gtest/gtest.h	/^#define GTEST_4_TUPLE_(/;"	d
GTEST_4_TUPLE_	src/gtest/gtest.h	/^#undef GTEST_4_TUPLE_$/;"	d
GTEST_4_TUPLE_	src/gtest/gtest.h	/^class GTEST_4_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_4_TYPENAMES_	src/gtest/gtest.h	/^#define GTEST_4_TYPENAMES_(/;"	d
GTEST_4_TYPENAMES_	src/gtest/gtest.h	/^#undef GTEST_4_TYPENAMES_$/;"	d
GTEST_5_TUPLE_	src/gtest/gtest.h	/^#define GTEST_5_TUPLE_(/;"	d
GTEST_5_TUPLE_	src/gtest/gtest.h	/^#undef GTEST_5_TUPLE_$/;"	d
GTEST_5_TUPLE_	src/gtest/gtest.h	/^class GTEST_5_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_5_TYPENAMES_	src/gtest/gtest.h	/^#define GTEST_5_TYPENAMES_(/;"	d
GTEST_5_TYPENAMES_	src/gtest/gtest.h	/^#undef GTEST_5_TYPENAMES_$/;"	d
GTEST_6_TUPLE_	src/gtest/gtest.h	/^#define GTEST_6_TUPLE_(/;"	d
GTEST_6_TUPLE_	src/gtest/gtest.h	/^#undef GTEST_6_TUPLE_$/;"	d
GTEST_6_TUPLE_	src/gtest/gtest.h	/^class GTEST_6_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_6_TYPENAMES_	src/gtest/gtest.h	/^#define GTEST_6_TYPENAMES_(/;"	d
GTEST_6_TYPENAMES_	src/gtest/gtest.h	/^#undef GTEST_6_TYPENAMES_$/;"	d
GTEST_7_TUPLE_	src/gtest/gtest.h	/^#define GTEST_7_TUPLE_(/;"	d
GTEST_7_TUPLE_	src/gtest/gtest.h	/^#undef GTEST_7_TUPLE_$/;"	d
GTEST_7_TUPLE_	src/gtest/gtest.h	/^class GTEST_7_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_7_TYPENAMES_	src/gtest/gtest.h	/^#define GTEST_7_TYPENAMES_(/;"	d
GTEST_7_TYPENAMES_	src/gtest/gtest.h	/^#undef GTEST_7_TYPENAMES_$/;"	d
GTEST_8_TUPLE_	src/gtest/gtest.h	/^#define GTEST_8_TUPLE_(/;"	d
GTEST_8_TUPLE_	src/gtest/gtest.h	/^#undef GTEST_8_TUPLE_$/;"	d
GTEST_8_TUPLE_	src/gtest/gtest.h	/^class GTEST_8_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_8_TYPENAMES_	src/gtest/gtest.h	/^#define GTEST_8_TYPENAMES_(/;"	d
GTEST_8_TYPENAMES_	src/gtest/gtest.h	/^#undef GTEST_8_TYPENAMES_$/;"	d
GTEST_9_TUPLE_	src/gtest/gtest.h	/^#define GTEST_9_TUPLE_(/;"	d
GTEST_9_TUPLE_	src/gtest/gtest.h	/^#undef GTEST_9_TUPLE_$/;"	d
GTEST_9_TUPLE_	src/gtest/gtest.h	/^class GTEST_9_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_9_TYPENAMES_	src/gtest/gtest.h	/^#define GTEST_9_TYPENAMES_(/;"	d
GTEST_9_TYPENAMES_	src/gtest/gtest.h	/^#undef GTEST_9_TYPENAMES_$/;"	d
GTEST_ADD_REFERENCE_	src/gtest/gtest.h	/^#define GTEST_ADD_REFERENCE_(/;"	d
GTEST_ADD_REF_	src/gtest/gtest.h	/^#define GTEST_ADD_REF_(/;"	d
GTEST_ADD_REF_	src/gtest/gtest.h	/^#undef GTEST_ADD_REF_$/;"	d
GTEST_AMBIGUOUS_ELSE_BLOCKER_	src/gtest/gtest.h	/^# define GTEST_AMBIGUOUS_ELSE_BLOCKER_$/;"	d
GTEST_API_	src/gtest/gtest.h	/^#  define GTEST_API_ /;"	d
GTEST_API_	src/gtest/gtest.h	/^# define GTEST_API_$/;"	d
GTEST_ASSERT_	src/gtest/gtest.h	/^#define GTEST_ASSERT_(/;"	d
GTEST_ASSERT_EQ	src/gtest/gtest.h	/^#define GTEST_ASSERT_EQ(/;"	d
GTEST_ASSERT_GE	src/gtest/gtest.h	/^#define GTEST_ASSERT_GE(/;"	d
GTEST_ASSERT_GT	src/gtest/gtest.h	/^#define GTEST_ASSERT_GT(/;"	d
GTEST_ASSERT_LE	src/gtest/gtest.h	/^#define GTEST_ASSERT_LE(/;"	d
GTEST_ASSERT_LT	src/gtest/gtest.h	/^#define GTEST_ASSERT_LT(/;"	d
GTEST_ASSERT_NE	src/gtest/gtest.h	/^#define GTEST_ASSERT_NE(/;"	d
GTEST_ATTRIBUTE_UNUSED_	src/gtest/gtest-all.cpp	/^} GTEST_ATTRIBUTE_UNUSED_;$/;"	m	namespace:testing::internal	typeref:class:testing::internal::GTestFlagSaver	file:
GTEST_ATTRIBUTE_UNUSED_	src/gtest/gtest.h	/^  } GTEST_ATTRIBUTE_UNUSED_;$/;"	m	class:testing::internal::DeathTest	typeref:class:testing::internal::DeathTest::ReturnSentinel
GTEST_ATTRIBUTE_UNUSED_	src/gtest/gtest.h	/^# define GTEST_ATTRIBUTE_UNUSED_ /;"	d
GTEST_ATTRIBUTE_UNUSED_	src/gtest/gtest.h	/^} GTEST_ATTRIBUTE_UNUSED_;  \/\/ A ScopedTrace object does its job in its$/;"	m	namespace:testing::internal	typeref:class:testing::internal::ScopedTrace
GTEST_BIND_	src/gtest/gtest.h	/^# define GTEST_BIND_(/;"	d
GTEST_BY_REF_	src/gtest/gtest.h	/^#define GTEST_BY_REF_(/;"	d
GTEST_BY_REF_	src/gtest/gtest.h	/^#undef GTEST_BY_REF_$/;"	d
GTEST_CAN_COMPARE_NULL	src/gtest/gtest.h	/^# define GTEST_CAN_COMPARE_NULL /;"	d
GTEST_CAN_STREAM_RESULTS_	src/gtest/gtest.h	/^# define GTEST_CAN_STREAM_RESULTS_ /;"	d
GTEST_CASE_NAMESPACE_	src/gtest/gtest.h	/^# define GTEST_CASE_NAMESPACE_(/;"	d
GTEST_CHECK_	src/gtest/gtest.h	/^#define GTEST_CHECK_(/;"	d
GTEST_CHECK_POSIX_SUCCESS_	src/gtest/gtest.h	/^#define GTEST_CHECK_POSIX_SUCCESS_(/;"	d
GTEST_COMPILE_ASSERT_	src/gtest/gtest.h	/^#define GTEST_COMPILE_ASSERT_(/;"	d
GTEST_CONCAT_TOKEN_	src/gtest/gtest.h	/^#define GTEST_CONCAT_TOKEN_(/;"	d
GTEST_CONCAT_TOKEN_IMPL_	src/gtest/gtest.h	/^#define GTEST_CONCAT_TOKEN_IMPL_(/;"	d
GTEST_CREF_WORKAROUND_	src/gtest/gtest.h	/^# define GTEST_CREF_WORKAROUND_ /;"	d
GTEST_CREF_WORKAROUND_	src/gtest/gtest.h	/^# define GTEST_CREF_WORKAROUND_$/;"	d
GTEST_DEATH_TEST_	src/gtest/gtest.h	/^# define GTEST_DEATH_TEST_(/;"	d
GTEST_DEATH_TEST_CHECK_	src/gtest/gtest-all.cpp	/^# define GTEST_DEATH_TEST_CHECK_(/;"	d	file:
GTEST_DEATH_TEST_CHECK_SYSCALL_	src/gtest/gtest-all.cpp	/^# define GTEST_DEATH_TEST_CHECK_SYSCALL_(/;"	d	file:
GTEST_DECLARE_STATIC_MUTEX_	src/gtest/gtest.h	/^# define GTEST_DECLARE_STATIC_MUTEX_(/;"	d
GTEST_DECLARE_TUPLE_AS_FRIEND_	src/gtest/gtest.h	/^# define GTEST_DECLARE_TUPLE_AS_FRIEND_ /;"	d
GTEST_DECLARE_TUPLE_AS_FRIEND_	src/gtest/gtest.h	/^#undef GTEST_DECLARE_TUPLE_AS_FRIEND_$/;"	d
GTEST_DECLARE_bool_	src/gtest/gtest.h	/^#define GTEST_DECLARE_bool_(/;"	d
GTEST_DECLARE_int32_	src/gtest/gtest.h	/^#define GTEST_DECLARE_int32_(/;"	d
GTEST_DECLARE_string_	src/gtest/gtest.h	/^#define GTEST_DECLARE_string_(/;"	d
GTEST_DEFINE_STATIC_MUTEX_	src/gtest/gtest.h	/^# define GTEST_DEFINE_STATIC_MUTEX_(/;"	d
GTEST_DEFINE_bool_	src/gtest/gtest.h	/^#define GTEST_DEFINE_bool_(/;"	d
GTEST_DEFINE_int32_	src/gtest/gtest.h	/^#define GTEST_DEFINE_int32_(/;"	d
GTEST_DEFINE_string_	src/gtest/gtest.h	/^#define GTEST_DEFINE_string_(/;"	d
GTEST_DEV_EMAIL_	src/gtest/gtest.h	/^#define GTEST_DEV_EMAIL_ /;"	d
GTEST_DISALLOW_ASSIGN_	src/gtest/gtest.h	/^#define GTEST_DISALLOW_ASSIGN_(/;"	d
GTEST_DISALLOW_COPY_AND_ASSIGN_	src/gtest/gtest.h	/^#define GTEST_DISALLOW_COPY_AND_ASSIGN_(/;"	d
GTEST_ELLIPSIS_NEEDS_POD_	src/gtest/gtest.h	/^# define GTEST_ELLIPSIS_NEEDS_POD_ /;"	d
GTEST_ERROR	src/gtest/gtest.h	/^  GTEST_ERROR,$/;"	e	enum:std::tr1::GTestLogSeverity
GTEST_EXECUTE_DEATH_TEST_STATEMENT_	src/gtest/gtest.h	/^#  define GTEST_EXECUTE_DEATH_TEST_STATEMENT_(/;"	d
GTEST_FAIL	src/gtest/gtest.h	/^#define GTEST_FAIL(/;"	d
GTEST_FATAL	src/gtest/gtest.h	/^  GTEST_FATAL$/;"	e	enum:std::tr1::GTestLogSeverity
GTEST_FATAL_FAILURE_	src/gtest/gtest.h	/^#define GTEST_FATAL_FAILURE_(/;"	d
GTEST_FLAG	src/gtest/gtest.h	/^#define GTEST_FLAG(/;"	d
GTEST_FLAG_PREFIX_	src/gtest/gtest.h	/^#define GTEST_FLAG_PREFIX_ /;"	d
GTEST_FLAG_PREFIX_DASH_	src/gtest/gtest.h	/^#define GTEST_FLAG_PREFIX_DASH_ /;"	d
GTEST_FLAG_PREFIX_UPPER_	src/gtest/gtest.h	/^#define GTEST_FLAG_PREFIX_UPPER_ /;"	d
GTEST_FORMAT_CHAR_PTR_IMPL_	src/gtest/gtest.h	/^#define GTEST_FORMAT_CHAR_PTR_IMPL_(/;"	d
GTEST_FORMAT_CHAR_PTR_IMPL_	src/gtest/gtest.h	/^#undef GTEST_FORMAT_CHAR_PTR_IMPL_$/;"	d
GTEST_FORMAT_IMPL_	src/gtest/gtest.h	/^#define GTEST_FORMAT_IMPL_(/;"	d
GTEST_FORMAT_IMPL_	src/gtest/gtest.h	/^#undef GTEST_FORMAT_IMPL_$/;"	d
GTEST_GCC_VER_	src/gtest/gtest.h	/^# define GTEST_GCC_VER_ /;"	d
GTEST_HAS_ALT_PATH_SEP_	src/gtest/gtest.h	/^# define GTEST_HAS_ALT_PATH_SEP_ /;"	d
GTEST_HAS_CLONE	src/gtest/gtest.h	/^#  define GTEST_HAS_CLONE /;"	d
GTEST_HAS_COMBINE	src/gtest/gtest.h	/^# define GTEST_HAS_COMBINE /;"	d
GTEST_HAS_DEATH_TEST	src/gtest/gtest.h	/^# define GTEST_HAS_DEATH_TEST /;"	d
GTEST_HAS_EXCEPTIONS	src/gtest/gtest.h	/^#  define GTEST_HAS_EXCEPTIONS /;"	d
GTEST_HAS_GETTIMEOFDAY_	src/gtest/gtest-all.cpp	/^# define GTEST_HAS_GETTIMEOFDAY_ /;"	d	file:
GTEST_HAS_GLOBAL_STRING	src/gtest/gtest.h	/^# define GTEST_HAS_GLOBAL_STRING /;"	d
GTEST_HAS_GLOBAL_WSTRING	src/gtest/gtest.h	/^# define GTEST_HAS_GLOBAL_WSTRING /;"	d
GTEST_HAS_PARAM_TEST	src/gtest/gtest.h	/^#define GTEST_HAS_PARAM_TEST /;"	d
GTEST_HAS_POSIX_RE	src/gtest/gtest.h	/^# define GTEST_HAS_POSIX_RE /;"	d
GTEST_HAS_PTHREAD	src/gtest/gtest.h	/^# define GTEST_HAS_PTHREAD /;"	d
GTEST_HAS_RTTI	src/gtest/gtest.h	/^#   define GTEST_HAS_RTTI /;"	d
GTEST_HAS_RTTI	src/gtest/gtest.h	/^#  define GTEST_HAS_RTTI /;"	d
GTEST_HAS_SEH	src/gtest/gtest.h	/^#  define GTEST_HAS_SEH /;"	d
GTEST_HAS_STD_STRING	src/gtest/gtest.h	/^# define GTEST_HAS_STD_STRING /;"	d
GTEST_HAS_STD_WSTRING	src/gtest/gtest.h	/^# define GTEST_HAS_STD_WSTRING /;"	d
GTEST_HAS_STREAM_REDIRECTION	src/gtest/gtest.h	/^#  define GTEST_HAS_STREAM_REDIRECTION /;"	d
GTEST_HAS_TR1_TUPLE	src/gtest/gtest.h	/^# define GTEST_HAS_TR1_TUPLE /;"	d
GTEST_HAS_TYPED_TEST	src/gtest/gtest.h	/^# define GTEST_HAS_TYPED_TEST /;"	d
GTEST_HAS_TYPED_TEST_P	src/gtest/gtest.h	/^# define GTEST_HAS_TYPED_TEST_P /;"	d
GTEST_IMPLEMENTATION_	src/gtest/gtest-all.cpp	/^#define GTEST_IMPLEMENTATION_ /;"	d	file:
GTEST_IMPLEMENTATION_	src/gtest/gtest-all.cpp	/^#undef GTEST_IMPLEMENTATION_$/;"	d	file:
GTEST_IMPL_CMP_HELPER_	src/gtest/gtest-all.cpp	/^#define GTEST_IMPL_CMP_HELPER_(/;"	d	file:
GTEST_IMPL_CMP_HELPER_	src/gtest/gtest-all.cpp	/^#undef GTEST_IMPL_CMP_HELPER_$/;"	d	file:
GTEST_IMPL_CMP_HELPER_	src/gtest/gtest.h	/^#define GTEST_IMPL_CMP_HELPER_(/;"	d
GTEST_IMPL_CMP_HELPER_	src/gtest/gtest.h	/^#undef GTEST_IMPL_CMP_HELPER_$/;"	d
GTEST_INCLUDE_GTEST_GTEST_DEATH_TEST_H_	src/gtest/gtest.h	/^#define GTEST_INCLUDE_GTEST_GTEST_DEATH_TEST_H_$/;"	d
GTEST_INCLUDE_GTEST_GTEST_H_	src/gtest/gtest.h	/^#define GTEST_INCLUDE_GTEST_GTEST_H_$/;"	d
GTEST_INCLUDE_GTEST_GTEST_MESSAGE_H_	src/gtest/gtest.h	/^#define GTEST_INCLUDE_GTEST_GTEST_MESSAGE_H_$/;"	d
GTEST_INCLUDE_GTEST_GTEST_PARAM_TEST_H_	src/gtest/gtest.h	/^#define GTEST_INCLUDE_GTEST_GTEST_PARAM_TEST_H_$/;"	d
GTEST_INCLUDE_GTEST_GTEST_PRED_IMPL_H_	src/gtest/gtest.h	/^#define GTEST_INCLUDE_GTEST_GTEST_PRED_IMPL_H_$/;"	d
GTEST_INCLUDE_GTEST_GTEST_PRINTERS_H_	src/gtest/gtest.h	/^#define GTEST_INCLUDE_GTEST_GTEST_PRINTERS_H_$/;"	d
GTEST_INCLUDE_GTEST_GTEST_PROD_H_	src/gtest/gtest.h	/^#define GTEST_INCLUDE_GTEST_GTEST_PROD_H_$/;"	d
GTEST_INCLUDE_GTEST_GTEST_SPI_H_	src/gtest/gtest-all.cpp	/^#define GTEST_INCLUDE_GTEST_GTEST_SPI_H_$/;"	d	file:
GTEST_INCLUDE_GTEST_GTEST_TEST_PART_H_	src/gtest/gtest.h	/^#define GTEST_INCLUDE_GTEST_GTEST_TEST_PART_H_$/;"	d
GTEST_INCLUDE_GTEST_GTEST_TYPED_TEST_H_	src/gtest/gtest.h	/^#define GTEST_INCLUDE_GTEST_GTEST_TYPED_TEST_H_$/;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_DEATH_TEST_INTERNAL_H_	src/gtest/gtest.h	/^#define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_DEATH_TEST_INTERNAL_H_$/;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_FILEPATH_H_	src/gtest/gtest.h	/^#define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_FILEPATH_H_$/;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_INTERNAL_H_	src/gtest/gtest.h	/^#define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_INTERNAL_H_$/;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_LINKED_PTR_H_	src/gtest/gtest.h	/^#define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_LINKED_PTR_H_$/;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PARAM_UTIL_GENERATED_H_	src/gtest/gtest.h	/^#define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PARAM_UTIL_GENERATED_H_$/;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PARAM_UTIL_H_	src/gtest/gtest.h	/^#define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PARAM_UTIL_H_$/;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_H_	src/gtest/gtest.h	/^#define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_H_$/;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_STRING_H_	src/gtest/gtest.h	/^#define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_STRING_H_$/;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_TUPLE_H_	src/gtest/gtest.h	/^#define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_TUPLE_H_$/;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_TYPE_UTIL_H_	src/gtest/gtest.h	/^#define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_TYPE_UTIL_H_$/;"	d
GTEST_INFO	src/gtest/gtest.h	/^  GTEST_INFO,$/;"	e	enum:std::tr1::GTestLogSeverity
GTEST_IS_NULL_LITERAL_	src/gtest/gtest.h	/^# define GTEST_IS_NULL_LITERAL_(/;"	d
GTEST_IS_THREADSAFE	src/gtest/gtest.h	/^# define GTEST_IS_THREADSAFE /;"	d
GTEST_LOG_	src/gtest/gtest.h	/^#define GTEST_LOG_(/;"	d
GTEST_MESSAGE_	src/gtest/gtest.h	/^#define GTEST_MESSAGE_(/;"	d
GTEST_MESSAGE_AT_	src/gtest/gtest.h	/^#define GTEST_MESSAGE_AT_(/;"	d
GTEST_MUST_USE_RESULT_	src/gtest/gtest.h	/^  int Run() GTEST_MUST_USE_RESULT_;$/;"	m	class:testing::UnitTest
GTEST_MUST_USE_RESULT_	src/gtest/gtest.h	/^# define GTEST_MUST_USE_RESULT_ /;"	d
GTEST_NAME_	src/gtest/gtest.h	/^#define GTEST_NAME_ /;"	d
GTEST_NEEDS_IS_POINTER_	src/gtest/gtest.h	/^# define GTEST_NEEDS_IS_POINTER_ /;"	d
GTEST_NONFATAL_FAILURE_	src/gtest/gtest.h	/^#define GTEST_NONFATAL_FAILURE_(/;"	d
GTEST_NO_INLINE_	src/gtest/gtest-all.cpp	/^bool StackLowerThanAddress(const void* ptr) GTEST_NO_INLINE_;$/;"	m	namespace:testing::internal	file:
GTEST_NO_INLINE_	src/gtest/gtest.h	/^# define GTEST_NO_INLINE_ /;"	d
GTEST_OBJ	Makefile	/^GTEST_OBJ := $(addprefix $(BUILD_DIR)\/, ${GTEST_SRC:.cpp=.o})$/;"	m
GTEST_OS_AIX	src/gtest/gtest.h	/^# define GTEST_OS_AIX /;"	d
GTEST_OS_CYGWIN	src/gtest/gtest.h	/^# define GTEST_OS_CYGWIN /;"	d
GTEST_OS_HPUX	src/gtest/gtest.h	/^# define GTEST_OS_HPUX /;"	d
GTEST_OS_LINUX	src/gtest/gtest.h	/^# define GTEST_OS_LINUX /;"	d
GTEST_OS_LINUX_ANDROID	src/gtest/gtest.h	/^#  define GTEST_OS_LINUX_ANDROID /;"	d
GTEST_OS_MAC	src/gtest/gtest.h	/^# define GTEST_OS_MAC /;"	d
GTEST_OS_NACL	src/gtest/gtest.h	/^# define GTEST_OS_NACL /;"	d
GTEST_OS_SOLARIS	src/gtest/gtest.h	/^# define GTEST_OS_SOLARIS /;"	d
GTEST_OS_SYMBIAN	src/gtest/gtest.h	/^# define GTEST_OS_SYMBIAN /;"	d
GTEST_OS_WINDOWS	src/gtest/gtest.h	/^# define GTEST_OS_WINDOWS /;"	d
GTEST_OS_WINDOWS_DESKTOP	src/gtest/gtest.h	/^#  define GTEST_OS_WINDOWS_DESKTOP /;"	d
GTEST_OS_WINDOWS_MINGW	src/gtest/gtest.h	/^#  define GTEST_OS_WINDOWS_MINGW /;"	d
GTEST_OS_WINDOWS_MOBILE	src/gtest/gtest.h	/^#  define GTEST_OS_WINDOWS_MOBILE /;"	d
GTEST_OS_ZOS	src/gtest/gtest.h	/^# define GTEST_OS_ZOS /;"	d
GTEST_PATH_MAX_	src/gtest/gtest-all.cpp	/^# define GTEST_PATH_MAX_ /;"	d	file:
GTEST_PATH_SEP_	src/gtest/gtest.h	/^# define GTEST_PATH_SEP_ /;"	d
GTEST_PRED1_	src/gtest/gtest.h	/^#define GTEST_PRED1_(/;"	d
GTEST_PRED2_	src/gtest/gtest.h	/^#define GTEST_PRED2_(/;"	d
GTEST_PRED3_	src/gtest/gtest.h	/^#define GTEST_PRED3_(/;"	d
GTEST_PRED4_	src/gtest/gtest.h	/^#define GTEST_PRED4_(/;"	d
GTEST_PRED5_	src/gtest/gtest.h	/^#define GTEST_PRED5_(/;"	d
GTEST_PRED_FORMAT1_	src/gtest/gtest.h	/^#define GTEST_PRED_FORMAT1_(/;"	d
GTEST_PRED_FORMAT2_	src/gtest/gtest.h	/^#define GTEST_PRED_FORMAT2_(/;"	d
GTEST_PRED_FORMAT3_	src/gtest/gtest.h	/^#define GTEST_PRED_FORMAT3_(/;"	d
GTEST_PRED_FORMAT4_	src/gtest/gtest.h	/^#define GTEST_PRED_FORMAT4_(/;"	d
GTEST_PRED_FORMAT5_	src/gtest/gtest.h	/^#define GTEST_PRED_FORMAT5_(/;"	d
GTEST_PROJECT_URL_	src/gtest/gtest.h	/^#define GTEST_PROJECT_URL_ /;"	d
GTEST_REFERENCE_TO_CONST_	src/gtest/gtest.h	/^#define GTEST_REFERENCE_TO_CONST_(/;"	d
GTEST_REGISTERED_TEST_NAMES_	src/gtest/gtest.h	/^# define GTEST_REGISTERED_TEST_NAMES_(/;"	d
GTEST_REMOVE_CONST_	src/gtest/gtest.h	/^#define GTEST_REMOVE_CONST_(/;"	d
GTEST_REMOVE_REFERENCE_	src/gtest/gtest.h	/^#define GTEST_REMOVE_REFERENCE_(/;"	d
GTEST_REMOVE_REFERENCE_AND_CONST_	src/gtest/gtest.h	/^#define GTEST_REMOVE_REFERENCE_AND_CONST_(/;"	d
GTEST_REPEATER_METHOD_	src/gtest/gtest-all.cpp	/^#define GTEST_REPEATER_METHOD_(/;"	d	file:
GTEST_REPEATER_METHOD_	src/gtest/gtest-all.cpp	/^#undef GTEST_REPEATER_METHOD_$/;"	d	file:
GTEST_REVERSE_REPEATER_METHOD_	src/gtest/gtest-all.cpp	/^#define GTEST_REVERSE_REPEATER_METHOD_(/;"	d	file:
GTEST_REVERSE_REPEATER_METHOD_	src/gtest/gtest-all.cpp	/^#undef GTEST_REVERSE_REPEATER_METHOD_$/;"	d	file:
GTEST_SRC	Makefile	/^GTEST_SRC := src\/gtest\/gtest-all.cpp$/;"	m
GTEST_SRC_GTEST_INTERNAL_INL_H_	src/gtest/gtest-all.cpp	/^#define GTEST_SRC_GTEST_INTERNAL_INL_H_$/;"	d	file:
GTEST_SUCCEED	src/gtest/gtest.h	/^#define GTEST_SUCCEED(/;"	d
GTEST_SUCCESS_	src/gtest/gtest.h	/^#define GTEST_SUCCESS_(/;"	d
GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_	src/gtest/gtest.h	/^#define GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_(/;"	d
GTEST_TEMPLATE_	src/gtest/gtest.h	/^# define GTEST_TEMPLATE_ /;"	d
GTEST_TEST	src/gtest/gtest.h	/^#define GTEST_TEST(/;"	d
GTEST_TEST_	src/gtest/gtest.h	/^#define GTEST_TEST_(/;"	d
GTEST_TEST_ANY_THROW_	src/gtest/gtest.h	/^#define GTEST_TEST_ANY_THROW_(/;"	d
GTEST_TEST_BOOLEAN_	src/gtest/gtest.h	/^#define GTEST_TEST_BOOLEAN_(/;"	d
GTEST_TEST_CLASS_NAME_	src/gtest/gtest.h	/^#define GTEST_TEST_CLASS_NAME_(/;"	d
GTEST_TEST_NO_FATAL_FAILURE_	src/gtest/gtest.h	/^#define GTEST_TEST_NO_FATAL_FAILURE_(/;"	d
GTEST_TEST_NO_THROW_	src/gtest/gtest.h	/^#define GTEST_TEST_NO_THROW_(/;"	d
GTEST_TEST_THROW_	src/gtest/gtest.h	/^#define GTEST_TEST_THROW_(/;"	d
GTEST_TUPLE_ELEMENT_	src/gtest/gtest.h	/^#define GTEST_TUPLE_ELEMENT_(/;"	d
GTEST_TUPLE_ELEMENT_	src/gtest/gtest.h	/^#undef GTEST_TUPLE_ELEMENT_$/;"	d
GTEST_TYPED_TEST_CASE_P_STATE_	src/gtest/gtest.h	/^# define GTEST_TYPED_TEST_CASE_P_STATE_(/;"	d
GTEST_TYPE_PARAMS_	src/gtest/gtest.h	/^# define GTEST_TYPE_PARAMS_(/;"	d
GTEST_UNSUPPORTED_DEATH_TEST_	src/gtest/gtest.h	/^# define GTEST_UNSUPPORTED_DEATH_TEST_(/;"	d
GTEST_USES_POSIX_RE	src/gtest/gtest.h	/^# define GTEST_USES_POSIX_RE /;"	d
GTEST_USES_SIMPLE_RE	src/gtest/gtest.h	/^# define GTEST_USES_SIMPLE_RE /;"	d
GTEST_USE_OWN_TR1_TUPLE	src/gtest/gtest.h	/^#  define GTEST_USE_OWN_TR1_TUPLE /;"	d
GTEST_WARNING	src/gtest/gtest.h	/^  GTEST_WARNING,$/;"	e	enum:std::tr1::GTestLogSeverity
GTEST_WIDE_STRING_USES_UTF16_	src/gtest/gtest.h	/^#define GTEST_WIDE_STRING_USES_UTF16_ /;"	d
GTestColor	src/gtest/gtest-all.cpp	/^enum GTestColor {$/;"	g	namespace:testing::internal	file:
GTestFlagSaver	src/gtest/gtest-all.cpp	/^  GTestFlagSaver() {$/;"	f	class:testing::internal::GTestFlagSaver
GTestFlagSaver	src/gtest/gtest-all.cpp	/^class GTestFlagSaver {$/;"	c	namespace:testing::internal	file:
GTestIsInitialized	src/gtest/gtest-all.cpp	/^static bool GTestIsInitialized() { return g_init_gtest_count != 0; }$/;"	f	namespace:testing::internal
GTestLog	src/gtest/gtest-all.cpp	/^GTestLog::GTestLog(GTestLogSeverity severity, const char* file, int line)$/;"	f	class:testing::internal::GTestLog
GTestLog	src/gtest/gtest.h	/^class GTEST_API_ GTestLog {$/;"	c	namespace:std::tr1
GTestLogSeverity	src/gtest/gtest.h	/^enum GTestLogSeverity {$/;"	g	namespace:std::tr1
GTestMutexLock	src/gtest/gtest.h	/^  explicit GTestMutexLock(Mutex*) {}  \/\/ NOLINT$/;"	f	class:std::tr1::GTestMutexLock
GTestMutexLock	src/gtest/gtest.h	/^  explicit GTestMutexLock(MutexBase* mutex)$/;"	f	class:std::tr1::GTestMutexLock
GTestMutexLock	src/gtest/gtest.h	/^class GTestMutexLock {$/;"	c	namespace:std::tr1
GTestShouldProcessSEH	src/gtest/gtest-all.cpp	/^int UnitTestOptions::GTestShouldProcessSEH(DWORD exception_code) {$/;"	f	class:testing::internal::UnitTestOptions
GTestStreamToHelper	src/gtest/gtest.h	/^inline void GTestStreamToHelper(std::ostream* os, const T& val) {$/;"	f
GaussianFiller	include/caffe/filler.hpp	/^  explicit GaussianFiller(const FillerParameter& param)$/;"	f	class:caffe::GaussianFiller
GaussianFiller	include/caffe/filler.hpp	/^class GaussianFiller : public Filler<Dtype> {$/;"	c	namespace:caffe
GaussianFillerTest	src/caffe/test/test_filler.cpp	/^  GaussianFillerTest()$/;"	f	class:caffe::GaussianFillerTest
GaussianFillerTest	src/caffe/test/test_filler.cpp	/^class GaussianFillerTest : public ::testing::Test {$/;"	c	namespace:caffe	file:
GemmTest	src/caffe/test/test_util_blas.cpp	/^class GemmTest : public ::testing::Test {};$/;"	c	namespace:caffe	file:
Generate	src/gtest/gtest-all.cpp	/^UInt32 Random::Generate(UInt32 range) {$/;"	f	class:testing::internal::Random
GenerateUniqueFileName	src/gtest/gtest-all.cpp	/^FilePath FilePath::GenerateUniqueFileName(const FilePath& directory,$/;"	f	class:testing::internal::FilePath
Generator	src/caffe/common.cpp	/^  Generator() : rng_(new caffe::rng_t(cluster_seedgen())) {}$/;"	f	class:caffe::Caffe::RNG::Generator
Generator	src/caffe/common.cpp	/^  explicit Generator(unsigned int seed) : rng_(new caffe::rng_t(seed)) {}$/;"	f	class:caffe::Caffe::RNG::Generator
Generator	src/caffe/common.cpp	/^class Caffe::RNG::Generator {$/;"	c	class:caffe::Caffe::RNG	file:
GeneratorCreationFunc	src/gtest/gtest.h	/^  typedef ParamGenerator<ParamType>(GeneratorCreationFunc)();$/;"	t	class:testing::internal::ParameterizedTestCaseInfo
Get	src/caffe/common.cpp	/^Caffe& Caffe::Get() {$/;"	f	class:caffe::Caffe
Get	src/gtest/gtest-all.cpp	/^  HANDLE Get() const { return handle_; }$/;"	f	class:testing::internal::AutoHandle
GetAbsolutePathToOutputFile	src/gtest/gtest-all.cpp	/^String UnitTestOptions::GetAbsolutePathToOutputFile() {$/;"	f	class:testing::internal::UnitTestOptions
GetActionFunction	src/caffe/util/signal_handler.cpp	/^ActionCallback SignalHandler::GetActionFunction() {$/;"	f	class:caffe::SignalHandler
GetAnsiColorCode	src/gtest/gtest-all.cpp	/^const char* GetAnsiColorCode(GTestColor color) {$/;"	f	namespace:testing::internal
GetArgvs	src/gtest/gtest-all.cpp	/^const ::std::vector<String>& GetArgvs() { return g_argvs; }$/;"	f	namespace:testing::internal
GetBoolAssertionFailureMessage	src/gtest/gtest-all.cpp	/^String GetBoolAssertionFailureMessage(const AssertionResult& assertion_result,$/;"	f	namespace:testing::internal
GetBrewFunction	tools/caffe.cpp	/^static BrewFunction GetBrewFunction(const caffe::string& name) {$/;"	f	file:
GetCapturedStderr	src/gtest/gtest-all.cpp	/^String GetCapturedStderr() { return GetCapturedStream(&g_captured_stderr); }$/;"	f	namespace:testing::internal
GetCapturedStdout	src/gtest/gtest-all.cpp	/^String GetCapturedStdout() { return GetCapturedStream(&g_captured_stdout); }$/;"	f	namespace:testing::internal
GetCapturedStream	src/gtest/gtest-all.cpp	/^String GetCapturedStream(CapturedStream** captured_stream) {$/;"	f	namespace:testing::internal
GetCapturedString	src/gtest/gtest-all.cpp	/^  String GetCapturedString() {$/;"	f	class:testing::internal::CapturedStream
GetColorAttribute	src/gtest/gtest-all.cpp	/^WORD GetColorAttribute(GTestColor color) {$/;"	f	namespace:testing::internal
GetConvolutionLayer	src/caffe/layer_factory.cpp	/^shared_ptr<Layer<Dtype> > GetConvolutionLayer($/;"	f	namespace:caffe
GetCurrentDir	src/gtest/gtest-all.cpp	/^FilePath FilePath::GetCurrentDir() {$/;"	f	class:testing::internal::FilePath
GetCurrentExecutableName	src/gtest/gtest-all.cpp	/^FilePath GetCurrentExecutableName() {$/;"	f	namespace:testing::internal
GetCurrentOsStackTraceExceptTop	src/gtest/gtest-all.cpp	/^String GetCurrentOsStackTraceExceptTop(UnitTest* \/*unit_test*\/,$/;"	f	namespace:testing::internal
GetDB	src/caffe/util/db.cpp	/^DB* GetDB(DataParameter::DB backend) {$/;"	f	namespace:caffe::db
GetDB	src/caffe/util/db.cpp	/^DB* GetDB(const string& backend) {$/;"	f	namespace:caffe::db
GetElementOr	src/gtest/gtest-all.cpp	/^inline E GetElementOr(const std::vector<E>& v, int i, E default_value) {$/;"	f	namespace:testing::internal
GetEnv	src/gtest/gtest.h	/^inline const char* GetEnv(const char* name) {$/;"	f	namespace:std::tr1::posix
GetEnviron	src/gtest/gtest-all.cpp	/^inline char** GetEnviron() { return environ; }$/;"	f	namespace:testing::internal
GetEnviron	src/gtest/gtest-all.cpp	/^inline char** GetEnviron() {$/;"	f	namespace:testing::internal
GetFileSize	src/gtest/gtest-all.cpp	/^size_t CapturedStream::GetFileSize(FILE* file) {$/;"	f	class:testing::internal::CapturedStream
GetFiller	include/caffe/filler.hpp	/^Filler<Dtype>* GetFiller(const FillerParameter& param) {$/;"	f	namespace:caffe
GetGlobalTestPartResultReporter	src/gtest/gtest-all.cpp	/^UnitTestImpl::GetGlobalTestPartResultReporter() {$/;"	f	class:testing::internal::UnitTestImpl
GetHeaderGuardCPPVariable	scripts/cpp_lint.py	/^def GetHeaderGuardCPPVariable(filename):$/;"	f
GetInstance	src/gtest/gtest-all.cpp	/^UnitTest * UnitTest::GetInstance() {$/;"	f	class:testing::UnitTest
GetLRNLayer	src/caffe/layer_factory.cpp	/^shared_ptr<Layer<Dtype> > GetLRNLayer(const LayerParameter& param) {$/;"	f	namespace:caffe
GetLastErrnoDescription	src/gtest/gtest-all.cpp	/^String GetLastErrnoDescription() {$/;"	f	namespace:testing::internal
GetLearningRate	src/caffe/solvers/sgd_solver.cpp	/^Dtype SGDSolver<Dtype>::GetLearningRate() {$/;"	f	class:caffe::SGDSolver
GetLineWidth	scripts/cpp_lint.py	/^def GetLineWidth(line):$/;"	f
GetMutableTestCase	src/gtest/gtest-all.cpp	/^  TestCase* GetMutableTestCase(int i) {$/;"	f	class:testing::internal::UnitTestImpl
GetMutableTestCase	src/gtest/gtest-all.cpp	/^TestCase* UnitTest::GetMutableTestCase(int i) {$/;"	f	class:testing::UnitTest
GetMutableTestInfo	src/gtest/gtest-all.cpp	/^TestInfo* TestCase::GetMutableTestInfo(int i) {$/;"	f	class:testing::TestCase
GetNextRandomSeed	src/gtest/gtest-all.cpp	/^inline int GetNextRandomSeed(int seed) {$/;"	f	namespace:testing::internal
GetObjAndGradient	include/caffe/test/test_gradient_check_util.hpp	/^Dtype GradientChecker<Dtype>::GetObjAndGradient(const Layer<Dtype>& layer,$/;"	f	class:caffe::GradientChecker
GetOrCreateValue	src/gtest/gtest.h	/^  T* GetOrCreateValue() const {$/;"	f	class:std::tr1::ThreadLocal
GetOutputFormat	src/gtest/gtest-all.cpp	/^String UnitTestOptions::GetOutputFormat() {$/;"	f	class:testing::internal::UnitTestOptions
GetParam	src/gtest/gtest.h	/^  const ParamType& GetParam() const { return *parameter_; }$/;"	f	class:testing::WithParamInterface
GetPoolingLayer	src/caffe/layer_factory.cpp	/^shared_ptr<Layer<Dtype> > GetPoolingLayer(const LayerParameter& param) {$/;"	f	namespace:caffe
GetPoolingParam	src/caffe/layers/spp_layer.cpp	/^LayerParameter SPPLayer<Dtype>::GetPoolingParam(const int pyramid_level,$/;"	f	class:caffe::SPPLayer
GetPrefixUntilComma	src/gtest/gtest.h	/^inline String GetPrefixUntilComma(const char* str) {$/;"	f	namespace:testing::internal
GetPreviousNonBlankLine	scripts/cpp_lint.py	/^def GetPreviousNonBlankLine(clean_lines, linenum):$/;"	f
GetPythonLayer	src/caffe/layer_factory.cpp	/^shared_ptr<Layer<Dtype> > GetPythonLayer(const LayerParameter& param) {$/;"	f	namespace:caffe
GetRandomSeedFromFlag	src/gtest/gtest-all.cpp	/^inline int GetRandomSeedFromFlag(Int32 random_seed_flag) {$/;"	f	namespace:testing::internal
GetReLULayer	src/caffe/layer_factory.cpp	/^shared_ptr<Layer<Dtype> > GetReLULayer(const LayerParameter& param) {$/;"	f	namespace:caffe
GetRequestedAction	src/caffe/solver.cpp	/^SolverAction::Enum Solver<Dtype>::GetRequestedAction() {$/;"	f	class:caffe::Solver
GetRequestedAction	tools/caffe.cpp	/^caffe::SolverAction::Enum GetRequestedAction($/;"	f
GetSigmoidLayer	src/caffe/layer_factory.cpp	/^shared_ptr<Layer<Dtype> > GetSigmoidLayer(const LayerParameter& param) {$/;"	f	namespace:caffe
GetSoftmaxLayer	src/caffe/layer_factory.cpp	/^shared_ptr<Layer<Dtype> > GetSoftmaxLayer(const LayerParameter& param) {$/;"	f	namespace:caffe
GetSolverFromFile	python/caffe/_caffe.cpp	/^Solver<Dtype>* GetSolverFromFile(const string& filename) {$/;"	f	namespace:caffe
GetStatusFileDescriptor	src/gtest/gtest-all.cpp	/^int GetStatusFileDescriptor(unsigned int parent_process_id,$/;"	f	namespace:testing::internal
GetStream	src/gtest/gtest.h	/^  ::std::ostream& GetStream() { return ::std::cerr; }$/;"	f	class:std::tr1::GTestLog
GetString	src/gtest/gtest.h	/^  internal::String GetString() const {$/;"	f	class:testing::Message
GetTanHLayer	src/caffe/layer_factory.cpp	/^shared_ptr<Layer<Dtype> > GetTanHLayer(const LayerParameter& param) {$/;"	f	namespace:caffe
GetTestCase	src/gtest/gtest-all.cpp	/^  const TestCase* GetTestCase(int i) const {$/;"	f	class:testing::internal::UnitTestImpl
GetTestCase	src/gtest/gtest-all.cpp	/^TestCase* UnitTestImpl::GetTestCase(const char* test_case_name,$/;"	f	class:testing::internal::UnitTestImpl
GetTestCase	src/gtest/gtest-all.cpp	/^const TestCase* UnitTest::GetTestCase(int i) const {$/;"	f	class:testing::UnitTest
GetTestCaseName	src/gtest/gtest.h	/^  virtual const string& GetTestCaseName() const { return test_case_name_; }$/;"	f	class:testing::internal::ParameterizedTestCaseInfo
GetTestCasePatternHolder	src/gtest/gtest.h	/^  ParameterizedTestCaseInfo<TestCase>* GetTestCasePatternHolder($/;"	f	class:testing::internal::ParameterizedTestCaseRegistry
GetTestCaseTypeId	src/gtest/gtest.h	/^  virtual TypeId GetTestCaseTypeId() const { return GetTypeId<TestCase>(); }$/;"	f	class:testing::internal::ParameterizedTestCaseInfo
GetTestInfo	src/gtest/gtest-all.cpp	/^const TestInfo* TestCase::GetTestInfo(int i) const {$/;"	f	class:testing::TestCase
GetTestPartResult	src/gtest/gtest-all.cpp	/^const TestPartResult& TestPartResultArray::GetTestPartResult(int index) const {$/;"	f	class:testing::TestPartResultArray
GetTestPartResult	src/gtest/gtest-all.cpp	/^const TestPartResult& TestResult::GetTestPartResult(int i) const {$/;"	f	class:testing::TestResult
GetTestPartResultReporterForCurrentThread	src/gtest/gtest-all.cpp	/^UnitTestImpl::GetTestPartResultReporterForCurrentThread() {$/;"	f	class:testing::internal::UnitTestImpl
GetTestProperty	src/gtest/gtest-all.cpp	/^const TestProperty& TestResult::GetTestProperty(int i) const {$/;"	f	class:testing::TestResult
GetTestTypeId	src/gtest/gtest-all.cpp	/^TypeId GetTestTypeId() {$/;"	f	namespace:testing::internal
GetThreadCount	src/gtest/gtest-all.cpp	/^size_t GetThreadCount() {$/;"	f	namespace:testing::internal
GetTimeInMillis	src/gtest/gtest-all.cpp	/^TimeInMillis GetTimeInMillis() {$/;"	f	namespace:testing::internal
GetTypeId	src/gtest/gtest.h	/^TypeId GetTypeId() {$/;"	f	namespace:testing::internal
GetTypeName	src/gtest/gtest.h	/^String GetTypeName() {$/;"	f	namespace:testing::internal
GetUnitTestImpl	src/gtest/gtest-all.cpp	/^inline UnitTestImpl* GetUnitTestImpl() {$/;"	f	namespace:testing::internal
GlobalInit	src/caffe/common.cpp	/^void GlobalInit(int* pargc, char*** pargv) {$/;"	f	namespace:caffe
GoogleTestFailureException	src/gtest/gtest-all.cpp	/^  explicit GoogleTestFailureException(const TestPartResult& failure)$/;"	f	class:testing::GoogleTestFailureException
GoogleTestFailureException	src/gtest/gtest-all.cpp	/^class GoogleTestFailureException : public ::std::runtime_error {$/;"	c	namespace:testing	file:
GotSIGHUP	src/caffe/util/signal_handler.cpp	/^  bool GotSIGHUP() {$/;"	f	namespace:__anon1
GotSIGINT	src/caffe/util/signal_handler.cpp	/^  bool GotSIGINT() {$/;"	f	namespace:__anon1
GradientBasedSolverTest	src/caffe/test/test_gradient_based_solver.cpp	/^  GradientBasedSolverTest() :$/;"	f	class:caffe::GradientBasedSolverTest
GradientBasedSolverTest	src/caffe/test/test_gradient_based_solver.cpp	/^class GradientBasedSolverTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
GradientChecker	include/caffe/test/test_gradient_check_util.hpp	/^  GradientChecker(const Dtype stepsize, const Dtype threshold,$/;"	f	class:caffe::GradientChecker
GradientChecker	include/caffe/test/test_gradient_check_util.hpp	/^class GradientChecker {$/;"	c	namespace:caffe
HDF5DataLayer	include/caffe/layers/hdf5_data_layer.hpp	/^  explicit HDF5DataLayer(const LayerParameter& param)$/;"	f	class:caffe::HDF5DataLayer
HDF5DataLayer	include/caffe/layers/hdf5_data_layer.hpp	/^class HDF5DataLayer : public Layer<Dtype> {$/;"	c	namespace:caffe
HDF5DataLayerTest	src/caffe/test/test_hdf5data_layer.cpp	/^  HDF5DataLayerTest()$/;"	f	class:caffe::HDF5DataLayerTest
HDF5DataLayerTest	src/caffe/test/test_hdf5data_layer.cpp	/^class HDF5DataLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
HDF5OutputLayer	include/caffe/layers/hdf5_output_layer.hpp	/^  explicit HDF5OutputLayer(const LayerParameter& param)$/;"	f	class:caffe::HDF5OutputLayer
HDF5OutputLayer	include/caffe/layers/hdf5_output_layer.hpp	/^class HDF5OutputLayer : public Layer<Dtype> {$/;"	c	namespace:caffe
HDF5OutputLayerTest	src/caffe/test/test_hdf5_output_layer.cpp	/^  HDF5OutputLayerTest()$/;"	f	class:caffe::HDF5OutputLayerTest
HDF5OutputLayerTest	src/caffe/test/test_hdf5_output_layer.cpp	/^class HDF5OutputLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
HDF5_DATA_DATASET_NAME	include/caffe/layers/hdf5_output_layer.hpp	/^#define HDF5_DATA_DATASET_NAME /;"	d
HDF5_DATA_LABEL_NAME	include/caffe/layers/hdf5_output_layer.hpp	/^#define HDF5_DATA_LABEL_NAME /;"	d
HEAD_AT_CPU	include/caffe/syncedmem.hpp	/^  enum SyncedHead { UNINITIALIZED, HEAD_AT_CPU, HEAD_AT_GPU, SYNCED };$/;"	e	enum:caffe::SyncedMemory::SyncedHead
HEAD_AT_GPU	include/caffe/syncedmem.hpp	/^  enum SyncedHead { UNINITIALIZED, HEAD_AT_CPU, HEAD_AT_GPU, SYNCED };$/;"	e	enum:caffe::SyncedMemory::SyncedHead
HONOR_SHARDING_PROTOCOL	src/gtest/gtest-all.cpp	/^    HONOR_SHARDING_PROTOCOL,$/;"	e	enum:testing::internal::UnitTestImpl::ReactionToSharding	file:
HRESULTFailureHelper	src/gtest/gtest-all.cpp	/^AssertionResult HRESULTFailureHelper(const char* expr,$/;"	f	namespace:testing::internal::__anon3
HandleExceptionsInMethodIfSupported	src/gtest/gtest-all.cpp	/^Result HandleExceptionsInMethodIfSupported($/;"	f	namespace:testing::internal
HandleSehExceptionsInMethodIfSupported	src/gtest/gtest-all.cpp	/^Result HandleSehExceptionsInMethodIfSupported($/;"	f	namespace:testing::internal
HasFailure	src/gtest/gtest.h	/^  static bool HasFailure() { return HasFatalFailure() || HasNonfatalFailure(); }$/;"	f	class:testing::Test
HasFatalFailure	src/gtest/gtest-all.cpp	/^bool Test::HasFatalFailure() {$/;"	f	class:testing::Test
HasFatalFailure	src/gtest/gtest-all.cpp	/^bool TestResult::HasFatalFailure() const {$/;"	f	class:testing::TestResult
HasGoogleTestFlagPrefix	src/gtest/gtest-all.cpp	/^static bool HasGoogleTestFlagPrefix(const char* str) {$/;"	f	namespace:testing::internal
HasNCCL	python/caffe/_caffe.cpp	/^bool HasNCCL() {$/;"	f	namespace:caffe
HasNewFatalFailureHelper	src/gtest/gtest-all.cpp	/^HasNewFatalFailureHelper::HasNewFatalFailureHelper()$/;"	f	class:testing::internal::HasNewFatalFailureHelper
HasNewFatalFailureHelper	src/gtest/gtest.h	/^class GTEST_API_ HasNewFatalFailureHelper$/;"	c	namespace:testing::internal
HasNonfatalFailure	src/gtest/gtest-all.cpp	/^bool Test::HasNonfatalFailure() {$/;"	f	class:testing::Test
HasNonfatalFailure	src/gtest/gtest-all.cpp	/^bool TestResult::HasNonfatalFailure() const {$/;"	f	class:testing::TestResult
HasOneFailure	src/gtest/gtest-all.cpp	/^AssertionResult HasOneFailure(const char* \/* results_expr *\/,$/;"	f	namespace:testing::internal
HasSameFixtureClass	src/gtest/gtest-all.cpp	/^bool Test::HasSameFixtureClass() {$/;"	f	class:testing::Test
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types1
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types10
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types11
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types12
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types13
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types14
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types15
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types16
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types17
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types18
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types19
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types2
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types20
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types21
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types22
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types23
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types24
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types25
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types26
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types27
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types28
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types29
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types3
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types30
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types31
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types32
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types33
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types34
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types35
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types36
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types37
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types38
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types39
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types4
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types40
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types41
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types42
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types43
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types44
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types45
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types46
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types47
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types48
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types49
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types5
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types50
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types6
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types7
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types8
Head	src/gtest/gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types9
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates1
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates10
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates11
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates12
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates13
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates14
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates15
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates16
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates17
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates18
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates19
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates2
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates20
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates21
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates22
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates23
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates24
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates25
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates26
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates27
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates28
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates29
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates3
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates30
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates31
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates32
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates33
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates34
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates35
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates36
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates37
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates38
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates39
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates4
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates40
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates41
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates42
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates43
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates44
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates45
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates46
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates47
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates48
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates49
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates5
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates50
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates6
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates7
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates8
Head	src/gtest/gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates9
HingeLossLayer	include/caffe/layers/hinge_loss_layer.hpp	/^  explicit HingeLossLayer(const LayerParameter& param)$/;"	f	class:caffe::HingeLossLayer
HingeLossLayer	include/caffe/layers/hinge_loss_layer.hpp	/^class HingeLossLayer : public LossLayer<Dtype> {$/;"	c	namespace:caffe
HingeLossLayerTest	src/caffe/test/test_hinge_loss_layer.cpp	/^  HingeLossLayerTest()$/;"	f	class:caffe::HingeLossLayerTest
HingeLossLayerTest	src/caffe/test/test_hinge_loss_layer.cpp	/^class HingeLossLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
HookupHandler	src/caffe/util/signal_handler.cpp	/^  void HookupHandler() {$/;"	f	namespace:__anon1
IGNORE_SHARDING_PROTOCOL	src/gtest/gtest-all.cpp	/^    IGNORE_SHARDING_PROTOCOL$/;"	e	enum:testing::internal::UnitTestImpl::ReactionToSharding	file:
IMAGE_INDEX	include/caffe/layers/window_data_layer.hpp	/^  enum WindowField { IMAGE_INDEX, LABEL, OVERLAP, X1, Y1, X2, Y2, NUM };$/;"	e	enum:caffe::WindowDataLayer::WindowField
INCLUDE_CAFFE_UTIL_SIGNAL_HANDLER_H_	include/caffe/util/signal_handler.h	/^#define INCLUDE_CAFFE_UTIL_SIGNAL_HANDLER_H_$/;"	d
INPUT_DATA_SIZE	src/caffe/test/test_batch_norm_layer.cpp	/^#define INPUT_DATA_SIZE /;"	d	file:
INSTANTIATE_CLASS	include/caffe/common.hpp	/^#define INSTANTIATE_CLASS(/;"	d
INSTANTIATE_LAYER_GPU_BACKWARD	include/caffe/common.hpp	/^#define INSTANTIATE_LAYER_GPU_BACKWARD(/;"	d
INSTANTIATE_LAYER_GPU_FORWARD	include/caffe/common.hpp	/^#define INSTANTIATE_LAYER_GPU_FORWARD(/;"	d
INSTANTIATE_LAYER_GPU_FUNCS	include/caffe/common.hpp	/^#define INSTANTIATE_LAYER_GPU_FUNCS(/;"	d
INSTANTIATE_TEST_CASE_P	src/gtest/gtest.h	/^# define INSTANTIATE_TEST_CASE_P(/;"	d
INSTANTIATE_TYPED_TEST_CASE_P	src/gtest/gtest.h	/^# define INSTANTIATE_TYPED_TEST_CASE_P(/;"	d
INTERCEPT_ALL_THREADS	src/gtest/gtest-all.cpp	/^    INTERCEPT_ALL_THREADS           \/\/ Intercepts all failures.$/;"	e	enum:testing::ScopedFakeTestPartResultReporter::InterceptMode	file:
INTERCEPT_ONLY_CURRENT_THREAD	src/gtest/gtest-all.cpp	/^    INTERCEPT_ONLY_CURRENT_THREAD,  \/\/ Intercepts only thread local failures.$/;"	e	enum:testing::ScopedFakeTestPartResultReporter::InterceptMode	file:
IN_PROGRESS	src/gtest/gtest-all.cpp	/^enum DeathTestOutcome { IN_PROGRESS, DIED, LIVED, RETURNED, THREW };$/;"	e	enum:testing::internal::DeathTestOutcome	file:
IOTest	src/caffe/test/test_io.cpp	/^class IOTest : public ::testing::Test {};$/;"	c	namespace:caffe	file:
Im2colLayer	include/caffe/layers/im2col_layer.hpp	/^  explicit Im2colLayer(const LayerParameter& param)$/;"	f	class:caffe::Im2colLayer
Im2colLayer	include/caffe/layers/im2col_layer.hpp	/^class Im2colLayer : public Layer<Dtype> {$/;"	c	namespace:caffe
Im2colLayerTest	src/caffe/test/test_im2col_layer.cpp	/^  Im2colLayerTest()$/;"	f	class:caffe::Im2colLayerTest
Im2colLayerTest	src/caffe/test/test_im2col_layer.cpp	/^class Im2colLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
Image	examples/pycaffe/layers/pascal_multilabel_datalayers.py	/^from PIL import Image$/;"	i
Image	examples/web_demo/app.py	/^from PIL import Image$/;"	i
Image	examples/web_demo/exifutil.py	/^from PIL import Image$/;"	i
Image	tools/extra/resize_and_crop_images.py	/^from PIL import Image$/;"	i
ImageDataLayer	include/caffe/layers/image_data_layer.hpp	/^  explicit ImageDataLayer(const LayerParameter& param)$/;"	f	class:caffe::ImageDataLayer
ImageDataLayer	include/caffe/layers/image_data_layer.hpp	/^class ImageDataLayer : public BasePrefetchingDataLayer<Dtype> {$/;"	c	namespace:caffe
ImageDataLayerTest	src/caffe/test/test_image_data_layer.cpp	/^  ImageDataLayerTest()$/;"	f	class:caffe::ImageDataLayerTest
ImageDataLayerTest	src/caffe/test/test_image_data_layer.cpp	/^class ImageDataLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
ImagenetClassifier	examples/web_demo/app.py	/^class ImagenetClassifier(object):$/;"	c
ImplicitCast_	src/gtest/gtest.h	/^inline To ImplicitCast_(To x) { return x; }$/;"	f	namespace:std::tr1
ImplicitlyConvertible	src/gtest/gtest.h	/^class ImplicitlyConvertible {$/;"	c	namespace:testing::internal
InNamespaceBody	scripts/cpp_lint.py	/^  def InNamespaceBody(self):$/;"	m	class:_NestingState
IncrementErrorCount	scripts/cpp_lint.py	/^  def IncrementErrorCount(self, category):$/;"	m	class:_CppLintState
InferBlobShape	src/caffe/data_transformer.cpp	/^vector<int> DataTransformer<Dtype>::InferBlobShape($/;"	f	class:caffe::DataTransformer
InferBlobShape	src/caffe/data_transformer.cpp	/^vector<int> DataTransformer<Dtype>::InferBlobShape(const Datum& datum) {$/;"	f	class:caffe::DataTransformer
InferBlobShape	src/caffe/data_transformer.cpp	/^vector<int> DataTransformer<Dtype>::InferBlobShape(const cv::Mat& cv_img) {$/;"	f	class:caffe::DataTransformer
Infinity	src/gtest/gtest.h	/^  static RawType Infinity() {$/;"	f	class:testing::internal::FloatingPoint
InfogainLossLayer	include/caffe/layers/infogain_loss_layer.hpp	/^  explicit InfogainLossLayer(const LayerParameter& param)$/;"	f	class:caffe::InfogainLossLayer
InfogainLossLayer	include/caffe/layers/infogain_loss_layer.hpp	/^class InfogainLossLayer : public LossLayer<Dtype> {$/;"	c	namespace:caffe
InfogainLossLayerTest	src/caffe/test/test_infogain_loss_layer.cpp	/^  InfogainLossLayerTest()$/;"	f	class:caffe::InfogainLossLayerTest
InfogainLossLayerTest	src/caffe/test/test_infogain_loss_layer.cpp	/^class InfogainLossLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
Init	src/caffe/net.cpp	/^void Net<Dtype>::Init(const NetParameter& in_param) {$/;"	f	class:caffe::Net
Init	src/caffe/parallel.cpp	/^void NCCL<Dtype>::Init() {$/;"	f	class:caffe::NCCL
Init	src/caffe/solver.cpp	/^void Solver<Dtype>::Init(const SolverParameter& param) {$/;"	f	class:caffe::Solver
Init	src/caffe/util/benchmark.cpp	/^void Timer::Init() {$/;"	f	class:caffe::Timer
Init	src/gtest/gtest-all.cpp	/^void RE::Init(const char* regex) {$/;"	f	class:testing::internal::RE
Init	src/gtest/gtest-all.cpp	/^void ScopedFakeTestPartResultReporter::Init() {$/;"	f	class:testing::ScopedFakeTestPartResultReporter
Init	src/gtest/gtest.h	/^  void Init(const Element* array, size_t a_size, RelationToSource relation) {$/;"	f	class:testing::internal::NativeArray
InitAllInOneNet	src/caffe/test/test_net.cpp	/^  virtual void InitAllInOneNet(Phase phase = caffe::TRAIN,$/;"	f	class:caffe::NetTest
InitDeathTestSubprocessControlInfo	src/gtest/gtest-all.cpp	/^  void InitDeathTestSubprocessControlInfo() {$/;"	f	class:testing::internal::UnitTestImpl
InitDiffDataSharedWeightsNet	src/caffe/test/test_net.cpp	/^  virtual void InitDiffDataSharedWeightsNet() {$/;"	f	class:caffe::NetTest
InitDiffDataUnsharedWeightsNet	src/caffe/test/test_net.cpp	/^  virtual void InitDiffDataUnsharedWeightsNet() {$/;"	f	class:caffe::NetTest
InitForcePropNet	src/caffe/test/test_net.cpp	/^  virtual void InitForcePropNet(bool test_force_true) {$/;"	f	class:caffe::NetTest
InitGoogleTest	src/gtest/gtest-all.cpp	/^void InitGoogleTest(int* argc, char** argv) {$/;"	f	namespace:testing
InitGoogleTest	src/gtest/gtest-all.cpp	/^void InitGoogleTest(int* argc, wchar_t** argv) {$/;"	f	namespace:testing
InitGoogleTestImpl	src/gtest/gtest-all.cpp	/^void InitGoogleTestImpl(int* argc, CharType** argv) {$/;"	f	namespace:testing::internal
InitLog	python/caffe/_caffe.cpp	/^void InitLog() {$/;"	f	namespace:caffe
InitLogLevel	python/caffe/_caffe.cpp	/^void InitLogLevel(int level) {$/;"	f	namespace:caffe
InitLogLevelPipe	python/caffe/_caffe.cpp	/^void InitLogLevelPipe(int level, bool stderr) {$/;"	f	namespace:caffe
InitNetFromProtoFileWithState	src/caffe/test/test_net.cpp	/^  virtual void InitNetFromProtoFileWithState(const string& proto,$/;"	f	class:caffe::NetTest
InitNetFromProtoString	src/caffe/test/test_net.cpp	/^  virtual void InitNetFromProtoString(const string& proto) {$/;"	f	class:caffe::NetTest
InitRand	src/caffe/data_transformer.cpp	/^void DataTransformer<Dtype>::InitRand() {$/;"	f	class:caffe::DataTransformer
InitReshapableNet	src/caffe/test/test_net.cpp	/^  virtual void InitReshapableNet() {$/;"	f	class:caffe::NetTest
InitSharedWeightsNet	src/caffe/test/test_net.cpp	/^  virtual void InitSharedWeightsNet() {$/;"	f	class:caffe::NetTest
InitSingleProcess	src/caffe/parallel.cpp	/^void NCCL<Dtype>::InitSingleProcess(vector<NCCL<Dtype>*>* nccls) {$/;"	f	class:caffe::NCCL
InitSkipPropNet	src/caffe/test/test_net.cpp	/^  virtual void InitSkipPropNet(bool test_skip_true) {$/;"	f	class:caffe::NetTest
InitSolver	src/caffe/test/test_gradient_based_solver.cpp	/^  virtual void InitSolver(const SolverParameter& param) {$/;"	f	class:caffe::AdaDeltaSolverTest
InitSolver	src/caffe/test/test_gradient_based_solver.cpp	/^  virtual void InitSolver(const SolverParameter& param) {$/;"	f	class:caffe::AdaGradSolverTest
InitSolver	src/caffe/test/test_gradient_based_solver.cpp	/^  virtual void InitSolver(const SolverParameter& param) {$/;"	f	class:caffe::AdamSolverTest
InitSolver	src/caffe/test/test_gradient_based_solver.cpp	/^  virtual void InitSolver(const SolverParameter& param) {$/;"	f	class:caffe::NesterovSolverTest
InitSolver	src/caffe/test/test_gradient_based_solver.cpp	/^  virtual void InitSolver(const SolverParameter& param) {$/;"	f	class:caffe::RMSPropSolverTest
InitSolver	src/caffe/test/test_gradient_based_solver.cpp	/^  virtual void InitSolver(const SolverParameter& param) {$/;"	f	class:caffe::SGDSolverTest
InitSolverFromProtoString	src/caffe/test/test_gradient_based_solver.cpp	/^  virtual void InitSolverFromProtoString(const string& proto) {$/;"	f	class:caffe::GradientBasedSolverTest
InitSolverFromProtoString	src/caffe/test/test_solver.cpp	/^  virtual void InitSolverFromProtoString(const string& proto) {$/;"	f	class:caffe::SolverTest
InitTestNets	src/caffe/solver.cpp	/^void Solver<Dtype>::InitTestNets() {$/;"	f	class:caffe::Solver
InitTinyNet	src/caffe/test/test_net.cpp	/^  virtual void InitTinyNet(const bool force_backward = false,$/;"	f	class:caffe::NetTest
InitTinyNetEuclidean	src/caffe/test/test_net.cpp	/^  virtual void InitTinyNetEuclidean(const bool force_backward = false) {$/;"	f	class:caffe::NetTest
InitTrainNet	src/caffe/solver.cpp	/^void Solver<Dtype>::InitTrainNet() {$/;"	f	class:caffe::Solver
InitTrickyNet	src/caffe/test/test_net.cpp	/^  virtual void InitTrickyNet(Dtype* loss_weight = NULL) {$/;"	f	class:caffe::NetTest
InitUnsharedWeightsNet	src/caffe/test/test_net.cpp	/^  virtual void InitUnsharedWeightsNet(const Dtype* loss_weight = NULL,$/;"	f	class:caffe::NetTest
InnerProductLayer	include/caffe/layers/inner_product_layer.hpp	/^  explicit InnerProductLayer(const LayerParameter& param)$/;"	f	class:caffe::InnerProductLayer
InnerProductLayer	include/caffe/layers/inner_product_layer.hpp	/^class InnerProductLayer : public Layer<Dtype> {$/;"	c	namespace:caffe
InnerProductLayerTest	src/caffe/test/test_inner_product_layer.cpp	/^  InnerProductLayerTest()$/;"	f	class:caffe::InnerProductLayerTest
InnerProductLayerTest	src/caffe/test/test_inner_product_layer.cpp	/^class InnerProductLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
InnermostClass	scripts/cpp_lint.py	/^  def InnermostClass(self):$/;"	m	class:_NestingState
InputLayer	include/caffe/layers/input_layer.hpp	/^  explicit InputLayer(const LayerParameter& param)$/;"	f	class:caffe::InputLayer
InputLayer	include/caffe/layers/input_layer.hpp	/^class InputLayer : public Layer<Dtype> {$/;"	c	namespace:caffe
InsertSplits	src/caffe/util/insert_splits.cpp	/^void InsertSplits(const NetParameter& param, NetParameter* param_split) {$/;"	f	namespace:caffe
InstantiationContainer	src/gtest/gtest.h	/^      InstantiationContainer;$/;"	t	class:testing::internal::ParameterizedTestCaseInfo
Int	src/gtest/gtest.h	/^  typedef __int64 Int;$/;"	t	class:std::tr1::TypeWithSize
Int	src/gtest/gtest.h	/^  typedef int Int;$/;"	t	class:std::tr1::TypeWithSize
Int32	src/gtest/gtest.h	/^typedef TypeWithSize<4>::Int Int32;$/;"	t	namespace:std::tr1
Int32FromEnvOrDie	src/gtest/gtest-all.cpp	/^Int32 Int32FromEnvOrDie(const char* var, Int32 default_val) {$/;"	f	namespace:testing::internal
Int32FromGTestEnv	src/gtest/gtest-all.cpp	/^Int32 Int32FromGTestEnv(const char* flag, Int32 default_value) {$/;"	f	namespace:testing::internal
Int64	src/gtest/gtest.h	/^typedef TypeWithSize<8>::Int Int64;$/;"	t	namespace:std::tr1
InterceptMode	src/gtest/gtest-all.cpp	/^  enum InterceptMode {$/;"	g	class:testing::ScopedFakeTestPartResultReporter	file:
InternalRunDeathTestFlag	src/gtest/gtest.h	/^  InternalRunDeathTestFlag(const String& a_file,$/;"	f	class:testing::internal::InternalRunDeathTestFlag
InternalRunDeathTestFlag	src/gtest/gtest.h	/^class InternalRunDeathTestFlag {$/;"	c	namespace:testing::internal
InternalThread	include/caffe/internal_thread.hpp	/^  InternalThread() : thread_() {}$/;"	f	class:caffe::InternalThread
InternalThread	include/caffe/internal_thread.hpp	/^class InternalThread {$/;"	c	namespace:caffe
InternalThreadEntry	include/caffe/internal_thread.hpp	/^  virtual void InternalThreadEntry() {}$/;"	f	class:caffe::InternalThread
InternalThreadEntry	src/caffe/layers/base_data_layer.cpp	/^void BasePrefetchingDataLayer<Dtype>::InternalThreadEntry() {$/;"	f	class:caffe::BasePrefetchingDataLayer
InternalThreadEntry	src/caffe/parallel.cpp	/^  void InternalThreadEntry() {$/;"	f	class:caffe::Worker
InternalThreadEntry	src/caffe/test/test_internal_thread.cpp	/^  void InternalThreadEntry() {$/;"	f	class:caffe::TestThreadA	file:
InternalThreadEntry	src/caffe/test/test_internal_thread.cpp	/^  void InternalThreadEntry() {$/;"	f	class:caffe::TestThreadB	file:
InternalThreadTest	src/caffe/test/test_internal_thread.cpp	/^class InternalThreadTest : public ::testing::Test {};$/;"	c	namespace:caffe	file:
IsAProtocolMessage	src/gtest/gtest.h	/^struct IsAProtocolMessage$/;"	s	namespace:testing::internal
IsATTY	src/gtest/gtest.h	/^inline int IsATTY(int \/* fd *\/) { return 0; }$/;"	f	namespace:std::tr1::posix
IsATTY	src/gtest/gtest.h	/^inline int IsATTY(int fd) { return _isatty(fd); }$/;"	f	namespace:std::tr1::posix
IsATTY	src/gtest/gtest.h	/^inline int IsATTY(int fd) { return isatty(fd); }$/;"	f	namespace:std::tr1::posix
IsAbsolutePath	src/gtest/gtest-all.cpp	/^bool FilePath::IsAbsolutePath() const {$/;"	f	class:testing::internal::FilePath
IsAlNum	src/gtest/gtest.h	/^inline bool IsAlNum(char ch) {$/;"	f	namespace:std::tr1
IsAlpha	src/gtest/gtest.h	/^inline bool IsAlpha(char ch) {$/;"	f	namespace:std::tr1
IsAsciiDigit	src/gtest/gtest-all.cpp	/^bool IsAsciiDigit(char ch) { return '0' <= ch && ch <= '9'; }$/;"	f	namespace:testing::internal
IsAsciiPunct	src/gtest/gtest-all.cpp	/^bool IsAsciiPunct(char ch) {$/;"	f	namespace:testing::internal
IsAsciiWhiteSpace	src/gtest/gtest-all.cpp	/^bool IsAsciiWhiteSpace(char ch) { return IsInSet(ch, " \\f\\n\\r\\t\\v"); }$/;"	f	namespace:testing::internal
IsAsciiWordChar	src/gtest/gtest-all.cpp	/^bool IsAsciiWordChar(char ch) {$/;"	f	namespace:testing::internal
IsBlankLine	scripts/cpp_lint.py	/^def IsBlankLine(line):$/;"	f
IsContainer	src/gtest/gtest.h	/^typedef int IsContainer;$/;"	t	namespace:testing::internal
IsContainerTest	src/gtest/gtest.h	/^IsContainer IsContainerTest(int \/* dummy *\/,$/;"	f	namespace:testing::internal
IsContainerTest	src/gtest/gtest.h	/^IsNotContainer IsContainerTest(long \/* dummy *\/) { return '\\0'; }$/;"	f	namespace:testing::internal
IsCppString	scripts/cpp_lint.py	/^def IsCppString(line):$/;"	f
IsDigit	src/gtest/gtest.h	/^inline bool IsDigit(char ch) {$/;"	f	namespace:std::tr1
IsDir	src/gtest/gtest.h	/^inline bool IsDir(const StatStruct& st) {$/;"	f	namespace:std::tr1::posix
IsDirectory	src/gtest/gtest-all.cpp	/^bool FilePath::IsDirectory() const {$/;"	f	class:testing::internal::FilePath
IsEmpty	src/gtest/gtest.h	/^  bool IsEmpty() const { return c_str() == NULL || *c_str() == '\\0'; }$/;"	f	class:testing::internal::FilePath
IsErrorSuppressedByNolint	scripts/cpp_lint.py	/^def IsErrorSuppressedByNolint(category, linenum):$/;"	f
IsHRESULTFailure	src/gtest/gtest-all.cpp	/^AssertionResult IsHRESULTFailure(const char* expr, long hr) {  \/\/ NOLINT$/;"	f	namespace:testing::internal
IsHRESULTSuccess	src/gtest/gtest-all.cpp	/^AssertionResult IsHRESULTSuccess(const char* expr, long hr) {  \/\/ NOLINT$/;"	f	namespace:testing::internal
IsInAlphabeticalOrder	scripts/cpp_lint.py	/^  def IsInAlphabeticalOrder(self, clean_lines, linenum, header_path):$/;"	m	class:_IncludeState
IsInSet	src/gtest/gtest-all.cpp	/^bool IsInSet(char ch, const char* str) {$/;"	f	namespace:testing::internal
IsLower	src/gtest/gtest.h	/^inline bool IsLower(char ch) {$/;"	f	namespace:std::tr1
IsNormalizableWhitespace	src/gtest/gtest-all.cpp	/^  static bool IsNormalizableWhitespace(char c) {$/;"	f	class:testing::internal::XmlUnitTestResultPrinter	file:
IsNotContainer	src/gtest/gtest.h	/^typedef char IsNotContainer;$/;"	t	namespace:testing::internal
IsNotSubstring	src/gtest/gtest-all.cpp	/^AssertionResult IsNotSubstring($/;"	f	namespace:testing
IsPathSeparator	src/gtest/gtest-all.cpp	/^static bool IsPathSeparator(char c) {$/;"	f	namespace:testing::internal
IsPrintableAscii	src/gtest/gtest-all.cpp	/^inline bool IsPrintableAscii(wchar_t c) {$/;"	f	namespace:testing::internal
IsRepeat	src/gtest/gtest-all.cpp	/^bool IsRepeat(char ch) { return IsInSet(ch, "?*+"); }$/;"	f	namespace:testing::internal
IsRootDirectory	src/gtest/gtest-all.cpp	/^bool FilePath::IsRootDirectory() const {$/;"	f	class:testing::internal::FilePath
IsSource	scripts/cpp_lint.py	/^  def IsSource(self):$/;"	m	class:FileInfo
IsSpace	src/gtest/gtest.h	/^inline bool IsSpace(char ch) {$/;"	f	namespace:std::tr1
IsSubstring	src/gtest/gtest-all.cpp	/^AssertionResult IsSubstring($/;"	f	namespace:testing
IsSubstringImpl	src/gtest/gtest-all.cpp	/^AssertionResult IsSubstringImpl($/;"	f	namespace:testing::__anon2
IsSubstringPred	src/gtest/gtest-all.cpp	/^bool IsSubstringPred(const StringType& needle,$/;"	f	namespace:testing::__anon2
IsSubstringPred	src/gtest/gtest-all.cpp	/^bool IsSubstringPred(const char* needle, const char* haystack) {$/;"	f	namespace:testing::__anon2
IsSubstringPred	src/gtest/gtest-all.cpp	/^bool IsSubstringPred(const wchar_t* needle, const wchar_t* haystack) {$/;"	f	namespace:testing::__anon2
IsTrue	src/gtest/gtest-all.cpp	/^bool IsTrue(bool condition) { return condition; }$/;"	f	namespace:testing::internal
IsUpper	src/gtest/gtest.h	/^inline bool IsUpper(char ch) {$/;"	f	namespace:std::tr1
IsUtf16SurrogatePair	src/gtest/gtest-all.cpp	/^inline bool IsUtf16SurrogatePair(wchar_t first, wchar_t second) {$/;"	f	namespace:testing::internal
IsValidEscape	src/gtest/gtest-all.cpp	/^bool IsValidEscape(char c) {$/;"	f	namespace:testing::internal
IsValidXmlCharacter	src/gtest/gtest-all.cpp	/^  static bool IsValidXmlCharacter(char c) {$/;"	f	class:testing::internal::XmlUnitTestResultPrinter	file:
IsXDigit	src/gtest/gtest.h	/^inline bool IsXDigit(char ch) {$/;"	f	namespace:std::tr1
Iterator	src/gtest/gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
Iterator	src/gtest/gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
Iterator	src/gtest/gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
Iterator	src/gtest/gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
Iterator	src/gtest/gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
Iterator	src/gtest/gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
Iterator	src/gtest/gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
Iterator	src/gtest/gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
Iterator	src/gtest/gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
Iterator	src/gtest/gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::RangeGenerator::Iterator
Iterator	src/gtest/gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
Iterator	src/gtest/gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
Iterator	src/gtest/gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
Iterator	src/gtest/gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
Iterator	src/gtest/gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
Iterator	src/gtest/gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
Iterator	src/gtest/gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
Iterator	src/gtest/gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
Iterator	src/gtest/gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
Iterator	src/gtest/gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
Iterator	src/gtest/gtest.h	/^    Iterator(const ParamGeneratorInterface<T>* base, T value, int index,$/;"	f	class:testing::internal::RangeGenerator::Iterator
Iterator	src/gtest/gtest.h	/^    Iterator(const ParamGeneratorInterface<T>* base,$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
Iterator	src/gtest/gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator10
Iterator	src/gtest/gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator2
Iterator	src/gtest/gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator3
Iterator	src/gtest/gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator4
Iterator	src/gtest/gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator5
Iterator	src/gtest/gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator6
Iterator	src/gtest/gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator7
Iterator	src/gtest/gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator8
Iterator	src/gtest/gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator9
Iterator	src/gtest/gtest.h	/^  class Iterator : public ParamIteratorInterface<T> {$/;"	c	class:testing::internal::RangeGenerator
Iterator	src/gtest/gtest.h	/^  class Iterator : public ParamIteratorInterface<T> {$/;"	c	class:testing::internal::ValuesInIteratorRangeGenerator
IteratorTraits	src/gtest/gtest.h	/^struct IteratorTraits {$/;"	s	namespace:std::tr1
IteratorTraits	src/gtest/gtest.h	/^struct IteratorTraits<T*> {$/;"	s	namespace:std::tr1
IteratorTraits	src/gtest/gtest.h	/^struct IteratorTraits<const T*> {$/;"	s	namespace:std::tr1
Join	src/gtest/gtest.h	/^  void Join() {$/;"	f	class:std::tr1::ThreadWithParam
K_	include/caffe/layers/embed_layer.hpp	/^  int K_;$/;"	m	class:caffe::EmbedLayer
K_	include/caffe/layers/inner_product_layer.hpp	/^  int K_;$/;"	m	class:caffe::InnerProductLayer
KilledBySignal	src/gtest/gtest-all.cpp	/^KilledBySignal::KilledBySignal(int signum) : signum_(signum) {$/;"	f	class:testing::KilledBySignal
KilledBySignal	src/gtest/gtest.h	/^class GTEST_API_ KilledBySignal {$/;"	c	namespace:testing
L	examples/pycaffe/caffenet.py	/^from caffe import layers as L, params as P, to_proto$/;"	i
L	python/caffe/coord_map.py	/^from caffe import layers as L$/;"	i
L	python/caffe/test/test_coord_map.py	/^from caffe import layers as L$/;"	i
L	python/caffe/test/test_net_spec.py	/^from caffe import layers as L$/;"	i
LABEL	include/caffe/layers/window_data_layer.hpp	/^  enum WindowField { IMAGE_INDEX, LABEL, OVERLAP, X1, Y1, X2, Y2, NUM };$/;"	e	enum:caffe::WindowDataLayer::WindowField
LAYER_STYLE_DEFAULT	python/caffe/draw.py	/^LAYER_STYLE_DEFAULT = {'shape': 'record',$/;"	v
LIBRARIES	Makefile	/^	LIBRARIES := cudart cublas curand$/;"	m
LIBRARY_NAME	Makefile	/^LIBRARY_NAME := $(PROJECT)$/;"	m
LIB_BUILD_DIR	Makefile	/^LIB_BUILD_DIR := $(BUILD_DIR)\/lib$/;"	m
LINE	scripts/travis/configure-make.sh	/^LINE () {$/;"	f
LINT_EXT	Makefile	/^LINT_EXT := lint.txt$/;"	m
LINT_OUTPUTS	Makefile	/^LINT_OUTPUTS := $(addsuffix .$(LINT_EXT), $(addprefix $(LINT_OUTPUT_DIR)\/, $(NONGEN_CXX_SRCS)))$/;"	m
LINT_OUTPUT_DIR	Makefile	/^LINT_OUTPUT_DIR := $(BUILD_DIR)\/.lint$/;"	m
LINT_SCRIPT	Makefile	/^LINT_SCRIPT := scripts\/cpp_lint.py$/;"	m
LINUX	Makefile	/^	LINUX := 1$/;"	m
LIVED	src/gtest/gtest-all.cpp	/^enum DeathTestOutcome { IN_PROGRESS, DIED, LIVED, RETURNED, THREW };$/;"	e	enum:testing::internal::DeathTestOutcome	file:
LMDB	include/caffe/util/db_lmdb.hpp	/^  LMDB() : mdb_env_(NULL) { }$/;"	f	class:caffe::db::LMDB
LMDB	include/caffe/util/db_lmdb.hpp	/^class LMDB : public DB {$/;"	c	namespace:caffe::db
LMDBCursor	include/caffe/util/db_lmdb.hpp	/^  explicit LMDBCursor(MDB_txn* mdb_txn, MDB_cursor* mdb_cursor)$/;"	f	class:caffe::db::LMDBCursor
LMDBCursor	include/caffe/util/db_lmdb.hpp	/^class LMDBCursor : public Cursor {$/;"	c	namespace:caffe::db
LMDBTransaction	include/caffe/util/db_lmdb.hpp	/^  explicit LMDBTransaction(MDB_env* mdb_env)$/;"	f	class:caffe::db::LMDBTransaction
LMDBTransaction	include/caffe/util/db_lmdb.hpp	/^class LMDBTransaction : public Transaction {$/;"	c	namespace:caffe::db
LRNLayer	include/caffe/layers/lrn_layer.hpp	/^  explicit LRNLayer(const LayerParameter& param)$/;"	f	class:caffe::LRNLayer
LRNLayer	include/caffe/layers/lrn_layer.hpp	/^class LRNLayer : public Layer<Dtype> {$/;"	c	namespace:caffe
LRNLayerTest	src/caffe/test/test_lrn_layer.cpp	/^  LRNLayerTest()$/;"	f	class:caffe::LRNLayerTest
LRNLayerTest	src/caffe/test/test_lrn_layer.cpp	/^class LRNLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
LSTMLayer	include/caffe/layers/lstm_layer.hpp	/^  explicit LSTMLayer(const LayerParameter& param)$/;"	f	class:caffe::LSTMLayer
LSTMLayer	include/caffe/layers/lstm_layer.hpp	/^class LSTMLayer : public RecurrentLayer<Dtype> {$/;"	c	namespace:caffe
LSTMLayerTest	src/caffe/test/test_lstm_layer.cpp	/^  LSTMLayerTest() : num_output_(7) {$/;"	f	class:caffe::LSTMLayerTest
LSTMLayerTest	src/caffe/test/test_lstm_layer.cpp	/^class LSTMLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
LSTMUnitLayer	include/caffe/layers/lstm_layer.hpp	/^  explicit LSTMUnitLayer(const LayerParameter& param)$/;"	f	class:caffe::LSTMUnitLayer
LSTMUnitLayer	include/caffe/layers/lstm_layer.hpp	/^class LSTMUnitLayer : public Layer<Dtype> {$/;"	c	namespace:caffe
LastMessage	src/gtest/gtest-all.cpp	/^const char* DeathTest::LastMessage() {$/;"	f	class:testing::internal::DeathTest
Layer	include/caffe/layer.hpp	/^  explicit Layer(const LayerParameter& param)$/;"	f	class:caffe::Layer
Layer	include/caffe/layer.hpp	/^class Layer {$/;"	c	namespace:caffe
Layer	python/caffe/__init__.py	/^from ._caffe import init_log, log, set_mode_cpu, set_mode_gpu, set_device, Layer, get_solver, layer_type_list, set_random_seed, solver_count, set_solver_count, solver_rank, set_solver_rank, set_multiprocess, has_nccl$/;"	i
LayerFactoryTest	src/caffe/test/test_layer_factory.cpp	/^class LayerFactoryTest : public MultiDeviceTest<TypeParam> {};$/;"	c	namespace:caffe	file:
LayerRegisterer	include/caffe/layer_factory.hpp	/^  LayerRegisterer(const string& type,$/;"	f	class:caffe::LayerRegisterer
LayerRegisterer	include/caffe/layer_factory.hpp	/^class LayerRegisterer {$/;"	c	namespace:caffe
LayerRegistry	include/caffe/layer_factory.hpp	/^  LayerRegistry() {}$/;"	f	class:caffe::LayerRegistry
LayerRegistry	include/caffe/layer_factory.hpp	/^class LayerRegistry {$/;"	c	namespace:caffe
LayerSetUp	include/caffe/layer.hpp	/^  virtual void LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::Layer
LayerSetUp	include/caffe/layers/parameter_layer.hpp	/^  virtual void LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ParameterLayer
LayerSetUp	include/caffe/layers/python_layer.hpp	/^  virtual void LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PythonLayer
LayerSetUp	src/caffe/layers/absval_layer.cpp	/^void AbsValLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::AbsValLayer
LayerSetUp	src/caffe/layers/accuracy_layer.cpp	/^void AccuracyLayer<Dtype>::LayerSetUp($/;"	f	class:caffe::AccuracyLayer
LayerSetUp	src/caffe/layers/argmax_layer.cpp	/^void ArgMaxLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ArgMaxLayer
LayerSetUp	src/caffe/layers/base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BaseConvolutionLayer
LayerSetUp	src/caffe/layers/base_data_layer.cpp	/^void BaseDataLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BaseDataLayer
LayerSetUp	src/caffe/layers/base_data_layer.cpp	/^void BasePrefetchingDataLayer<Dtype>::LayerSetUp($/;"	f	class:caffe::BasePrefetchingDataLayer
LayerSetUp	src/caffe/layers/batch_norm_layer.cpp	/^void BatchNormLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BatchNormLayer
LayerSetUp	src/caffe/layers/bias_layer.cpp	/^void BiasLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BiasLayer
LayerSetUp	src/caffe/layers/concat_layer.cpp	/^void ConcatLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ConcatLayer
LayerSetUp	src/caffe/layers/contrastive_loss_layer.cpp	/^void ContrastiveLossLayer<Dtype>::LayerSetUp($/;"	f	class:caffe::ContrastiveLossLayer
LayerSetUp	src/caffe/layers/crop_layer.cpp	/^void CropLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CropLayer
LayerSetUp	src/caffe/layers/cudnn_conv_layer.cpp	/^void CuDNNConvolutionLayer<Dtype>::LayerSetUp($/;"	f	class:caffe::CuDNNConvolutionLayer
LayerSetUp	src/caffe/layers/cudnn_lcn_layer.cpp	/^void CuDNNLCNLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNLCNLayer
LayerSetUp	src/caffe/layers/cudnn_lrn_layer.cpp	/^void CuDNNLRNLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNLRNLayer
LayerSetUp	src/caffe/layers/cudnn_pooling_layer.cpp	/^void CuDNNPoolingLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNPoolingLayer
LayerSetUp	src/caffe/layers/cudnn_relu_layer.cpp	/^void CuDNNReLULayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNReLULayer
LayerSetUp	src/caffe/layers/cudnn_sigmoid_layer.cpp	/^void CuDNNSigmoidLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNSigmoidLayer
LayerSetUp	src/caffe/layers/cudnn_softmax_layer.cpp	/^void CuDNNSoftmaxLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNSoftmaxLayer
LayerSetUp	src/caffe/layers/cudnn_tanh_layer.cpp	/^void CuDNNTanHLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNTanHLayer
LayerSetUp	src/caffe/layers/dropout_layer.cpp	/^void DropoutLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::DropoutLayer
LayerSetUp	src/caffe/layers/dummy_data_layer.cpp	/^void DummyDataLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::DummyDataLayer
LayerSetUp	src/caffe/layers/eltwise_layer.cpp	/^void EltwiseLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::EltwiseLayer
LayerSetUp	src/caffe/layers/embed_layer.cpp	/^void EmbedLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::EmbedLayer
LayerSetUp	src/caffe/layers/exp_layer.cpp	/^void ExpLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ExpLayer
LayerSetUp	src/caffe/layers/filter_layer.cpp	/^void FilterLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::FilterLayer
LayerSetUp	src/caffe/layers/hdf5_data_layer.cpp	/^void HDF5DataLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::HDF5DataLayer
LayerSetUp	src/caffe/layers/hdf5_output_layer.cpp	/^void HDF5OutputLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::HDF5OutputLayer
LayerSetUp	src/caffe/layers/im2col_layer.cpp	/^void Im2colLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::Im2colLayer
LayerSetUp	src/caffe/layers/infogain_loss_layer.cpp	/^void InfogainLossLayer<Dtype>::LayerSetUp($/;"	f	class:caffe::InfogainLossLayer
LayerSetUp	src/caffe/layers/inner_product_layer.cpp	/^void InnerProductLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::InnerProductLayer
LayerSetUp	src/caffe/layers/input_layer.cpp	/^void InputLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::InputLayer
LayerSetUp	src/caffe/layers/log_layer.cpp	/^void LogLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::LogLayer
LayerSetUp	src/caffe/layers/loss_layer.cpp	/^void LossLayer<Dtype>::LayerSetUp($/;"	f	class:caffe::LossLayer
LayerSetUp	src/caffe/layers/lrn_layer.cpp	/^void LRNLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::LRNLayer
LayerSetUp	src/caffe/layers/pooling_layer.cpp	/^void PoolingLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PoolingLayer
LayerSetUp	src/caffe/layers/power_layer.cpp	/^void PowerLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PowerLayer
LayerSetUp	src/caffe/layers/prelu_layer.cpp	/^void PReLULayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PReLULayer
LayerSetUp	src/caffe/layers/recurrent_layer.cpp	/^void RecurrentLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::RecurrentLayer
LayerSetUp	src/caffe/layers/reduction_layer.cpp	/^void ReductionLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ReductionLayer
LayerSetUp	src/caffe/layers/reshape_layer.cpp	/^void ReshapeLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ReshapeLayer
LayerSetUp	src/caffe/layers/scale_layer.cpp	/^void ScaleLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ScaleLayer
LayerSetUp	src/caffe/layers/sigmoid_cross_entropy_loss_layer.cpp	/^void SigmoidCrossEntropyLossLayer<Dtype>::LayerSetUp($/;"	f	class:caffe::SigmoidCrossEntropyLossLayer
LayerSetUp	src/caffe/layers/slice_layer.cpp	/^void SliceLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SliceLayer
LayerSetUp	src/caffe/layers/softmax_loss_layer.cpp	/^void SoftmaxWithLossLayer<Dtype>::LayerSetUp($/;"	f	class:caffe::SoftmaxWithLossLayer
LayerSetUp	src/caffe/layers/spp_layer.cpp	/^void SPPLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SPPLayer
LayerSetUp	src/caffe/layers/threshold_layer.cpp	/^void ThresholdLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ThresholdLayer
LayerTypeList	include/caffe/layer_factory.hpp	/^  static vector<string> LayerTypeList() {$/;"	f	class:caffe::LayerRegistry
LayerTypeListString	include/caffe/layer_factory.hpp	/^  static string LayerTypeListString() {$/;"	f	class:caffe::LayerRegistry
Layers	python/caffe/net_spec.py	/^class Layers(object):$/;"	c
LegacyShape	include/caffe/blob.hpp	/^  inline int LegacyShape(int index) const {$/;"	f	class:caffe::Blob
LevelDB	include/caffe/util/db_leveldb.hpp	/^  LevelDB() : db_(NULL) { }$/;"	f	class:caffe::db::LevelDB
LevelDB	include/caffe/util/db_leveldb.hpp	/^class LevelDB : public DB {$/;"	c	namespace:caffe::db
LevelDBCursor	include/caffe/util/db_leveldb.hpp	/^  explicit LevelDBCursor(leveldb::Iterator* iter)$/;"	f	class:caffe::db::LevelDBCursor
LevelDBCursor	include/caffe/util/db_leveldb.hpp	/^class LevelDBCursor : public Cursor {$/;"	c	namespace:caffe::db
LevelDBTransaction	include/caffe/util/db_leveldb.hpp	/^  explicit LevelDBTransaction(leveldb::DB* db) : db_(db) { CHECK_NOTNULL(db_); }$/;"	f	class:caffe::db::LevelDBTransaction
LevelDBTransaction	include/caffe/util/db_leveldb.hpp	/^class LevelDBTransaction : public Transaction {$/;"	c	namespace:caffe::db
ListTestsMatchingFilter	src/gtest/gtest-all.cpp	/^void UnitTestImpl::ListTestsMatchingFilter() {$/;"	f	class:testing::internal::UnitTestImpl
LoadHDF5FileData	src/caffe/layers/hdf5_data_layer.cpp	/^void HDF5DataLayer<Dtype>::LoadHDF5FileData(const char* filename) {$/;"	f	class:caffe::HDF5DataLayer
Lock	src/gtest/gtest.h	/^  void Lock() {$/;"	f	class:std::tr1::MutexBase
Log	python/caffe/_caffe.cpp	/^void Log(const string& s) {$/;"	f	namespace:caffe
LogBottomInit	src/caffe/test/test_neuron_layer.cpp	/^  void LogBottomInit() {$/;"	f	class:caffe::NeuronLayerTest
LogLayer	include/caffe/layers/log_layer.hpp	/^  explicit LogLayer(const LayerParameter& param)$/;"	f	class:caffe::LogLayer
LogLayer	include/caffe/layers/log_layer.hpp	/^class LogLayer : public NeuronLayer<Dtype> {$/;"	c	namespace:caffe
LogToStderr	src/gtest/gtest.h	/^inline void LogToStderr() {}$/;"	f	namespace:std::tr1
LossLayer	include/caffe/layers/loss_layer.hpp	/^  explicit LossLayer(const LayerParameter& param)$/;"	f	class:caffe::LossLayer
LossLayer	include/caffe/layers/loss_layer.hpp	/^class LossLayer : public Layer<Dtype> {$/;"	c	namespace:caffe
MATLAB_CXXFLAGS	Makefile	/^MATLAB_CXXFLAGS := $(CXXFLAGS) -Wno-uninitialized$/;"	m
MAT_SO_EXT	Makefile	/^	MAT_SO_EXT := $(shell $(MATLAB_DIR)\/bin\/mexext)$/;"	m
MDB_CHECK	include/caffe/util/db_lmdb.hpp	/^inline void MDB_CHECK(int mdb_status) {$/;"	f	namespace:caffe::db
MEX_ARGS	matlab/+caffe/private/caffe_.cpp	/^#define MEX_ARGS /;"	d	file:
MISSING_IMAGE_SHA1	examples/finetune_flickr_style/assemble_data.py	/^MISSING_IMAGE_SHA1 = '6a92790b1c2a301c6e7ddef645dca1f53ea97ac2'$/;"	v
MKLROOT	Makefile	/^	MKLROOT ?= \/opt\/intel\/mkl$/;"	m
MSRAFiller	include/caffe/filler.hpp	/^  explicit MSRAFiller(const FillerParameter& param)$/;"	f	class:caffe::MSRAFiller
MSRAFiller	include/caffe/filler.hpp	/^class MSRAFiller : public Filler<Dtype> {$/;"	c	namespace:caffe
MSRAFillerTest	src/caffe/test/test_filler.cpp	/^  MSRAFillerTest()$/;"	f	class:caffe::MSRAFillerTest
MSRAFillerTest	src/caffe/test/test_filler.cpp	/^class MSRAFillerTest : public ::testing::Test {$/;"	c	namespace:caffe	file:
MVNLayer	include/caffe/layers/mvn_layer.hpp	/^  explicit MVNLayer(const LayerParameter& param)$/;"	f	class:caffe::MVNLayer
MVNLayer	include/caffe/layers/mvn_layer.hpp	/^class MVNLayer : public Layer<Dtype> {$/;"	c	namespace:caffe
MVNLayerTest	src/caffe/test/test_mvn_layer.cpp	/^  MVNLayerTest()$/;"	f	class:caffe::MVNLayerTest
MVNLayerTest	src/caffe/test/test_mvn_layer.cpp	/^class MVNLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
M_	include/caffe/layers/embed_layer.hpp	/^  int M_;$/;"	m	class:caffe::EmbedLayer
M_	include/caffe/layers/inner_product_layer.hpp	/^  int M_;$/;"	m	class:caffe::InnerProductLayer
MakeAndRegisterTestInfo	src/gtest/gtest-all.cpp	/^TestInfo* MakeAndRegisterTestInfo($/;"	f	namespace:testing::internal
MakeConnection	src/gtest/gtest-all.cpp	/^void StreamingListener::MakeConnection() {$/;"	f	class:testing::internal::StreamingListener
MakeFileName	src/gtest/gtest-all.cpp	/^FilePath FilePath::MakeFileName(const FilePath& directory,$/;"	f	class:testing::internal::FilePath
MakeReferenceTop	src/caffe/test/test_convolution_layer.cpp	/^  virtual Blob<Dtype>* MakeReferenceTop(Blob<Dtype>* top) {$/;"	f	class:caffe::ConvolutionLayerTest
MakeReferenceTop	src/caffe/test/test_convolution_layer.cpp	/^  virtual Blob<Dtype>* MakeReferenceTop(Blob<Dtype>* top) {$/;"	f	class:caffe::CuDNNConvolutionLayerTest
MakeTempDir	include/caffe/util/io.hpp	/^inline void MakeTempDir(string* temp_dirname) {$/;"	f	namespace:caffe
MakeTempFilename	include/caffe/util/io.hpp	/^inline void MakeTempFilename(string* temp_filename) {$/;"	f	namespace:caffe
Match	scripts/cpp_lint.py	/^def Match(pattern, s):$/;"	f
MatchRegexAnywhere	src/gtest/gtest-all.cpp	/^bool MatchRegexAnywhere(const char* regex, const char* str) {$/;"	f	namespace:testing::internal
MatchRegexAtHead	src/gtest/gtest-all.cpp	/^bool MatchRegexAtHead(const char* regex, const char* str) {$/;"	f	namespace:testing::internal
MatchRepetitionAndRegexAtHead	src/gtest/gtest-all.cpp	/^bool MatchRepetitionAndRegexAtHead($/;"	f	namespace:testing::internal
MatchesFilter	src/gtest/gtest-all.cpp	/^bool UnitTestOptions::MatchesFilter(const String& name, const char* filter) {$/;"	f	class:testing::internal::UnitTestOptions
MathFunctionsTest	src/caffe/test/test_math_functions.cpp	/^  MathFunctionsTest()$/;"	f	class:caffe::MathFunctionsTest
MathFunctionsTest	src/caffe/test/test_math_functions.cpp	/^class MathFunctionsTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
MaxBottomBlobs	include/caffe/layer.hpp	/^  virtual inline int MaxBottomBlobs() const { return -1; }$/;"	f	class:caffe::Layer
MaxBottomBlobs	include/caffe/layers/bias_layer.hpp	/^  virtual inline int MaxBottomBlobs() const { return 2; }$/;"	f	class:caffe::BiasLayer
MaxBottomBlobs	include/caffe/layers/infogain_loss_layer.hpp	/^  virtual inline int MaxBottomBlobs() const { return 3; }$/;"	f	class:caffe::InfogainLossLayer
MaxBottomBlobs	include/caffe/layers/recurrent_layer.hpp	/^  virtual inline int MaxBottomBlobs() const { return MinBottomBlobs() + 1; }$/;"	f	class:caffe::RecurrentLayer
MaxBottomBlobs	include/caffe/layers/scale_layer.hpp	/^  virtual inline int MaxBottomBlobs() const { return 2; }$/;"	f	class:caffe::ScaleLayer
MaxPoolingDropoutTest	src/caffe/test/test_maxpool_dropout_layers.cpp	/^  MaxPoolingDropoutTest()$/;"	f	class:caffe::MaxPoolingDropoutTest
MaxPoolingDropoutTest	src/caffe/test/test_maxpool_dropout_layers.cpp	/^class MaxPoolingDropoutTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
MaxTopBlobs	include/caffe/layer.hpp	/^  virtual inline int MaxTopBlobs() const { return -1; }$/;"	f	class:caffe::Layer
MaxTopBlobs	include/caffe/layers/accuracy_layer.hpp	/^  virtual inline int MaxTopBlobs() const { return 2; }$/;"	f	class:caffe::AccuracyLayer
MaxTopBlobs	include/caffe/layers/data_layer.hpp	/^  virtual inline int MaxTopBlobs() const { return 2; }$/;"	f	class:caffe::DataLayer
MaxTopBlobs	include/caffe/layers/infogain_loss_layer.hpp	/^  virtual inline int MaxTopBlobs() const { return 2; }$/;"	f	class:caffe::InfogainLossLayer
MaxTopBlobs	include/caffe/layers/pooling_layer.hpp	/^  virtual inline int MaxTopBlobs() const {$/;"	f	class:caffe::PoolingLayer
MaxTopBlobs	include/caffe/layers/softmax_loss_layer.hpp	/^  virtual inline int MaxTopBlobs() const { return 2; }$/;"	f	class:caffe::SoftmaxWithLossLayer
MemoryDataLayer	include/caffe/layers/memory_data_layer.hpp	/^  explicit MemoryDataLayer(const LayerParameter& param)$/;"	f	class:caffe::MemoryDataLayer
MemoryDataLayer	include/caffe/layers/memory_data_layer.hpp	/^class MemoryDataLayer : public BaseDataLayer<Dtype> {$/;"	c	namespace:caffe
MemoryDataLayerTest	src/caffe/test/test_memory_data_layer.cpp	/^  MemoryDataLayerTest()$/;"	f	class:caffe::MemoryDataLayerTest
MemoryDataLayerTest	src/caffe/test/test_memory_data_layer.cpp	/^class MemoryDataLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
Message	src/gtest/gtest.h	/^  Message() : ss_(new ::std::stringstream) {$/;"	f	class:testing::Message
Message	src/gtest/gtest.h	/^  Message(const Message& msg) : ss_(new ::std::stringstream) {  \/\/ NOLINT$/;"	f	class:testing::Message
Message	src/gtest/gtest.h	/^  explicit Message(const char* str) : ss_(new ::std::stringstream) {$/;"	f	class:testing::Message
Message	src/gtest/gtest.h	/^class GTEST_API_ Message {$/;"	c	namespace:testing
MicroSeconds	src/caffe/util/benchmark.cpp	/^float CPUTimer::MicroSeconds() {$/;"	f	class:caffe::CPUTimer
MicroSeconds	src/caffe/util/benchmark.cpp	/^float Timer::MicroSeconds() {$/;"	f	class:caffe::Timer
MilliSeconds	src/caffe/util/benchmark.cpp	/^float CPUTimer::MilliSeconds() {$/;"	f	class:caffe::CPUTimer
MilliSeconds	src/caffe/util/benchmark.cpp	/^float Timer::MilliSeconds() {$/;"	f	class:caffe::Timer
MinBottomBlobs	include/caffe/layer.hpp	/^  virtual inline int MinBottomBlobs() const { return -1; }$/;"	f	class:caffe::Layer
MinBottomBlobs	include/caffe/layers/base_conv_layer.hpp	/^  virtual inline int MinBottomBlobs() const { return 1; }$/;"	f	class:caffe::BaseConvolutionLayer
MinBottomBlobs	include/caffe/layers/bias_layer.hpp	/^  virtual inline int MinBottomBlobs() const { return 1; }$/;"	f	class:caffe::BiasLayer
MinBottomBlobs	include/caffe/layers/concat_layer.hpp	/^  virtual inline int MinBottomBlobs() const { return 1; }$/;"	f	class:caffe::ConcatLayer
MinBottomBlobs	include/caffe/layers/eltwise_layer.hpp	/^  virtual inline int MinBottomBlobs() const { return 2; }$/;"	f	class:caffe::EltwiseLayer
MinBottomBlobs	include/caffe/layers/filter_layer.hpp	/^  virtual inline int MinBottomBlobs() const { return 2; }$/;"	f	class:caffe::FilterLayer
MinBottomBlobs	include/caffe/layers/infogain_loss_layer.hpp	/^  virtual inline int MinBottomBlobs() const { return 2; }$/;"	f	class:caffe::InfogainLossLayer
MinBottomBlobs	include/caffe/layers/recurrent_layer.hpp	/^  virtual inline int MinBottomBlobs() const {$/;"	f	class:caffe::RecurrentLayer
MinBottomBlobs	include/caffe/layers/scale_layer.hpp	/^  virtual inline int MinBottomBlobs() const { return 1; }$/;"	f	class:caffe::ScaleLayer
MinBottomBlobs	include/caffe/layers/silence_layer.hpp	/^  virtual inline int MinBottomBlobs() const { return 1; }$/;"	f	class:caffe::SilenceLayer
MinTopBlobs	include/caffe/layer.hpp	/^  virtual inline int MinTopBlobs() const { return -1; }$/;"	f	class:caffe::Layer
MinTopBlobs	include/caffe/layers/accuracy_layer.hpp	/^  virtual inline int MinTopBlobs() const { return 1; }$/;"	f	class:caffe::AccuracyLayer
MinTopBlobs	include/caffe/layers/base_conv_layer.hpp	/^  virtual inline int MinTopBlobs() const { return 1; }$/;"	f	class:caffe::BaseConvolutionLayer
MinTopBlobs	include/caffe/layers/cudnn_pooling_layer.hpp	/^  virtual inline int MinTopBlobs() const { return -1; }$/;"	f	class:caffe::CuDNNPoolingLayer
MinTopBlobs	include/caffe/layers/data_layer.hpp	/^  virtual inline int MinTopBlobs() const { return 1; }$/;"	f	class:caffe::DataLayer
MinTopBlobs	include/caffe/layers/dummy_data_layer.hpp	/^  virtual inline int MinTopBlobs() const { return 1; }$/;"	f	class:caffe::DummyDataLayer
MinTopBlobs	include/caffe/layers/filter_layer.hpp	/^  virtual inline int MinTopBlobs() const { return 1; }$/;"	f	class:caffe::FilterLayer
MinTopBlobs	include/caffe/layers/hdf5_data_layer.hpp	/^  virtual inline int MinTopBlobs() const { return 1; }$/;"	f	class:caffe::HDF5DataLayer
MinTopBlobs	include/caffe/layers/infogain_loss_layer.hpp	/^  virtual inline int MinTopBlobs() const { return 1; }$/;"	f	class:caffe::InfogainLossLayer
MinTopBlobs	include/caffe/layers/input_layer.hpp	/^  virtual inline int MinTopBlobs() const { return 1; }$/;"	f	class:caffe::InputLayer
MinTopBlobs	include/caffe/layers/pooling_layer.hpp	/^  virtual inline int MinTopBlobs() const { return 1; }$/;"	f	class:caffe::PoolingLayer
MinTopBlobs	include/caffe/layers/slice_layer.hpp	/^  virtual inline int MinTopBlobs() const { return 1; }$/;"	f	class:caffe::SliceLayer
MinTopBlobs	include/caffe/layers/softmax_loss_layer.hpp	/^  virtual inline int MinTopBlobs() const { return 1; }$/;"	f	class:caffe::SoftmaxWithLossLayer
MinTopBlobs	include/caffe/layers/split_layer.hpp	/^  virtual inline int MinTopBlobs() const { return 1; }$/;"	f	class:caffe::SplitLayer
Mode	include/caffe/util/db.hpp	/^enum Mode { READ, WRITE, NEW };$/;"	g	namespace:caffe::db
MultiDeviceTest	include/caffe/test/test_caffe_main.hpp	/^  MultiDeviceTest() {$/;"	f	class:caffe::MultiDeviceTest
MultiDeviceTest	include/caffe/test/test_caffe_main.hpp	/^class MultiDeviceTest : public ::testing::Test {$/;"	c	namespace:caffe
MultinomialLogisticLossLayer	include/caffe/layers/multinomial_logistic_loss_layer.hpp	/^  explicit MultinomialLogisticLossLayer(const LayerParameter& param)$/;"	f	class:caffe::MultinomialLogisticLossLayer
MultinomialLogisticLossLayer	include/caffe/layers/multinomial_logistic_loss_layer.hpp	/^class MultinomialLogisticLossLayer : public LossLayer<Dtype> {$/;"	c	namespace:caffe
MultinomialLogisticLossLayerTest	src/caffe/test/test_multinomial_logistic_loss_layer.cpp	/^  MultinomialLogisticLossLayerTest()$/;"	f	class:caffe::MultinomialLogisticLossLayerTest
MultinomialLogisticLossLayerTest	src/caffe/test/test_multinomial_logistic_loss_layer.cpp	/^class MultinomialLogisticLossLayerTest : public CPUDeviceTest<Dtype> {$/;"	c	namespace:caffe	file:
Mutex	src/gtest/gtest.h	/^  Mutex() {$/;"	f	class:std::tr1::Mutex
Mutex	src/gtest/gtest.h	/^  Mutex() {}$/;"	f	class:std::tr1::Mutex
Mutex	src/gtest/gtest.h	/^class Mutex : public MutexBase {$/;"	c	namespace:std::tr1
Mutex	src/gtest/gtest.h	/^class Mutex {$/;"	c	namespace:std::tr1
MutexBase	src/gtest/gtest.h	/^class MutexBase {$/;"	c	namespace:std::tr1
MutexLock	src/gtest/gtest.h	/^typedef GTestMutexLock MutexLock;$/;"	t	namespace:std::tr1
NCCL	include/caffe/parallel.hpp	/^class NCCL : public GPUParams<Dtype>,$/;"	c	namespace:caffe
NCCL	python/caffe/__init__.py	/^from .pycaffe import Net, SGDSolver, NesterovSolver, AdaGradSolver, RMSPropSolver, AdaDeltaSolver, AdamSolver, NCCL, Timer$/;"	i
NCCL	python/caffe/_caffe.cpp	/^  NCCL(shared_ptr<Solver<Dtype> > solver, const string& uid) {}$/;"	f	class:caffe::NCCL
NCCL	python/caffe/_caffe.cpp	/^class NCCL {$/;"	c	namespace:caffe	file:
NCCL	python/caffe/pycaffe.py	/^        RMSPropSolver, AdaDeltaSolver, AdamSolver, NCCL, Timer$/;"	i
NCCL	src/caffe/parallel.cpp	/^NCCL<Dtype>::NCCL(shared_ptr<Solver<Dtype> > solver)$/;"	f	class:caffe::NCCL
NCCL	src/caffe/parallel.cpp	/^NCCL<Dtype>::NCCL(shared_ptr<Solver<Dtype> > solver, const string& uid)$/;"	f	class:caffe::NCCL
NCCL_CHECK	include/caffe/util/nccl.hpp	/^#define NCCL_CHECK(/;"	d
NCCL_New_Uid	python/caffe/_caffe.cpp	/^bp::object NCCL_New_Uid() {$/;"	f	namespace:caffe
NEURON_LAYER_STYLE	python/caffe/draw.py	/^NEURON_LAYER_STYLE = {'shape': 'record',$/;"	v
NEW	include/caffe/util/db.hpp	/^enum Mode { READ, WRITE, NEW };$/;"	e	enum:caffe::db::Mode
NONE	include/caffe/solver.hpp	/^      NONE = 0,  \/\/ Take no special action.$/;"	e	enum:caffe::SolverAction::Enum
NONEMPTY_LINT_REPORT	Makefile	/^NONEMPTY_LINT_REPORT := $(BUILD_DIR)\/$(LINT_EXT)$/;"	m
NONEMPTY_WARN_REPORT	Makefile	/^NONEMPTY_WARN_REPORT := $(BUILD_DIR)\/$(WARNS_EXT)$/;"	m
NONGEN_CXX_SRCS	Makefile	/^NONGEN_CXX_SRCS := $(shell find \\$/;"	m
NOT_IMPLEMENTED	include/caffe/common.hpp	/^#define NOT_IMPLEMENTED /;"	d
NO_GPU	include/caffe/util/device_alternate.hpp	/^#define NO_GPU /;"	d
NPY_ARRAY_C_CONTIGUOUS	python/caffe/_caffe.cpp	/^#define NPY_ARRAY_C_CONTIGUOUS /;"	d	file:
NPY_DTYPE	python/caffe/_caffe.cpp	/^const int NPY_DTYPE = NPY_FLOAT32;$/;"	m	namespace:caffe	file:
NPY_NO_DEPRECATED_API	python/caffe/_caffe.cpp	/^#define NPY_NO_DEPRECATED_API /;"	d	file:
NUM	include/caffe/layers/window_data_layer.hpp	/^  enum WindowField { IMAGE_INDEX, LABEL, OVERLAP, X1, Y1, X2, Y2, NUM };$/;"	e	enum:caffe::WindowDataLayer::WindowField
N_	include/caffe/layers/embed_layer.hpp	/^  int N_;$/;"	m	class:caffe::EmbedLayer
N_	include/caffe/layers/inner_product_layer.hpp	/^  int N_;$/;"	m	class:caffe::InnerProductLayer
N_	include/caffe/layers/recurrent_layer.hpp	/^  int N_;$/;"	m	class:caffe::RecurrentLayer
NativeArray	src/gtest/gtest.h	/^  NativeArray(const Element* array, size_t count, RelationToSource relation) {$/;"	f	class:testing::internal::NativeArray
NativeArray	src/gtest/gtest.h	/^  NativeArray(const NativeArray& rhs) {$/;"	f	class:testing::internal::NativeArray
NativeArray	src/gtest/gtest.h	/^class NativeArray {$/;"	c	namespace:testing::internal
NdarrayCallPolicies	python/caffe/_caffe.cpp	/^struct NdarrayCallPolicies : public bp::default_call_policies {$/;"	s	namespace:caffe	file:
NdarrayConverterGenerator	python/caffe/_caffe.cpp	/^struct NdarrayConverterGenerator {$/;"	s	namespace:caffe	file:
NesterovSolver	include/caffe/sgd_solvers.hpp	/^  explicit NesterovSolver(const SolverParameter& param)$/;"	f	class:caffe::NesterovSolver
NesterovSolver	include/caffe/sgd_solvers.hpp	/^  explicit NesterovSolver(const string& param_file)$/;"	f	class:caffe::NesterovSolver
NesterovSolver	include/caffe/sgd_solvers.hpp	/^class NesterovSolver : public SGDSolver<Dtype> {$/;"	c	namespace:caffe
NesterovSolver	python/caffe/__init__.py	/^from .pycaffe import Net, SGDSolver, NesterovSolver, AdaGradSolver, RMSPropSolver, AdaDeltaSolver, AdamSolver, NCCL, Timer$/;"	i
NesterovSolver	python/caffe/pycaffe.py	/^        RMSPropSolver, AdaDeltaSolver, AdamSolver, NCCL, Timer$/;"	i
NesterovSolverTest	src/caffe/test/test_gradient_based_solver.cpp	/^class NesterovSolverTest : public GradientBasedSolverTest<TypeParam> {$/;"	c	namespace:caffe	file:
Net	include/caffe/net.hpp	/^class Net {$/;"	c	namespace:caffe
Net	python/caffe/__init__.py	/^from .pycaffe import Net, SGDSolver, NesterovSolver, AdaGradSolver, RMSPropSolver, AdaDeltaSolver, AdamSolver, NCCL, Timer$/;"	i
Net	python/caffe/pycaffe.py	/^        RMSPropSolver, AdaDeltaSolver, AdamSolver, NCCL, Timer$/;"	i
Net	src/caffe/net.cpp	/^Net<Dtype>::Net(const NetParameter& param) {$/;"	f	class:caffe::Net
Net	src/caffe/net.cpp	/^Net<Dtype>::Net(const string& param_file, Phase phase,$/;"	f	class:caffe::Net
NetCallback	python/caffe/_caffe.cpp	/^  explicit NetCallback(bp::object run) : run_(run) {}$/;"	f	class:caffe::NetCallback
NetCallback	python/caffe/_caffe.cpp	/^class NetCallback: public Net<Dtype>::Callback {$/;"	c	namespace:caffe	file:
NetNeedsBatchNormUpgrade	src/caffe/util/upgrade_proto.cpp	/^bool NetNeedsBatchNormUpgrade(const NetParameter& net_param) {$/;"	f	namespace:caffe
NetNeedsDataUpgrade	src/caffe/util/upgrade_proto.cpp	/^bool NetNeedsDataUpgrade(const NetParameter& net_param) {$/;"	f	namespace:caffe
NetNeedsInputUpgrade	src/caffe/util/upgrade_proto.cpp	/^bool NetNeedsInputUpgrade(const NetParameter& net_param) {$/;"	f	namespace:caffe
NetNeedsUpgrade	src/caffe/util/upgrade_proto.cpp	/^bool NetNeedsUpgrade(const NetParameter& net_param) {$/;"	f	namespace:caffe
NetNeedsV0ToV1Upgrade	src/caffe/util/upgrade_proto.cpp	/^bool NetNeedsV0ToV1Upgrade(const NetParameter& net_param) {$/;"	f	namespace:caffe
NetNeedsV1ToV2Upgrade	src/caffe/util/upgrade_proto.cpp	/^bool NetNeedsV1ToV2Upgrade(const NetParameter& net_param) {$/;"	f	namespace:caffe
NetSpec	python/caffe/__init__.py	/^from .net_spec import layers, params, NetSpec, to_proto$/;"	i
NetSpec	python/caffe/net_spec.py	/^class NetSpec(object):$/;"	c
NetTest	src/caffe/test/test_net.cpp	/^  NetTest() : seed_(1701) {}$/;"	f	class:caffe::NetTest
NetTest	src/caffe/test/test_net.cpp	/^class NetTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
NetUpgradeTest	src/caffe/test/test_upgrade_proto.cpp	/^class NetUpgradeTest : public ::testing::Test {$/;"	c	namespace:caffe	file:
Net_Init	python/caffe/_caffe.cpp	/^shared_ptr<Net<Dtype> > Net_Init(string network_file, int phase,$/;"	f	namespace:caffe
Net_Init_Load	python/caffe/_caffe.cpp	/^shared_ptr<Net<Dtype> > Net_Init_Load($/;"	f	namespace:caffe
Net_LoadHDF5	python/caffe/_caffe.cpp	/^void Net_LoadHDF5(Net<Dtype>* net, string filename) {$/;"	f	namespace:caffe
Net_Save	python/caffe/_caffe.cpp	/^void Net_Save(const Net<Dtype>& net, string filename) {$/;"	f	namespace:caffe
Net_SaveHDF5	python/caffe/_caffe.cpp	/^void Net_SaveHDF5(const Net<Dtype>& net, string filename) {$/;"	f	namespace:caffe
Net_SetInputArrays	python/caffe/_caffe.cpp	/^void Net_SetInputArrays(Net<Dtype>* net, bp::object data_obj,$/;"	f	namespace:caffe
Net_add_nccl	python/caffe/_caffe.cpp	/^void Net_add_nccl(Net<Dtype>* net$/;"	f	namespace:caffe
Net_after_backward	python/caffe/_caffe.cpp	/^void Net_after_backward(Net<Dtype>* net, bp::object run) {$/;"	f	namespace:caffe
Net_after_forward	python/caffe/_caffe.cpp	/^void Net_after_forward(Net<Dtype>* net, bp::object run) {$/;"	f	namespace:caffe
Net_before_backward	python/caffe/_caffe.cpp	/^void Net_before_backward(Net<Dtype>* net, bp::object run) {$/;"	f	namespace:caffe
Net_before_forward	python/caffe/_caffe.cpp	/^void Net_before_forward(Net<Dtype>* net, bp::object run) {$/;"	f	namespace:caffe
NeuronLayer	include/caffe/layers/neuron_layer.hpp	/^  explicit NeuronLayer(const LayerParameter& param)$/;"	f	class:caffe::NeuronLayer
NeuronLayer	include/caffe/layers/neuron_layer.hpp	/^class NeuronLayer : public Layer<Dtype> {$/;"	c	namespace:caffe
NeuronLayerTest	src/caffe/test/test_neuron_layer.cpp	/^  NeuronLayerTest()$/;"	f	class:caffe::NeuronLayerTest
NeuronLayerTest	src/caffe/test/test_neuron_layer.cpp	/^class NeuronLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
NewCursor	include/caffe/util/db_leveldb.hpp	/^  virtual LevelDBCursor* NewCursor() {$/;"	f	class:caffe::db::LevelDB
NewCursor	src/caffe/util/db_lmdb.cpp	/^LMDBCursor* LMDB::NewCursor() {$/;"	f	class:caffe::db::LMDB
NewTransaction	include/caffe/util/db_leveldb.hpp	/^  virtual LevelDBTransaction* NewTransaction() {$/;"	f	class:caffe::db::LevelDB
NewTransaction	src/caffe/util/db_lmdb.cpp	/^LMDBTransaction* LMDB::NewTransaction() {$/;"	f	class:caffe::db::LMDB
Next	include/caffe/util/db_leveldb.hpp	/^  virtual void Next() { iter_->Next(); }$/;"	f	class:caffe::db::LevelDBCursor
Next	include/caffe/util/db_lmdb.hpp	/^  virtual void Next() { Seek(MDB_NEXT); }$/;"	f	class:caffe::db::LMDBCursor
Next	src/caffe/layers/data_layer.cpp	/^void DataLayer<Dtype>::Next() {$/;"	f	class:caffe::DataLayer
Next	src/caffe/layers/hdf5_data_layer.cpp	/^void HDF5DataLayer<Dtype>::Next() {$/;"	f	class:caffe::HDF5DataLayer
NoExecDeathTest	src/gtest/gtest-all.cpp	/^  NoExecDeathTest(const char* a_statement, const RE* a_regex) :$/;"	f	class:testing::internal::NoExecDeathTest
NoExecDeathTest	src/gtest/gtest-all.cpp	/^class NoExecDeathTest : public ForkingDeathTest {$/;"	c	namespace:testing::internal	file:
NoExtension	scripts/cpp_lint.py	/^  def NoExtension(self):$/;"	m	class:FileInfo
None	src/gtest/gtest.h	/^struct None {};$/;"	s	namespace:testing::internal
NoneT	src/gtest/gtest.h	/^struct NoneT {};$/;"	s	namespace:testing::internal
Normalize	src/caffe/solvers/sgd_solver.cpp	/^void SGDSolver<Dtype>::Normalize(int param_id) {$/;"	f	class:caffe::SGDSolver
Normalize	src/gtest/gtest-all.cpp	/^void FilePath::Normalize() {$/;"	f	class:testing::internal::FilePath
Notification	src/gtest/gtest.h	/^  Notification() : notified_(false) {}$/;"	f	class:std::tr1::Notification
Notification	src/gtest/gtest.h	/^class Notification {$/;"	c	namespace:std::tr1
Notify	src/gtest/gtest.h	/^  void Notify() { notified_ = true; }$/;"	f	class:std::tr1::Notification
NumLines	scripts/cpp_lint.py	/^  def NumLines(self):$/;"	m	class:CleansedLines
NumSequenceMatches	src/caffe/test/test_data_transformer.cpp	/^  int NumSequenceMatches(const TransformationParameter transform_param,$/;"	f	class:caffe::DataTransformTest
OBJS	Makefile	/^	OBJS := $(PROTO_OBJS) $(CXX_OBJS)$/;"	m
OBJS	Makefile	/^OBJS := $(PROTO_OBJS) $(CXX_OBJS) $(CU_OBJS)$/;"	m
ORIENTATIONS	examples/web_demo/exifutil.py	/^ORIENTATIONS = {   # used in apply_orientation$/;"	v
ORIGIN	Makefile	/^	ORIGIN := @loader_path$/;"	m
ORIGIN	Makefile	/^	ORIGIN := \\$$ORIGIN$/;"	m
OSX	Makefile	/^	OSX := 1$/;"	m
OSX_10_5_OR_LATER	Makefile	/^		OSX_10_5_OR_LATER := $(shell [ $(OSX_MINOR_VERSION) -ge 5 ] && echo true)$/;"	m
OSX_10_OR_LATER	Makefile	/^		OSX_10_OR_LATER   := $(shell [ $(OSX_MAJOR_VERSION) -ge 10 ] && echo true)$/;"	m
OSX_MAJOR_VERSION	Makefile	/^	OSX_MAJOR_VERSION := $(shell sw_vers -productVersion | cut -f 1 -d .)$/;"	m
OSX_MINOR_VERSION	Makefile	/^	OSX_MINOR_VERSION := $(shell sw_vers -productVersion | cut -f 2 -d .)$/;"	m
OTHER_BUILD_DIR	Makefile	/^	OTHER_BUILD_DIR := $(DEBUG_BUILD_DIR)$/;"	m
OTHER_BUILD_DIR	Makefile	/^	OTHER_BUILD_DIR := $(RELEASE_BUILD_DIR)$/;"	m
OVERLAP	include/caffe/layers/window_data_layer.hpp	/^  enum WindowField { IMAGE_INDEX, LABEL, OVERLAP, X1, Y1, X2, Y2, NUM };$/;"	e	enum:caffe::WindowDataLayer::WindowField
OVERSEE_TEST	src/gtest/gtest.h	/^  enum TestRole { OVERSEE_TEST, EXECUTE_TEST };$/;"	e	enum:testing::internal::DeathTest::TestRole
OnEnvironmentsSetUpEnd	src/gtest/gtest-all.cpp	/^  virtual void OnEnvironmentsSetUpEnd(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnEnvironmentsSetUpEnd	src/gtest/gtest.h	/^  virtual void OnEnvironmentsSetUpEnd(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnEnvironmentsSetUpStart	src/gtest/gtest-all.cpp	/^void PrettyUnitTestResultPrinter::OnEnvironmentsSetUpStart($/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnEnvironmentsSetUpStart	src/gtest/gtest.h	/^  virtual void OnEnvironmentsSetUpStart(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnEnvironmentsTearDownEnd	src/gtest/gtest-all.cpp	/^  virtual void OnEnvironmentsTearDownEnd(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnEnvironmentsTearDownEnd	src/gtest/gtest.h	/^  virtual void OnEnvironmentsTearDownEnd(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnEnvironmentsTearDownStart	src/gtest/gtest-all.cpp	/^void PrettyUnitTestResultPrinter::OnEnvironmentsTearDownStart($/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnEnvironmentsTearDownStart	src/gtest/gtest.h	/^  virtual void OnEnvironmentsTearDownStart(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnTestCaseEnd	src/gtest/gtest-all.cpp	/^  void OnTestCaseEnd(const TestCase& test_case) {$/;"	f	class:testing::internal::StreamingListener
OnTestCaseEnd	src/gtest/gtest-all.cpp	/^void PrettyUnitTestResultPrinter::OnTestCaseEnd(const TestCase& test_case) {$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnTestCaseEnd	src/gtest/gtest.h	/^  virtual void OnTestCaseEnd(const TestCase& \/*test_case*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnTestCaseStart	src/gtest/gtest-all.cpp	/^  void OnTestCaseStart(const TestCase& test_case) {$/;"	f	class:testing::internal::StreamingListener
OnTestCaseStart	src/gtest/gtest-all.cpp	/^void PrettyUnitTestResultPrinter::OnTestCaseStart(const TestCase& test_case) {$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnTestCaseStart	src/gtest/gtest.h	/^  virtual void OnTestCaseStart(const TestCase& \/*test_case*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnTestEnd	src/gtest/gtest-all.cpp	/^  void OnTestEnd(const TestInfo& test_info) {$/;"	f	class:testing::internal::StreamingListener
OnTestEnd	src/gtest/gtest-all.cpp	/^void PrettyUnitTestResultPrinter::OnTestEnd(const TestInfo& test_info) {$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnTestEnd	src/gtest/gtest.h	/^  virtual void OnTestEnd(const TestInfo& \/*test_info*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnTestIterationEnd	src/gtest/gtest-all.cpp	/^  void OnTestIterationEnd(const UnitTest& unit_test, int \/* iteration *\/) {$/;"	f	class:testing::internal::StreamingListener
OnTestIterationEnd	src/gtest/gtest-all.cpp	/^void PrettyUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnTestIterationEnd	src/gtest/gtest-all.cpp	/^void TestEventRepeater::OnTestIterationEnd(const UnitTest& unit_test,$/;"	f	class:testing::internal::TestEventRepeater
OnTestIterationEnd	src/gtest/gtest-all.cpp	/^void XmlUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,$/;"	f	class:testing::internal::XmlUnitTestResultPrinter
OnTestIterationEnd	src/gtest/gtest.h	/^  virtual void OnTestIterationEnd(const UnitTest& \/*unit_test*\/,$/;"	f	class:testing::EmptyTestEventListener
OnTestIterationStart	src/gtest/gtest-all.cpp	/^  void OnTestIterationStart(const UnitTest& \/* unit_test *\/, int iteration) {$/;"	f	class:testing::internal::StreamingListener
OnTestIterationStart	src/gtest/gtest-all.cpp	/^void PrettyUnitTestResultPrinter::OnTestIterationStart($/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnTestIterationStart	src/gtest/gtest-all.cpp	/^void TestEventRepeater::OnTestIterationStart(const UnitTest& unit_test,$/;"	f	class:testing::internal::TestEventRepeater
OnTestIterationStart	src/gtest/gtest.h	/^  virtual void OnTestIterationStart(const UnitTest& \/*unit_test*\/,$/;"	f	class:testing::EmptyTestEventListener
OnTestPartResult	src/gtest/gtest-all.cpp	/^  void OnTestPartResult(const TestPartResult& test_part_result) {$/;"	f	class:testing::internal::StreamingListener
OnTestPartResult	src/gtest/gtest-all.cpp	/^void PrettyUnitTestResultPrinter::OnTestPartResult($/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnTestPartResult	src/gtest/gtest.h	/^  virtual void OnTestPartResult(const TestPartResult& \/*test_part_result*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnTestProgramEnd	src/gtest/gtest-all.cpp	/^  virtual void OnTestProgramEnd(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnTestProgramEnd	src/gtest/gtest-all.cpp	/^  void OnTestProgramEnd(const UnitTest& unit_test) {$/;"	f	class:testing::internal::StreamingListener
OnTestProgramEnd	src/gtest/gtest.h	/^  virtual void OnTestProgramEnd(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnTestProgramStart	src/gtest/gtest-all.cpp	/^  virtual void OnTestProgramStart(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnTestProgramStart	src/gtest/gtest-all.cpp	/^  void OnTestProgramStart(const UnitTest& \/* unit_test *\/) {$/;"	f	class:testing::internal::StreamingListener
OnTestProgramStart	src/gtest/gtest.h	/^  virtual void OnTestProgramStart(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnTestStart	src/gtest/gtest-all.cpp	/^  void OnTestStart(const TestInfo& test_info) {$/;"	f	class:testing::internal::StreamingListener
OnTestStart	src/gtest/gtest-all.cpp	/^void PrettyUnitTestResultPrinter::OnTestStart(const TestInfo& test_info) {$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnTestStart	src/gtest/gtest.h	/^  virtual void OnTestStart(const TestInfo& \/*test_info*\/) {}$/;"	f	class:testing::EmptyTestEventListener
Op	src/caffe/parallel.cpp	/^enum Op {$/;"	g	namespace:caffe	file:
Open	src/caffe/util/db_leveldb.cpp	/^void LevelDB::Open(const string& source, Mode mode) {$/;"	f	class:caffe::db::LevelDB
Open	src/caffe/util/db_lmdb.cpp	/^void LMDB::Open(const string& source, Mode mode) {$/;"	f	class:caffe::db::LMDB
OpenCVResizeCrop	tools/extra/resize_and_crop_images.py	/^class OpenCVResizeCrop:$/;"	c
OrderedDict	python/caffe/net_spec.py	/^from collections import OrderedDict, Counter$/;"	i
OrderedDict	python/caffe/pycaffe.py	/^from collections import OrderedDict$/;"	i
OrderedDict	python/caffe/test/test_net.py	/^from collections import OrderedDict$/;"	i
OrderedDict	tools/extra/parse_log.py	/^from collections import OrderedDict$/;"	i
OsStackTraceGetter	src/gtest/gtest-all.cpp	/^  OsStackTraceGetter() : caller_frame_(NULL) {}$/;"	f	class:testing::internal::OsStackTraceGetter
OsStackTraceGetter	src/gtest/gtest-all.cpp	/^class OsStackTraceGetter : public OsStackTraceGetterInterface {$/;"	c	namespace:testing::internal	file:
OsStackTraceGetterInterface	src/gtest/gtest-all.cpp	/^  OsStackTraceGetterInterface() {}$/;"	f	class:testing::internal::OsStackTraceGetterInterface
OsStackTraceGetterInterface	src/gtest/gtest-all.cpp	/^class OsStackTraceGetterInterface {$/;"	c	namespace:testing::internal	file:
OutputBlobNames	src/caffe/layers/lstm_layer.cpp	/^void LSTMLayer<Dtype>::OutputBlobNames(vector<string>* names) const {$/;"	f	class:caffe::LSTMLayer
OutputBlobNames	src/caffe/layers/rnn_layer.cpp	/^void RNNLayer<Dtype>::OutputBlobNames(vector<string>* names) const {$/;"	f	class:caffe::RNNLayer
OutputXmlCDataSection	src/gtest/gtest-all.cpp	/^void XmlUnitTestResultPrinter::OutputXmlCDataSection(::std::ostream* stream,$/;"	f	class:testing::internal::XmlUnitTestResultPrinter
OutputXmlTestInfo	src/gtest/gtest-all.cpp	/^void XmlUnitTestResultPrinter::OutputXmlTestInfo(::std::ostream* stream,$/;"	f	class:testing::internal::XmlUnitTestResultPrinter
P	examples/pycaffe/caffenet.py	/^from caffe import layers as L, params as P, to_proto$/;"	i
P	python/caffe/test/test_coord_map.py	/^from caffe import params as P$/;"	i
P	python/caffe/test/test_net_spec.py	/^from caffe import params as P$/;"	i
PASS_THROUGH_LAYERS	python/caffe/coord_map.py	/^PASS_THROUGH_LAYERS = ['AbsVal', 'BatchNorm', 'Bias', 'BNLL', 'Dropout',$/;"	v
PILResizeCrop	tools/extra/resize_and_crop_images.py	/^class PILResizeCrop:$/;"	c
PKG_CONFIG	Makefile	/^	PKG_CONFIG := $(shell pkg-config opencv --libs)$/;"	m
PKG_CONFIG	Makefile	/^	PKG_CONFIG :=$/;"	m
PROJECT	Makefile	/^PROJECT := caffe$/;"	m
PROTO_BUILD_DIR	Makefile	/^PROTO_BUILD_DIR := $(BUILD_DIR)\/$(PROTO_SRC_DIR)$/;"	m
PROTO_BUILD_INCLUDE_DIR	Makefile	/^PROTO_BUILD_INCLUDE_DIR := $(BUILD_INCLUDE_DIR)\/$(PROJECT)\/proto$/;"	m
PROTO_GEN_CC	Makefile	/^PROTO_GEN_CC := $(addprefix $(BUILD_DIR)\/, ${PROTO_SRCS:.proto=.pb.cc})$/;"	m
PROTO_GEN_HEADER	Makefile	/^PROTO_GEN_HEADER := $(addprefix $(PROTO_BUILD_INCLUDE_DIR)\/, \\$/;"	m
PROTO_GEN_HEADER_SRCS	Makefile	/^PROTO_GEN_HEADER_SRCS := $(addprefix $(PROTO_BUILD_DIR)\/, \\$/;"	m
PROTO_GEN_PY	Makefile	/^PROTO_GEN_PY := $(foreach file,${PROTO_SRCS:.proto=_pb2.py}, \\$/;"	m
PROTO_OBJS	Makefile	/^PROTO_OBJS := ${PROTO_GEN_CC:.cc=.o}$/;"	m
PROTO_SRCS	Makefile	/^PROTO_SRCS := $(wildcard $(PROTO_SRC_DIR)\/*.proto)$/;"	m
PROTO_SRC_DIR	Makefile	/^PROTO_SRC_DIR := src\/$(PROJECT)\/proto$/;"	m
PReLULayer	include/caffe/layers/prelu_layer.hpp	/^  explicit PReLULayer(const LayerParameter& param)$/;"	f	class:caffe::PReLULayer
PReLULayer	include/caffe/layers/prelu_layer.hpp	/^class PReLULayer : public NeuronLayer<Dtype> {$/;"	c	namespace:caffe
PYTHON_LDFLAGS	Makefile	/^PYTHON_LDFLAGS := $(LDFLAGS) $(foreach library,$(PYTHON_LIBRARIES),-l$(library))$/;"	m
PYTHON_LIBRARIES	Makefile	/^PYTHON_LIBRARIES ?= boost_python python2.7$/;"	m
PY_PROTO_BUILD_DIR	Makefile	/^PY_PROTO_BUILD_DIR := python\/$(PROJECT)\/proto$/;"	m
PY_PROTO_INIT	Makefile	/^PY_PROTO_INIT := python\/$(PROJECT)\/proto\/__init__.py$/;"	m
PaddingLayerUpgradeTest	src/caffe/test/test_upgrade_proto.cpp	/^class PaddingLayerUpgradeTest : public ::testing::Test {$/;"	c	namespace:caffe	file:
PairCompare	examples/cpp_classification/classification.cpp	/^static bool PairCompare(const std::pair<float, int>& lhs,$/;"	f	file:
Param	python/caffe/net_spec.py	/^       class Param:$/;"	c	function:Parameters.__getattr__
ParamGenerator	src/gtest/gtest.h	/^  ParamGenerator(const ParamGenerator& other) : impl_(other.impl_) {}$/;"	f	class:testing::internal::ParamGenerator
ParamGenerator	src/gtest/gtest.h	/^  explicit ParamGenerator(ParamGeneratorInterface<T>* impl) : impl_(impl) {}$/;"	f	class:testing::internal::ParamGenerator
ParamGenerator	src/gtest/gtest.h	/^class ParamGenerator {$/;"	c	namespace:testing::internal
ParamGeneratorInterface	src/gtest/gtest.h	/^class ParamGeneratorInterface {$/;"	c	namespace:testing::internal
ParamIterator	src/gtest/gtest.h	/^  ParamIterator(const ParamIterator& other) : impl_(other.impl_->Clone()) {}$/;"	f	class:testing::internal::ParamIterator
ParamIterator	src/gtest/gtest.h	/^  explicit ParamIterator(ParamIteratorInterface<T>* impl) : impl_(impl) {}$/;"	f	class:testing::internal::ParamIterator
ParamIterator	src/gtest/gtest.h	/^class ParamIterator {$/;"	c	namespace:testing::internal
ParamIteratorInterface	src/gtest/gtest.h	/^class ParamIteratorInterface {$/;"	c	namespace:testing::internal
ParamType	src/gtest/gtest.h	/^  typedef ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator10
ParamType	src/gtest/gtest.h	/^  typedef ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8, T9> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator9
ParamType	src/gtest/gtest.h	/^  typedef ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator8
ParamType	src/gtest/gtest.h	/^  typedef ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator7
ParamType	src/gtest/gtest.h	/^  typedef ::std::tr1::tuple<T1, T2, T3, T4, T5, T6> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator6
ParamType	src/gtest/gtest.h	/^  typedef ::std::tr1::tuple<T1, T2, T3, T4, T5> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator5
ParamType	src/gtest/gtest.h	/^  typedef ::std::tr1::tuple<T1, T2, T3, T4> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator4
ParamType	src/gtest/gtest.h	/^  typedef ::std::tr1::tuple<T1, T2, T3> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator3
ParamType	src/gtest/gtest.h	/^  typedef ::std::tr1::tuple<T1, T2> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator2
ParamType	src/gtest/gtest.h	/^  typedef T ParamType;$/;"	t	class:testing::WithParamInterface
ParamType	src/gtest/gtest.h	/^  typedef T ParamType;$/;"	t	class:testing::internal::ParamGeneratorInterface
ParamType	src/gtest/gtest.h	/^  typedef typename TestCase::ParamType ParamType;$/;"	t	class:testing::internal::ParameterizedTestCaseInfo
ParamType	src/gtest/gtest.h	/^  typedef typename TestCase::ParamType ParamType;$/;"	t	class:testing::internal::TestMetaFactory
ParamType	src/gtest/gtest.h	/^  typedef typename TestClass::ParamType ParamType;$/;"	t	class:testing::internal::ParameterizedTestFactory
ParameterLayer	include/caffe/layers/parameter_layer.hpp	/^  explicit ParameterLayer(const LayerParameter& param)$/;"	f	class:caffe::ParameterLayer
ParameterLayer	include/caffe/layers/parameter_layer.hpp	/^class ParameterLayer : public Layer<Dtype> {$/;"	c	namespace:caffe
ParameterLayer	python/caffe/test/test_python_layer.py	/^class ParameterLayer(caffe.Layer):$/;"	c
ParameterizedTestCaseInfo	src/gtest/gtest.h	/^  explicit ParameterizedTestCaseInfo(const char* name)$/;"	f	class:testing::internal::ParameterizedTestCaseInfo
ParameterizedTestCaseInfo	src/gtest/gtest.h	/^class ParameterizedTestCaseInfo : public ParameterizedTestCaseInfoBase {$/;"	c	namespace:testing::internal
ParameterizedTestCaseInfoBase	src/gtest/gtest.h	/^  ParameterizedTestCaseInfoBase() {}$/;"	f	class:testing::internal::ParameterizedTestCaseInfoBase
ParameterizedTestCaseInfoBase	src/gtest/gtest.h	/^class ParameterizedTestCaseInfoBase {$/;"	c	namespace:testing::internal
ParameterizedTestCaseRegistry	src/gtest/gtest.h	/^  ParameterizedTestCaseRegistry() {}$/;"	f	class:testing::internal::ParameterizedTestCaseRegistry
ParameterizedTestCaseRegistry	src/gtest/gtest.h	/^class ParameterizedTestCaseRegistry {$/;"	c	namespace:testing::internal
ParameterizedTestFactory	src/gtest/gtest.h	/^  explicit ParameterizedTestFactory(ParamType parameter) :$/;"	f	class:testing::internal::ParameterizedTestFactory
ParameterizedTestFactory	src/gtest/gtest.h	/^class ParameterizedTestFactory : public TestFactoryBase {$/;"	c	namespace:testing::internal
Parameters	python/caffe/net_spec.py	/^class Parameters(object):$/;"	c
Params	include/caffe/parallel.hpp	/^class Params {$/;"	c	namespace:caffe
Params	src/caffe/parallel.cpp	/^Params<Dtype>::Params(shared_ptr<Solver<Dtype> > root_solver)$/;"	f	class:caffe::Params
ParseArguments	scripts/cpp_lint.py	/^def ParseArguments(args):$/;"	f
ParseBoolFlag	src/gtest/gtest-all.cpp	/^bool ParseBoolFlag(const char* str, const char* flag, bool* value) {$/;"	f	namespace:testing::internal
ParseFlagValue	src/gtest/gtest-all.cpp	/^const char* ParseFlagValue(const char* str,$/;"	f	namespace:testing::internal
ParseGoogleTestFlagsOnly	src/gtest/gtest-all.cpp	/^void ParseGoogleTestFlagsOnly(int* argc, char** argv) {$/;"	f	namespace:testing::internal
ParseGoogleTestFlagsOnly	src/gtest/gtest-all.cpp	/^void ParseGoogleTestFlagsOnly(int* argc, wchar_t** argv) {$/;"	f	namespace:testing::internal
ParseGoogleTestFlagsOnlyImpl	src/gtest/gtest-all.cpp	/^void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {$/;"	f	namespace:testing::internal
ParseInt32	src/gtest/gtest-all.cpp	/^bool ParseInt32(const Message& src_text, const char* str, Int32* value) {$/;"	f	namespace:testing::internal
ParseInt32Flag	src/gtest/gtest-all.cpp	/^bool ParseInt32Flag(const char* str, const char* flag, Int32* value) {$/;"	f	namespace:testing::internal
ParseInternalRunDeathTestFlag	src/gtest/gtest-all.cpp	/^InternalRunDeathTestFlag* ParseInternalRunDeathTestFlag() {$/;"	f	namespace:testing::internal
ParseNaturalNumber	src/gtest/gtest-all.cpp	/^bool ParseNaturalNumber(const ::std::string& str, Integer* number) {$/;"	f	namespace:testing::internal
ParseNolintSuppressions	scripts/cpp_lint.py	/^def ParseNolintSuppressions(filename, raw_line, linenum, error):$/;"	f
ParseStringFlag	src/gtest/gtest-all.cpp	/^bool ParseStringFlag(const char* str, const char* flag, String* value) {$/;"	f	namespace:testing::internal
PartialMatch	src/gtest/gtest-all.cpp	/^bool RE::PartialMatch(const char* str, const RE& re) {$/;"	f	class:testing::internal::RE
PartialMatch	src/gtest/gtest.h	/^  static bool PartialMatch(const ::std::string& str, const RE& re) {$/;"	f	class:std::tr1::RE
PartialMatch	src/gtest/gtest.h	/^  static bool PartialMatch(const ::string& str, const RE& re) {$/;"	f	class:std::tr1::RE
PascalMultilabelDataLayerSync	examples/pycaffe/layers/pascal_multilabel_datalayers.py	/^class PascalMultilabelDataLayerSync(caffe.Layer):$/;"	c
Passed	src/gtest/gtest-all.cpp	/^  bool Passed() const { return !Failed(); }$/;"	f	class:testing::internal::UnitTestImpl
Passed	src/gtest/gtest-all.cpp	/^bool DeathTestImpl::Passed(bool status_ok) {$/;"	f	class:testing::internal::DeathTestImpl
Passed	src/gtest/gtest-all.cpp	/^bool UnitTest::Passed() const { return impl()->Passed(); }$/;"	f	class:testing::UnitTest
Passed	src/gtest/gtest.h	/^  bool Passed() const { return !Failed(); }$/;"	f	class:testing::TestCase
Passed	src/gtest/gtest.h	/^  bool Passed() const { return !Failed(); }$/;"	f	class:testing::TestResult
PatternMatchesString	src/gtest/gtest-all.cpp	/^bool UnitTestOptions::PatternMatchesString(const char *pattern,$/;"	f	class:testing::internal::UnitTestOptions
PhaseLayer	python/caffe/test/test_python_layer.py	/^class PhaseLayer(caffe.Layer):$/;"	c
PlatformTest	src/caffe/test/test_platform.cpp	/^class PlatformTest : public ::testing::Test {};$/;"	c	namespace:caffe	file:
PoolingLayer	include/caffe/layers/pooling_layer.hpp	/^  explicit PoolingLayer(const LayerParameter& param)$/;"	f	class:caffe::PoolingLayer
PoolingLayer	include/caffe/layers/pooling_layer.hpp	/^class PoolingLayer : public Layer<Dtype> {$/;"	c	namespace:caffe
PoolingLayerTest	src/caffe/test/test_pooling_layer.cpp	/^  PoolingLayerTest()$/;"	f	class:caffe::PoolingLayerTest
PoolingLayerTest	src/caffe/test/test_pooling_layer.cpp	/^class PoolingLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
PopGTestTrace	src/gtest/gtest-all.cpp	/^void UnitTest::PopGTestTrace() {$/;"	f	class:testing::UnitTest
PositiveUnitballFiller	include/caffe/filler.hpp	/^  explicit PositiveUnitballFiller(const FillerParameter& param)$/;"	f	class:caffe::PositiveUnitballFiller
PositiveUnitballFiller	include/caffe/filler.hpp	/^class PositiveUnitballFiller : public Filler<Dtype> {$/;"	c	namespace:caffe
PositiveUnitballFillerTest	src/caffe/test/test_filler.cpp	/^  PositiveUnitballFillerTest()$/;"	f	class:caffe::PositiveUnitballFillerTest
PositiveUnitballFillerTest	src/caffe/test/test_filler.cpp	/^class PositiveUnitballFillerTest : public ::testing::Test {$/;"	c	namespace:caffe	file:
PostFlagParsingInit	src/gtest/gtest-all.cpp	/^void UnitTestImpl::PostFlagParsingInit() {$/;"	f	class:testing::internal::UnitTestImpl
PowerLayer	include/caffe/layers/power_layer.hpp	/^  explicit PowerLayer(const LayerParameter& param)$/;"	f	class:caffe::PowerLayer
PowerLayer	include/caffe/layers/power_layer.hpp	/^class PowerLayer : public NeuronLayer<Dtype> {$/;"	c	namespace:caffe
PowerLayerTest	src/caffe/test/test_power_layer.cpp	/^  PowerLayerTest()$/;"	f	class:caffe::PowerLayerTest
PowerLayerTest	src/caffe/test/test_power_layer.cpp	/^class PowerLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
PreSolve	src/caffe/solvers/sgd_solver.cpp	/^void SGDSolver<Dtype>::PreSolve() {$/;"	f	class:caffe::SGDSolver
Predict	examples/cpp_classification/classification.cpp	/^std::vector<float> Classifier::Predict(const cv::Mat& img) {$/;"	f	class:Classifier
Prediction	examples/cpp_classification/classification.cpp	/^typedef std::pair<string, float> Prediction;$/;"	t	file:
PrefetchRand	src/caffe/layers/window_data_layer.cpp	/^unsigned int WindowDataLayer<Dtype>::PrefetchRand() {$/;"	f	class:caffe::WindowDataLayer
Preprocess	examples/cpp_classification/classification.cpp	/^void Classifier::Preprocess(const cv::Mat& img,$/;"	f	class:Classifier
PrettyUnitTestResultPrinter	src/gtest/gtest-all.cpp	/^  PrettyUnitTestResultPrinter() {}$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
PrettyUnitTestResultPrinter	src/gtest/gtest-all.cpp	/^class PrettyUnitTestResultPrinter : public TestEventListener {$/;"	c	namespace:testing::internal	file:
Print	src/gtest/gtest.h	/^  static void Print(const T& value, ::std::ostream* os) {$/;"	f	class:testing::internal::UniversalPrinter
PrintAsCharLiteralTo	src/gtest/gtest-all.cpp	/^static CharFormat PrintAsCharLiteralTo(Char c, ostream* os) {$/;"	f	namespace:testing::internal
PrintAsNarrowStringLiteralTo	src/gtest/gtest-all.cpp	/^static CharFormat PrintAsNarrowStringLiteralTo(char c, ostream* os) {$/;"	f	namespace:testing::internal
PrintAsWideStringLiteralTo	src/gtest/gtest-all.cpp	/^static CharFormat PrintAsWideStringLiteralTo(wchar_t c, ostream* os) {$/;"	f	namespace:testing::internal
PrintByteSegmentInObjectTo	src/gtest/gtest-all.cpp	/^void PrintByteSegmentInObjectTo(const unsigned char* obj_bytes, size_t start,$/;"	f	namespace:testing::__anon6
PrintBytesInObjectTo	src/gtest/gtest-all.cpp	/^void PrintBytesInObjectTo(const unsigned char* obj_bytes, size_t count,$/;"	f	namespace:testing::internal2
PrintBytesInObjectToImpl	src/gtest/gtest-all.cpp	/^void PrintBytesInObjectToImpl(const unsigned char* obj_bytes, size_t count,$/;"	f	namespace:testing::__anon6
PrintCategories	scripts/cpp_lint.py	/^def PrintCategories():$/;"	f
PrintCharAndCodeTo	src/gtest/gtest-all.cpp	/^void PrintCharAndCodeTo(Char c, ostream* os) {$/;"	f	namespace:testing::internal
PrintCharsAsStringTo	src/gtest/gtest-all.cpp	/^static void PrintCharsAsStringTo(const char* begin, size_t len, ostream* os) {$/;"	f	namespace:testing::internal
PrintColorEncoded	src/gtest/gtest-all.cpp	/^static void PrintColorEncoded(const char* str) {$/;"	f	namespace:testing::internal
PrintErrorCounts	scripts/cpp_lint.py	/^  def PrintErrorCounts(self):$/;"	m	class:_CppLintState
PrintFailedTests	src/gtest/gtest-all.cpp	/^void PrettyUnitTestResultPrinter::PrintFailedTests(const UnitTest& unit_test) {$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
PrintFullTestCommentIfPresent	src/gtest/gtest-all.cpp	/^void PrintFullTestCommentIfPresent(const TestInfo& test_info) {$/;"	f	namespace:testing::internal
PrintPrefixTo	src/gtest/gtest.h	/^  static void PrintPrefixTo(const Tuple& t, ::std::ostream* os) {$/;"	f	struct:testing::internal::TuplePrefixPrinter
PrintPrefixTo	src/gtest/gtest.h	/^  static void PrintPrefixTo(const Tuple&, ::std::ostream*) {}$/;"	f	struct:testing::internal::TuplePrefixPrinter
PrintRawArrayTo	src/gtest/gtest.h	/^void PrintRawArrayTo(const T a[], size_t count, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintStringTo	src/gtest/gtest-all.cpp	/^void PrintStringTo(const ::std::string& s, ostream* os) {$/;"	f	namespace:testing::internal
PrintStringTo	src/gtest/gtest-all.cpp	/^void PrintStringTo(const ::string& s, ostream* os) {$/;"	f	namespace:testing::internal
PrintTestName	src/gtest/gtest-all.cpp	/^  static void PrintTestName(const char * test_case, const char * test) {$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
PrintTestPartResult	src/gtest/gtest-all.cpp	/^static void PrintTestPartResult(const TestPartResult& test_part_result) {$/;"	f	namespace:testing
PrintTestPartResultToString	src/gtest/gtest-all.cpp	/^static internal::String PrintTestPartResultToString($/;"	f	namespace:testing
PrintTo	src/gtest/gtest-all.cpp	/^void PrintTo(const char* s, ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/gtest/gtest-all.cpp	/^void PrintTo(const wchar_t* s, ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/gtest/gtest-all.cpp	/^void PrintTo(signed char c, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/gtest/gtest-all.cpp	/^void PrintTo(unsigned char c, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/gtest/gtest-all.cpp	/^void PrintTo(wchar_t wc, ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/gtest/gtest.h	/^inline void PrintTo(bool x, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/gtest/gtest.h	/^inline void PrintTo(char c, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/gtest/gtest.h	/^inline void PrintTo(char* s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/gtest/gtest.h	/^inline void PrintTo(const ::std::string& s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/gtest/gtest.h	/^inline void PrintTo(const ::std::tr1::tuple<>& t, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/gtest/gtest.h	/^inline void PrintTo(const ::std::wstring& s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/gtest/gtest.h	/^inline void PrintTo(const ::string& s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/gtest/gtest.h	/^inline void PrintTo(const ::wstring& s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/gtest/gtest.h	/^inline void PrintTo(const signed char* s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/gtest/gtest.h	/^inline void PrintTo(const unsigned char* s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/gtest/gtest.h	/^inline void PrintTo(signed char* s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/gtest/gtest.h	/^inline void PrintTo(unsigned char* s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/gtest/gtest.h	/^inline void PrintTo(wchar_t* s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/gtest/gtest.h	/^void PrintTo($/;"	f	namespace:testing::internal
PrintTo	src/gtest/gtest.h	/^void PrintTo(const ::std::pair<T1, T2>& value, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/gtest/gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8, T9>& t,$/;"	f	namespace:testing::internal
PrintTo	src/gtest/gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8>& t,$/;"	f	namespace:testing::internal
PrintTo	src/gtest/gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7>& t,$/;"	f	namespace:testing::internal
PrintTo	src/gtest/gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4, T5, T6>& t,$/;"	f	namespace:testing::internal
PrintTo	src/gtest/gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4, T5>& t,$/;"	f	namespace:testing::internal
PrintTo	src/gtest/gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4>& t, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/gtest/gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2, T3>& t, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/gtest/gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2>& t, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/gtest/gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1>& t, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/gtest/gtest.h	/^void PrintTo(const T& value, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintToString	src/gtest/gtest.h	/^::std::string PrintToString(const T& value) {$/;"	f	namespace:testing
PrintTupleTo	src/gtest/gtest.h	/^void PrintTupleTo(const T& t, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintUsage	scripts/cpp_lint.py	/^def PrintUsage(message):$/;"	f
PrintValue	src/gtest/gtest.h	/^  static void PrintValue(const T& value, ::std::ostream* os) {$/;"	f	class:testing::internal2::TypeWithoutFormatter
PrintWideCharsAsStringTo	src/gtest/gtest-all.cpp	/^static void PrintWideCharsAsStringTo(const wchar_t* begin, size_t len,$/;"	f	namespace:testing::internal
PrintWideStringTo	src/gtest/gtest-all.cpp	/^void PrintWideStringTo(const ::std::wstring& s, ostream* os) {$/;"	f	namespace:testing::internal
PrintWideStringTo	src/gtest/gtest-all.cpp	/^void PrintWideStringTo(const ::wstring& s, ostream* os) {$/;"	f	namespace:testing::internal
PrintXmlTestCase	src/gtest/gtest-all.cpp	/^void XmlUnitTestResultPrinter::PrintXmlTestCase(FILE* out,$/;"	f	class:testing::internal::XmlUnitTestResultPrinter
PrintXmlUnitTest	src/gtest/gtest-all.cpp	/^void XmlUnitTestResultPrinter::PrintXmlUnitTest(FILE* out,$/;"	f	class:testing::internal::XmlUnitTestResultPrinter
Process	python/train.py	/^from multiprocessing import Process$/;"	i
ProcessFile	scripts/cpp_lint.py	/^def ProcessFile(filename, vlevel, extra_check_functions=[]):$/;"	f
ProcessFileData	scripts/cpp_lint.py	/^def ProcessFileData(filename, file_extension, lines, error,$/;"	f
ProcessLine	scripts/cpp_lint.py	/^def ProcessLine(filename, file_extension, clean_lines, line,$/;"	f
ProtoTest	src/caffe/test/test_protobuf.cpp	/^class ProtoTest : public ::testing::Test {};$/;"	c	namespace:caffe	file:
PushGTestTrace	src/gtest/gtest-all.cpp	/^void UnitTest::PushGTestTrace(const internal::TraceInfo& trace) {$/;"	f	class:testing::UnitTest
Put	include/caffe/util/db_leveldb.hpp	/^  virtual void Put(const string& key, const string& value) {$/;"	f	class:caffe::db::LevelDBTransaction
Put	src/caffe/util/db_lmdb.cpp	/^void LMDBTransaction::Put(const string& key, const string& value) {$/;"	f	class:caffe::db::LMDBTransaction
PyArray_SetBaseObject	python/caffe/_caffe.cpp	/^#define PyArray_SetBaseObject(/;"	d	file:
PythonLayer	include/caffe/layers/python_layer.hpp	/^  PythonLayer(PyObject* self, const LayerParameter& param)$/;"	f	class:caffe::PythonLayer
PythonLayer	include/caffe/layers/python_layer.hpp	/^class PythonLayer : public Layer<Dtype> {$/;"	c	namespace:caffe
RE	src/gtest/gtest.h	/^  RE(const ::std::string& regex) { Init(regex.c_str()); }  \/\/ NOLINT$/;"	f	class:std::tr1::RE
RE	src/gtest/gtest.h	/^  RE(const ::string& regex) { Init(regex.c_str()); }  \/\/ NOLINT$/;"	f	class:std::tr1::RE
RE	src/gtest/gtest.h	/^  RE(const RE& other) { Init(other.pattern()); }$/;"	f	class:std::tr1::RE
RE	src/gtest/gtest.h	/^  RE(const char* regex) { Init(regex); }  \/\/ NOLINT$/;"	f	class:std::tr1::RE
RE	src/gtest/gtest.h	/^class GTEST_API_ RE {$/;"	c	namespace:std::tr1
READ	include/caffe/util/db.hpp	/^enum Mode { READ, WRITE, NEW };$/;"	e	enum:caffe::db::Mode
REGISTER_LAYER_CLASS	include/caffe/layer_factory.hpp	/^#define REGISTER_LAYER_CLASS(/;"	d
REGISTER_LAYER_CREATOR	include/caffe/layer_factory.hpp	/^#define REGISTER_LAYER_CREATOR(/;"	d
REGISTER_SOLVER_CLASS	include/caffe/solver_factory.hpp	/^#define REGISTER_SOLVER_CLASS(/;"	d
REGISTER_SOLVER_CREATOR	include/caffe/solver_factory.hpp	/^#define REGISTER_SOLVER_CREATOR(/;"	d
REGISTER_TYPED_TEST_CASE_P	src/gtest/gtest.h	/^# define REGISTER_TYPED_TEST_CASE_P(/;"	d
RELEASE_BUILD_DIR	Makefile	/^	RELEASE_BUILD_DIR := .$(BUILD_DIR)_release$/;"	m
REPO_DIRNAME	examples/web_demo/app.py	/^REPO_DIRNAME = os.path.abspath(os.path.dirname(os.path.abspath(__file__)) + '\/..\/..')$/;"	v
RETURNED	src/gtest/gtest-all.cpp	/^enum DeathTestOutcome { IN_PROGRESS, DIED, LIVED, RETURNED, THREW };$/;"	e	enum:testing::internal::DeathTestOutcome	file:
RMSPropSolver	include/caffe/sgd_solvers.hpp	/^  explicit RMSPropSolver(const SolverParameter& param)$/;"	f	class:caffe::RMSPropSolver
RMSPropSolver	include/caffe/sgd_solvers.hpp	/^  explicit RMSPropSolver(const string& param_file)$/;"	f	class:caffe::RMSPropSolver
RMSPropSolver	include/caffe/sgd_solvers.hpp	/^class RMSPropSolver : public SGDSolver<Dtype> {$/;"	c	namespace:caffe
RMSPropSolver	python/caffe/__init__.py	/^from .pycaffe import Net, SGDSolver, NesterovSolver, AdaGradSolver, RMSPropSolver, AdaDeltaSolver, AdamSolver, NCCL, Timer$/;"	i
RMSPropSolver	python/caffe/pycaffe.py	/^        RMSPropSolver, AdaDeltaSolver, AdamSolver, NCCL, Timer$/;"	i
RMSPropSolverTest	src/caffe/test/test_gradient_based_solver.cpp	/^class RMSPropSolverTest : public GradientBasedSolverTest<TypeParam> {$/;"	c	namespace:caffe	file:
RNG	include/caffe/common.hpp	/^  class RNG {$/;"	c	class:caffe::Caffe
RNG	src/caffe/common.cpp	/^Caffe::RNG::RNG() : generator_(new Generator()) { }$/;"	f	class:caffe::Caffe::RNG
RNG	src/caffe/common.cpp	/^Caffe::RNG::RNG(unsigned int seed) : generator_(new Generator(seed)) { }$/;"	f	class:caffe::Caffe::RNG
RNNLayer	include/caffe/layers/rnn_layer.hpp	/^  explicit RNNLayer(const LayerParameter& param)$/;"	f	class:caffe::RNNLayer
RNNLayer	include/caffe/layers/rnn_layer.hpp	/^class RNNLayer : public RecurrentLayer<Dtype> {$/;"	c	namespace:caffe
RNNLayerTest	src/caffe/test/test_rnn_layer.cpp	/^  RNNLayerTest() : num_output_(7) {$/;"	f	class:caffe::RNNLayerTest
RNNLayerTest	src/caffe/test/test_rnn_layer.cpp	/^class RNNLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
RUN_ALL_TESTS	src/gtest/gtest.h	/^#define RUN_ALL_TESTS(/;"	d
Rand	src/caffe/data_transformer.cpp	/^int DataTransformer<Dtype>::Rand(int n) {$/;"	f	class:caffe::DataTransformer
Random	src/gtest/gtest.h	/^  explicit Random(UInt32 seed) : state_(seed) {}$/;"	f	class:testing::internal::Random
Random	src/gtest/gtest.h	/^class GTEST_API_ Random {$/;"	c	namespace:testing::internal
RandomNumberGeneratorTest	src/caffe/test/test_random_number_generator.cpp	/^  RandomNumberGeneratorTest()$/;"	f	class:caffe::RandomNumberGeneratorTest
RandomNumberGeneratorTest	src/caffe/test/test_random_number_generator.cpp	/^class RandomNumberGeneratorTest : public ::testing::Test {$/;"	c	namespace:caffe	file:
Range	src/gtest/gtest.h	/^internal::ParamGenerator<T> Range(T start, T end) {$/;"	f	namespace:testing
Range	src/gtest/gtest.h	/^internal::ParamGenerator<T> Range(T start, T end, IncrementT step) {$/;"	f	namespace:testing
RangeGenerator	src/gtest/gtest.h	/^  RangeGenerator(T begin, T end, IncrementT step)$/;"	f	class:testing::internal::RangeGenerator
RangeGenerator	src/gtest/gtest.h	/^class RangeGenerator : public ParamGeneratorInterface<T> {$/;"	c	namespace:testing::internal
ReLULayer	include/caffe/layers/relu_layer.hpp	/^  explicit ReLULayer(const LayerParameter& param)$/;"	f	class:caffe::ReLULayer
ReLULayer	include/caffe/layers/relu_layer.hpp	/^class ReLULayer : public NeuronLayer<Dtype> {$/;"	c	namespace:caffe
ReactionToSharding	src/gtest/gtest-all.cpp	/^  enum ReactionToSharding {$/;"	g	class:testing::internal::UnitTestImpl	file:
Read	src/gtest/gtest.h	/^inline int Read(int fd, void* buf, unsigned int count) {$/;"	f	namespace:std::tr1::posix
ReadAndInterpretStatusByte	src/gtest/gtest-all.cpp	/^void DeathTestImpl::ReadAndInterpretStatusByte() {$/;"	f	class:testing::internal::DeathTestImpl
ReadEntireFile	src/gtest/gtest-all.cpp	/^String CapturedStream::ReadEntireFile(FILE* file) {$/;"	f	class:testing::internal::CapturedStream
ReadFileToDatum	include/caffe/util/io.hpp	/^inline bool ReadFileToDatum(const string& filename, Datum* datum) {$/;"	f	namespace:caffe
ReadFileToDatum	src/caffe/util/io.cpp	/^bool ReadFileToDatum(const string& filename, const int label,$/;"	f	namespace:caffe
ReadImageToCVMat	src/caffe/util/io.cpp	/^cv::Mat ReadImageToCVMat(const string& filename) {$/;"	f	namespace:caffe
ReadImageToCVMat	src/caffe/util/io.cpp	/^cv::Mat ReadImageToCVMat(const string& filename,$/;"	f	namespace:caffe
ReadImageToDatum	include/caffe/util/io.hpp	/^inline bool ReadImageToDatum(const string& filename, const int label,$/;"	f	namespace:caffe
ReadImageToDatum	src/caffe/util/io.cpp	/^bool ReadImageToDatum(const string& filename, const int label,$/;"	f	namespace:caffe
ReadImageToDatumReference	src/caffe/test/test_io.cpp	/^bool ReadImageToDatumReference(const string& filename, const int label,$/;"	f	namespace:caffe
ReadNetParamsFromBinaryFileOrDie	src/caffe/util/upgrade_proto.cpp	/^void ReadNetParamsFromBinaryFileOrDie(const string& param_file,$/;"	f	namespace:caffe
ReadNetParamsFromTextFileOrDie	src/caffe/util/upgrade_proto.cpp	/^void ReadNetParamsFromTextFileOrDie(const string& param_file,$/;"	f	namespace:caffe
ReadProtoFromBinaryFile	include/caffe/util/io.hpp	/^inline bool ReadProtoFromBinaryFile(const string& filename, Message* proto) {$/;"	f	namespace:caffe
ReadProtoFromBinaryFile	src/caffe/util/io.cpp	/^bool ReadProtoFromBinaryFile(const char* filename, Message* proto) {$/;"	f	namespace:caffe
ReadProtoFromBinaryFileOrDie	include/caffe/util/io.hpp	/^inline void ReadProtoFromBinaryFileOrDie(const char* filename, Message* proto) {$/;"	f	namespace:caffe
ReadProtoFromBinaryFileOrDie	include/caffe/util/io.hpp	/^inline void ReadProtoFromBinaryFileOrDie(const string& filename,$/;"	f	namespace:caffe
ReadProtoFromTextFile	include/caffe/util/io.hpp	/^inline bool ReadProtoFromTextFile(const string& filename, Message* proto) {$/;"	f	namespace:caffe
ReadProtoFromTextFile	src/caffe/util/io.cpp	/^bool ReadProtoFromTextFile(const char* filename, Message* proto) {$/;"	f	namespace:caffe
ReadProtoFromTextFileOrDie	include/caffe/util/io.hpp	/^inline void ReadProtoFromTextFileOrDie(const char* filename, Message* proto) {$/;"	f	namespace:caffe
ReadProtoFromTextFileOrDie	include/caffe/util/io.hpp	/^inline void ReadProtoFromTextFileOrDie(const string& filename, Message* proto) {$/;"	f	namespace:caffe
ReadSolverParamsFromTextFileOrDie	src/caffe/util/upgrade_proto.cpp	/^void ReadSolverParamsFromTextFileOrDie(const string& param_file,$/;"	f	namespace:caffe
RecordProperty	src/gtest/gtest-all.cpp	/^  static void RecordProperty(TestResult* test_result,$/;"	f	class:testing::internal::TestResultAccessor
RecordProperty	src/gtest/gtest-all.cpp	/^void Test::RecordProperty(const char* key, const char* value) {$/;"	f	class:testing::Test
RecordProperty	src/gtest/gtest-all.cpp	/^void Test::RecordProperty(const char* key, int value) {$/;"	f	class:testing::Test
RecordProperty	src/gtest/gtest-all.cpp	/^void TestResult::RecordProperty(const TestProperty& test_property) {$/;"	f	class:testing::TestResult
RecordPropertyForCurrentTest	src/gtest/gtest-all.cpp	/^void UnitTest::RecordPropertyForCurrentTest(const char* key,$/;"	f	class:testing::UnitTest
RecurrentInputBlobNames	src/caffe/layers/lstm_layer.cpp	/^void LSTMLayer<Dtype>::RecurrentInputBlobNames(vector<string>* names) const {$/;"	f	class:caffe::LSTMLayer
RecurrentInputBlobNames	src/caffe/layers/rnn_layer.cpp	/^void RNNLayer<Dtype>::RecurrentInputBlobNames(vector<string>* names) const {$/;"	f	class:caffe::RNNLayer
RecurrentInputShapes	src/caffe/layers/lstm_layer.cpp	/^void LSTMLayer<Dtype>::RecurrentInputShapes(vector<BlobShape>* shapes) const {$/;"	f	class:caffe::LSTMLayer
RecurrentInputShapes	src/caffe/layers/rnn_layer.cpp	/^void RNNLayer<Dtype>::RecurrentInputShapes(vector<BlobShape>* shapes) const {$/;"	f	class:caffe::RNNLayer
RecurrentLayer	include/caffe/layers/recurrent_layer.hpp	/^  explicit RecurrentLayer(const LayerParameter& param)$/;"	f	class:caffe::RecurrentLayer
RecurrentLayer	include/caffe/layers/recurrent_layer.hpp	/^class RecurrentLayer : public Layer<Dtype> {$/;"	c	namespace:caffe
RecurrentOutputBlobNames	src/caffe/layers/lstm_layer.cpp	/^void LSTMLayer<Dtype>::RecurrentOutputBlobNames(vector<string>* names) const {$/;"	f	class:caffe::LSTMLayer
RecurrentOutputBlobNames	src/caffe/layers/rnn_layer.cpp	/^void RNNLayer<Dtype>::RecurrentOutputBlobNames(vector<string>* names) const {$/;"	f	class:caffe::RNNLayer
ReduceBottomBlobSize	src/caffe/test/test_slice_layer.cpp	/^  virtual void ReduceBottomBlobSize() {$/;"	f	class:caffe::SliceLayerTest
ReductionLayer	include/caffe/layers/reduction_layer.hpp	/^  explicit ReductionLayer(const LayerParameter& param)$/;"	f	class:caffe::ReductionLayer
ReductionLayer	include/caffe/layers/reduction_layer.hpp	/^class ReductionLayer : public Layer<Dtype> {$/;"	c	namespace:caffe
ReductionLayerTest	src/caffe/test/test_reduction_layer.cpp	/^  ReductionLayerTest()$/;"	f	class:caffe::ReductionLayerTest
ReductionLayerTest	src/caffe/test/test_reduction_layer.cpp	/^class ReductionLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
ReferenceLRNForward	src/caffe/test/test_lrn_layer.cpp	/^void CuDNNLRNLayerTest<TypeParam>::ReferenceLRNForward($/;"	f	class:caffe::CuDNNLRNLayerTest
ReferenceLRNForward	src/caffe/test/test_lrn_layer.cpp	/^void LRNLayerTest<TypeParam>::ReferenceLRNForward($/;"	f	class:caffe::LRNLayerTest
Register	src/gtest/gtest.h	/^  static bool Register(const char* \/*prefix*\/, const char* \/*case_name*\/,$/;"	f	class:testing::internal::TypeParameterizedTest
Register	src/gtest/gtest.h	/^  static bool Register(const char* \/*prefix*\/, const char* \/*case_name*\/,$/;"	f	class:testing::internal::TypeParameterizedTestCase
Register	src/gtest/gtest.h	/^  static bool Register(const char* prefix, const char* case_name,$/;"	f	class:testing::internal::TypeParameterizedTest
Register	src/gtest/gtest.h	/^  static bool Register(const char* prefix, const char* case_name,$/;"	f	class:testing::internal::TypeParameterizedTestCase
RegisterBrewFunction	tools/caffe.cpp	/^#define RegisterBrewFunction(/;"	d	file:
RegisterParameterizedTests	src/gtest/gtest-all.cpp	/^void UnitTestImpl::RegisterParameterizedTests() {$/;"	f	class:testing::internal::UnitTestImpl
RegisterTests	src/gtest/gtest.h	/^  virtual void RegisterTests() {$/;"	f	class:testing::internal::ParameterizedTestCaseInfo
RegisterTests	src/gtest/gtest.h	/^  void RegisterTests() {$/;"	f	class:testing::internal::ParameterizedTestCaseRegistry
Registry	include/caffe/layer_factory.hpp	/^  static CreatorRegistry& Registry() {$/;"	f	class:caffe::LayerRegistry
Registry	include/caffe/solver_factory.hpp	/^  static CreatorRegistry& Registry() {$/;"	f	class:caffe::SolverRegistry
Regularize	src/caffe/solvers/sgd_solver.cpp	/^void SGDSolver<Dtype>::Regularize(int param_id) {$/;"	f	class:caffe::SGDSolver
ReinterpretBits	src/gtest/gtest.h	/^  static RawType ReinterpretBits(const Bits bits) {$/;"	f	class:testing::internal::FloatingPoint
RelationToSource	src/gtest/gtest.h	/^enum RelationToSource {$/;"	g	namespace:testing::internal
Release	src/gtest/gtest-all.cpp	/^TestEventListener* TestEventListeners::Release(TestEventListener* listener) {$/;"	f	class:testing::TestEventListeners
Release	src/gtest/gtest-all.cpp	/^TestEventListener* TestEventRepeater::Release(TestEventListener *listener) {$/;"	f	class:testing::internal::TestEventRepeater
RemoveConst	src/gtest/gtest.h	/^struct RemoveConst { typedef T type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
RemoveConst	src/gtest/gtest.h	/^struct RemoveConst<const T> { typedef T type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
RemoveConst	src/gtest/gtest.h	/^struct RemoveConst<const T[N]> {$/;"	s	namespace:testing::internal
RemoveDirectoryName	src/gtest/gtest-all.cpp	/^FilePath FilePath::RemoveDirectoryName() const {$/;"	f	class:testing::internal::FilePath
RemoveExtension	src/gtest/gtest-all.cpp	/^FilePath FilePath::RemoveExtension(const char* extension) const {$/;"	f	class:testing::internal::FilePath
RemoveFileName	src/gtest/gtest-all.cpp	/^FilePath FilePath::RemoveFileName() const {$/;"	f	class:testing::internal::FilePath
RemoveInvalidXmlCharacters	src/gtest/gtest-all.cpp	/^string XmlUnitTestResultPrinter::RemoveInvalidXmlCharacters(const string& str) {$/;"	f	class:testing::internal::XmlUnitTestResultPrinter
RemoveMultiLineComments	scripts/cpp_lint.py	/^def RemoveMultiLineComments(filename, lines, error):$/;"	f
RemoveMultiLineCommentsFromRange	scripts/cpp_lint.py	/^def RemoveMultiLineCommentsFromRange(lines, begin, end):$/;"	f
RemoveReference	src/gtest/gtest.h	/^struct RemoveReference { typedef T type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
RemoveReference	src/gtest/gtest.h	/^struct RemoveReference<T&> { typedef T type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
RemoveTrailingPathSeparator	src/gtest/gtest-all.cpp	/^FilePath FilePath::RemoveTrailingPathSeparator() const {$/;"	f	class:testing::internal::FilePath
ReplaceAll	scripts/cpp_lint.py	/^def ReplaceAll(pattern, rep, s):$/;"	f
ReportFailureInUnknownLocation	src/gtest/gtest-all.cpp	/^void ReportFailureInUnknownLocation(TestPartResult::Type result_type,$/;"	f	namespace:testing::internal
ReportInvalidTestCaseType	src/gtest/gtest-all.cpp	/^void ReportInvalidTestCaseType(const char* test_case_name,$/;"	f	namespace:testing::internal
ReportTestPartResult	src/gtest/gtest-all.cpp	/^void DefaultGlobalTestPartResultReporter::ReportTestPartResult($/;"	f	class:testing::internal::DefaultGlobalTestPartResultReporter
ReportTestPartResult	src/gtest/gtest-all.cpp	/^void DefaultPerThreadTestPartResultReporter::ReportTestPartResult($/;"	f	class:testing::internal::DefaultPerThreadTestPartResultReporter
ReportTestPartResult	src/gtest/gtest-all.cpp	/^void HasNewFatalFailureHelper::ReportTestPartResult($/;"	f	class:testing::internal::HasNewFatalFailureHelper
ReportTestPartResult	src/gtest/gtest-all.cpp	/^void ScopedFakeTestPartResultReporter::ReportTestPartResult($/;"	f	class:testing::ScopedFakeTestPartResultReporter
RepositoryName	scripts/cpp_lint.py	/^  def RepositoryName(self):$/;"	m	class:FileInfo
Reseed	src/gtest/gtest.h	/^  void Reseed(UInt32 seed) { state_ = seed; }$/;"	f	class:testing::internal::Random
Reset	src/caffe/layers/memory_data_layer.cpp	/^void MemoryDataLayer<Dtype>::Reset(Dtype* data, Dtype* labels, int n) {$/;"	f	class:caffe::MemoryDataLayer
Reset	src/caffe/layers/recurrent_layer.cpp	/^void RecurrentLayer<Dtype>::Reset() {$/;"	f	class:caffe::RecurrentLayer
Reset	src/gtest/gtest-all.cpp	/^  void Reset() { Reset(INVALID_HANDLE_VALUE); }$/;"	f	class:testing::internal::AutoHandle
Reset	src/gtest/gtest-all.cpp	/^  void Reset(HANDLE handle) {$/;"	f	class:testing::internal::AutoHandle
ResetErrorCounts	scripts/cpp_lint.py	/^  def ResetErrorCounts(self):$/;"	m	class:_CppLintState
ResetNolintSuppressions	scripts/cpp_lint.py	/^def ResetNolintSuppressions():$/;"	f
ResetSection	scripts/cpp_lint.py	/^  def ResetSection(self):$/;"	m	class:_IncludeState
Reshape	include/caffe/layers/base_data_layer.hpp	/^  virtual void Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BaseDataLayer
Reshape	include/caffe/layers/dummy_data_layer.hpp	/^  virtual void Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::DummyDataLayer
Reshape	include/caffe/layers/hdf5_data_layer.hpp	/^  virtual void Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::HDF5DataLayer
Reshape	include/caffe/layers/hdf5_output_layer.hpp	/^  virtual void Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::HDF5OutputLayer
Reshape	include/caffe/layers/input_layer.hpp	/^  virtual void Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::InputLayer
Reshape	include/caffe/layers/parameter_layer.hpp	/^  virtual void Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ParameterLayer
Reshape	include/caffe/layers/python_layer.hpp	/^  virtual void Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PythonLayer
Reshape	include/caffe/layers/silence_layer.hpp	/^  virtual void Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SilenceLayer
Reshape	src/caffe/blob.cpp	/^void Blob<Dtype>::Reshape(const BlobShape& shape) {$/;"	f	class:caffe::Blob
Reshape	src/caffe/blob.cpp	/^void Blob<Dtype>::Reshape(const int num, const int channels, const int height,$/;"	f	class:caffe::Blob
Reshape	src/caffe/blob.cpp	/^void Blob<Dtype>::Reshape(const vector<int>& shape) {$/;"	f	class:caffe::Blob
Reshape	src/caffe/layers/accuracy_layer.cpp	/^void AccuracyLayer<Dtype>::Reshape($/;"	f	class:caffe::AccuracyLayer
Reshape	src/caffe/layers/argmax_layer.cpp	/^void ArgMaxLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ArgMaxLayer
Reshape	src/caffe/layers/base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BaseConvolutionLayer
Reshape	src/caffe/layers/batch_norm_layer.cpp	/^void BatchNormLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BatchNormLayer
Reshape	src/caffe/layers/batch_reindex_layer.cpp	/^void BatchReindexLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BatchReindexLayer
Reshape	src/caffe/layers/bias_layer.cpp	/^void BiasLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::BiasLayer
Reshape	src/caffe/layers/concat_layer.cpp	/^void ConcatLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ConcatLayer
Reshape	src/caffe/layers/crop_layer.cpp	/^void CropLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CropLayer
Reshape	src/caffe/layers/cudnn_conv_layer.cpp	/^void CuDNNConvolutionLayer<Dtype>::Reshape($/;"	f	class:caffe::CuDNNConvolutionLayer
Reshape	src/caffe/layers/cudnn_lcn_layer.cpp	/^void CuDNNLCNLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNLCNLayer
Reshape	src/caffe/layers/cudnn_lrn_layer.cpp	/^void CuDNNLRNLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNLRNLayer
Reshape	src/caffe/layers/cudnn_pooling_layer.cpp	/^void CuDNNPoolingLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNPoolingLayer
Reshape	src/caffe/layers/cudnn_relu_layer.cpp	/^void CuDNNReLULayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNReLULayer
Reshape	src/caffe/layers/cudnn_sigmoid_layer.cpp	/^void CuDNNSigmoidLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNSigmoidLayer
Reshape	src/caffe/layers/cudnn_softmax_layer.cpp	/^void CuDNNSoftmaxLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNSoftmaxLayer
Reshape	src/caffe/layers/cudnn_tanh_layer.cpp	/^void CuDNNTanHLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CuDNNTanHLayer
Reshape	src/caffe/layers/dropout_layer.cpp	/^void DropoutLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::DropoutLayer
Reshape	src/caffe/layers/eltwise_layer.cpp	/^void EltwiseLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::EltwiseLayer
Reshape	src/caffe/layers/embed_layer.cpp	/^void EmbedLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::EmbedLayer
Reshape	src/caffe/layers/euclidean_loss_layer.cpp	/^void EuclideanLossLayer<Dtype>::Reshape($/;"	f	class:caffe::EuclideanLossLayer
Reshape	src/caffe/layers/filter_layer.cpp	/^void FilterLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::FilterLayer
Reshape	src/caffe/layers/flatten_layer.cpp	/^void FlattenLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::FlattenLayer
Reshape	src/caffe/layers/im2col_layer.cpp	/^void Im2colLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::Im2colLayer
Reshape	src/caffe/layers/infogain_loss_layer.cpp	/^void InfogainLossLayer<Dtype>::Reshape($/;"	f	class:caffe::InfogainLossLayer
Reshape	src/caffe/layers/inner_product_layer.cpp	/^void InnerProductLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::InnerProductLayer
Reshape	src/caffe/layers/loss_layer.cpp	/^void LossLayer<Dtype>::Reshape($/;"	f	class:caffe::LossLayer
Reshape	src/caffe/layers/lrn_layer.cpp	/^void LRNLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::LRNLayer
Reshape	src/caffe/layers/lstm_unit_layer.cpp	/^void LSTMUnitLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::LSTMUnitLayer
Reshape	src/caffe/layers/multinomial_logistic_loss_layer.cpp	/^void MultinomialLogisticLossLayer<Dtype>::Reshape($/;"	f	class:caffe::MultinomialLogisticLossLayer
Reshape	src/caffe/layers/mvn_layer.cpp	/^void MVNLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::MVNLayer
Reshape	src/caffe/layers/neuron_layer.cpp	/^void NeuronLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::NeuronLayer
Reshape	src/caffe/layers/pooling_layer.cpp	/^void PoolingLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PoolingLayer
Reshape	src/caffe/layers/prelu_layer.cpp	/^void PReLULayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::PReLULayer
Reshape	src/caffe/layers/recurrent_layer.cpp	/^void RecurrentLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::RecurrentLayer
Reshape	src/caffe/layers/reduction_layer.cpp	/^void ReductionLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ReductionLayer
Reshape	src/caffe/layers/reshape_layer.cpp	/^void ReshapeLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ReshapeLayer
Reshape	src/caffe/layers/scale_layer.cpp	/^void ScaleLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::ScaleLayer
Reshape	src/caffe/layers/sigmoid_cross_entropy_loss_layer.cpp	/^void SigmoidCrossEntropyLossLayer<Dtype>::Reshape($/;"	f	class:caffe::SigmoidCrossEntropyLossLayer
Reshape	src/caffe/layers/slice_layer.cpp	/^void SliceLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SliceLayer
Reshape	src/caffe/layers/softmax_layer.cpp	/^void SoftmaxLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SoftmaxLayer
Reshape	src/caffe/layers/softmax_loss_layer.cpp	/^void SoftmaxWithLossLayer<Dtype>::Reshape($/;"	f	class:caffe::SoftmaxWithLossLayer
Reshape	src/caffe/layers/split_layer.cpp	/^void SplitLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SplitLayer
Reshape	src/caffe/layers/spp_layer.cpp	/^void SPPLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::SPPLayer
Reshape	src/caffe/layers/tile_layer.cpp	/^void TileLayer<Dtype>::Reshape($/;"	f	class:caffe::TileLayer
Reshape	src/caffe/net.cpp	/^void Net<Dtype>::Reshape() {$/;"	f	class:caffe::Net
ReshapeBlobs	src/caffe/test/test_lstm_layer.cpp	/^  void ReshapeBlobs(int num_timesteps, int num_instances) {$/;"	f	class:caffe::LSTMLayerTest
ReshapeBlobs	src/caffe/test/test_rnn_layer.cpp	/^  void ReshapeBlobs(int num_timesteps, int num_instances) {$/;"	f	class:caffe::RNNLayerTest
ReshapeLayer	include/caffe/layers/reshape_layer.hpp	/^  explicit ReshapeLayer(const LayerParameter& param)$/;"	f	class:caffe::ReshapeLayer
ReshapeLayer	include/caffe/layers/reshape_layer.hpp	/^class ReshapeLayer : public Layer<Dtype> {$/;"	c	namespace:caffe
ReshapeLayerTest	src/caffe/test/test_reshape_layer.cpp	/^  ReshapeLayerTest()$/;"	f	class:caffe::ReshapeLayerTest
ReshapeLayerTest	src/caffe/test/test_reshape_layer.cpp	/^class ReshapeLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
ReshapeLike	src/caffe/blob.cpp	/^void Blob<Dtype>::ReshapeLike(const Blob<Dtype>& other) {$/;"	f	class:caffe::Blob
ResizeCropImagesMapper	tools/extra/resize_and_crop_images.py	/^class ResizeCropImagesMapper(mapreducer.BasicMapper):$/;"	c
Restore	src/caffe/solver.cpp	/^void Solver<Dtype>::Restore(const char* state_file) {$/;"	f	class:caffe::Solver
RestoreSolverStateFromBinaryProto	src/caffe/solvers/sgd_solver.cpp	/^void SGDSolver<Dtype>::RestoreSolverStateFromBinaryProto($/;"	f	class:caffe::SGDSolver
RestoreSolverStateFromHDF5	src/caffe/solvers/sgd_solver.cpp	/^void SGDSolver<Dtype>::RestoreSolverStateFromHDF5(const string& state_file) {$/;"	f	class:caffe::SGDSolver
ReturnSentinel	src/gtest/gtest.h	/^    explicit ReturnSentinel(DeathTest* test) : test_(test) { }$/;"	f	class:testing::internal::DeathTest::ReturnSentinel
ReturnSentinel	src/gtest/gtest.h	/^  class ReturnSentinel {$/;"	c	class:testing::internal::DeathTest
ReverseCloseExpression	scripts/cpp_lint.py	/^def ReverseCloseExpression(clean_lines, linenum, pos):$/;"	f
RmDir	src/gtest/gtest.h	/^inline int RmDir(const char* dir) { return _rmdir(dir); }$/;"	f	namespace:std::tr1::posix
RngBernoulliChecks	src/caffe/test/test_random_number_generator.cpp	/^  void RngBernoulliChecks(const Dtype p, const void* cpu_data) {$/;"	f	class:caffe::RandomNumberGeneratorTest
RngBernoulliFill	src/caffe/test/test_random_number_generator.cpp	/^  void RngBernoulliFill(const Dtype p, void* cpu_data) {$/;"	f	class:caffe::RandomNumberGeneratorTest
RngGaussianChecks	src/caffe/test/test_random_number_generator.cpp	/^  void RngGaussianChecks(const Dtype mu, const Dtype sigma,$/;"	f	class:caffe::RandomNumberGeneratorTest
RngGaussianFill	src/caffe/test/test_random_number_generator.cpp	/^  void RngGaussianFill(const Dtype mu, const Dtype sigma, void* cpu_data) {$/;"	f	class:caffe::RandomNumberGeneratorTest
RngGaussianFillGPU	src/caffe/test/test_random_number_generator.cpp	/^  void RngGaussianFillGPU(const Dtype mu, const Dtype sigma, void* gpu_data) {$/;"	f	class:caffe::RandomNumberGeneratorTest
RngUniformChecks	src/caffe/test/test_random_number_generator.cpp	/^  void RngUniformChecks(const Dtype lower, const Dtype upper,$/;"	f	class:caffe::RandomNumberGeneratorTest
RngUniformFill	src/caffe/test/test_random_number_generator.cpp	/^  void RngUniformFill(const Dtype lower, const Dtype upper, void* cpu_data) {$/;"	f	class:caffe::RandomNumberGeneratorTest
RngUniformFillGPU	src/caffe/test/test_random_number_generator.cpp	/^  void RngUniformFillGPU(const Dtype lower, const Dtype upper, void* gpu_data) {$/;"	f	class:caffe::RandomNumberGeneratorTest
RngUniformIntFillGPU	src/caffe/test/test_random_number_generator.cpp	/^  void RngUniformIntFillGPU(void* gpu_data) {$/;"	f	class:caffe::RandomNumberGeneratorTest
Run	src/caffe/parallel.cpp	/^void NCCL<Dtype>::Run(const vector<int>& gpus, const char* restore) {$/;"	f	class:caffe::NCCL
Run	src/gtest/gtest-all.cpp	/^int UnitTest::Run() {$/;"	f	class:testing::UnitTest
Run	src/gtest/gtest-all.cpp	/^void Test::Run() {$/;"	f	class:testing::Test
Run	src/gtest/gtest-all.cpp	/^void TestCase::Run() {$/;"	f	class:testing::TestCase
Run	src/gtest/gtest-all.cpp	/^void TestInfo::Run() {$/;"	f	class:testing::TestInfo
Run	src/gtest/gtest.h	/^  virtual void Run() {$/;"	f	class:std::tr1::ThreadWithParam
RunAllTests	src/gtest/gtest-all.cpp	/^bool UnitTestImpl::RunAllTests() {$/;"	f	class:testing::internal::UnitTestImpl
RunFilterNetTest	src/caffe/test/test_net.cpp	/^  void RunFilterNetTest($/;"	f	class:caffe::FilterNetTest
RunInsertionTest	src/caffe/test/test_split_layer.cpp	/^  void RunInsertionTest($/;"	f	class:caffe::SplitLayerInsertionTest
RunLeastSquaresSolver	src/caffe/test/test_gradient_based_solver.cpp	/^  string RunLeastSquaresSolver(const Dtype learning_rate,$/;"	f	class:caffe::GradientBasedSolverTest
RunPaddingUpgradeTest	src/caffe/test/test_upgrade_proto.cpp	/^  void RunPaddingUpgradeTest($/;"	f	class:caffe::PaddingLayerUpgradeTest
RunSetUpTestCase	src/gtest/gtest.h	/^  void RunSetUpTestCase() { (*set_up_tc_)(); }$/;"	f	class:testing::TestCase
RunSolverTypeUpgradeTest	src/caffe/test/test_upgrade_proto.cpp	/^  void RunSolverTypeUpgradeTest($/;"	f	class:caffe::SolverTypeUpgradeTest
RunTearDownTestCase	src/gtest/gtest.h	/^  void RunTearDownTestCase() { (*tear_down_tc_)(); }$/;"	f	class:testing::TestCase
RunV0UpgradeTest	src/caffe/test/test_upgrade_proto.cpp	/^  void RunV0UpgradeTest($/;"	f	class:caffe::NetUpgradeTest
RunV1UpgradeTest	src/caffe/test/test_upgrade_proto.cpp	/^  void RunV1UpgradeTest($/;"	f	class:caffe::NetUpgradeTest
SCOPED_TRACE	src/gtest/gtest.h	/^#define SCOPED_TRACE(/;"	d
SGDSolver	include/caffe/sgd_solvers.hpp	/^  explicit SGDSolver(const SolverParameter& param)$/;"	f	class:caffe::SGDSolver
SGDSolver	include/caffe/sgd_solvers.hpp	/^  explicit SGDSolver(const string& param_file)$/;"	f	class:caffe::SGDSolver
SGDSolver	include/caffe/sgd_solvers.hpp	/^class SGDSolver : public Solver<Dtype> {$/;"	c	namespace:caffe
SGDSolver	python/caffe/__init__.py	/^from .pycaffe import Net, SGDSolver, NesterovSolver, AdaGradSolver, RMSPropSolver, AdaDeltaSolver, AdamSolver, NCCL, Timer$/;"	i
SGDSolver	python/caffe/pycaffe.py	/^        RMSPropSolver, AdaDeltaSolver, AdamSolver, NCCL, Timer$/;"	i
SGDSolverTest	src/caffe/test/test_gradient_based_solver.cpp	/^class SGDSolverTest : public GradientBasedSolverTest<TypeParam> {$/;"	c	namespace:caffe	file:
SIGHUP_action_	include/caffe/util/signal_handler.h	/^  SolverAction::Enum SIGHUP_action_;$/;"	m	class:caffe::SignalHandler
SIGINT_action_	include/caffe/util/signal_handler.h	/^  SolverAction::Enum SIGINT_action_;$/;"	m	class:caffe::SignalHandler
SNAPSHOT	include/caffe/solver.hpp	/^      SNAPSHOT = 2  \/\/ Take a snapshot, and keep training.$/;"	e	enum:caffe::SolverAction::Enum
SPPLayer	include/caffe/layers/spp_layer.hpp	/^  explicit SPPLayer(const LayerParameter& param)$/;"	f	class:caffe::SPPLayer
SPPLayer	include/caffe/layers/spp_layer.hpp	/^class SPPLayer : public Layer<Dtype> {$/;"	c	namespace:caffe
SPPLayerTest	src/caffe/test/test_spp_layer.cpp	/^  SPPLayerTest()$/;"	f	class:caffe::SPPLayerTest
SPPLayerTest	src/caffe/test/test_spp_layer.cpp	/^class SPPLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
SRC_DIRS	Makefile	/^SRC_DIRS := $(shell find * -type d -exec bash -c "find {} -maxdepth 1 \\$/;"	m
STATIC_LINK_COMMAND	Makefile	/^	STATIC_LINK_COMMAND := -Wl,--whole-archive $(STATIC_NAME) -Wl,--no-whole-archive$/;"	m
STATIC_LINK_COMMAND	Makefile	/^	STATIC_LINK_COMMAND := -Wl,-force_load $(STATIC_NAME)$/;"	m
STATIC_NAME	Makefile	/^STATIC_NAME := $(LIB_BUILD_DIR)\/lib$(LIBRARY_NAME).a$/;"	m
STOP	include/caffe/solver.hpp	/^      STOP = 1,  \/\/ Stop training. snapshot_after_train controls whether a$/;"	e	enum:caffe::SolverAction::Enum
STRINGIFY	include/caffe/common.hpp	/^#define STRINGIFY(/;"	d
STUB_GPU	include/caffe/util/device_alternate.hpp	/^#define STUB_GPU(/;"	d
STUB_GPU_BACKWARD	include/caffe/util/device_alternate.hpp	/^#define STUB_GPU_BACKWARD(/;"	d
STUB_GPU_FORWARD	include/caffe/util/device_alternate.hpp	/^#define STUB_GPU_FORWARD(/;"	d
SUCCEED	src/gtest/gtest.h	/^# define SUCCEED(/;"	d
SUPERCLEAN_EXTS	Makefile	/^SUPERCLEAN_EXTS := .so .a .o .bin .testbin .pb.cc .pb.h _pb2.py .cuo$/;"	m
SYNCED	include/caffe/syncedmem.hpp	/^  enum SyncedHead { UNINITIALIZED, HEAD_AT_CPU, HEAD_AT_GPU, SYNCED };$/;"	e	enum:caffe::SyncedMemory::SyncedHead
SaveBlobs	src/caffe/layers/hdf5_output_layer.cpp	/^void HDF5OutputLayer<Dtype>::SaveBlobs() {$/;"	f	class:caffe::HDF5OutputLayer
ScaleLayer	include/caffe/layers/scale_layer.hpp	/^  explicit ScaleLayer(const LayerParameter& param)$/;"	f	class:caffe::ScaleLayer
ScaleLayer	include/caffe/layers/scale_layer.hpp	/^class ScaleLayer: public Layer<Dtype> {$/;"	c	namespace:caffe
ScaleLayerTest	src/caffe/test/test_scale_layer.cpp	/^  ScaleLayerTest()$/;"	f	class:caffe::ScaleLayerTest
ScaleLayerTest	src/caffe/test/test_scale_layer.cpp	/^class ScaleLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
ScopedFakeTestPartResultReporter	src/gtest/gtest-all.cpp	/^ScopedFakeTestPartResultReporter::ScopedFakeTestPartResultReporter($/;"	f	class:testing::ScopedFakeTestPartResultReporter
ScopedFakeTestPartResultReporter	src/gtest/gtest-all.cpp	/^class GTEST_API_ ScopedFakeTestPartResultReporter$/;"	c	namespace:testing	file:
ScopedTrace	src/gtest/gtest-all.cpp	/^ScopedTrace::ScopedTrace(const char* file, int line, const Message& message) {$/;"	f	class:testing::internal::ScopedTrace
ScopedTrace	src/gtest/gtest.h	/^class GTEST_API_ ScopedTrace {$/;"	c	namespace:testing::internal
Search	scripts/cpp_lint.py	/^def Search(pattern, s):$/;"	f
Seconds	src/caffe/util/benchmark.cpp	/^float Timer::Seconds() {$/;"	f	class:caffe::Timer
Seek	include/caffe/util/db_lmdb.hpp	/^  void Seek(MDB_cursor_op op) {$/;"	f	class:caffe::db::LMDBCursor
SeekToFirst	include/caffe/util/db_leveldb.hpp	/^  virtual void SeekToFirst() { iter_->SeekToFirst(); }$/;"	f	class:caffe::db::LevelDBCursor
SeekToFirst	include/caffe/util/db_lmdb.hpp	/^  virtual void SeekToFirst() { Seek(MDB_FIRST); }$/;"	f	class:caffe::db::LMDBCursor
SeenOpenBrace	scripts/cpp_lint.py	/^  def SeenOpenBrace(self):$/;"	m	class:_NestingState
Send	src/gtest/gtest-all.cpp	/^  void Send(const string& message) {$/;"	f	class:testing::internal::StreamingListener	file:
Set	src/gtest/gtest.h	/^  void Set(const FilePath& rhs) {$/;"	f	class:testing::internal::FilePath
SetActionFunction	src/caffe/solver.cpp	/^void Solver<Dtype>::SetActionFunction(ActionCallback func) {$/;"	f	class:caffe::Solver
SetCountingStyle	scripts/cpp_lint.py	/^  def SetCountingStyle(self, counting_style):$/;"	m	class:_CppLintState
SetDefaultResultPrinter	src/gtest/gtest-all.cpp	/^void TestEventListeners::SetDefaultResultPrinter(TestEventListener* listener) {$/;"	f	class:testing::TestEventListeners
SetDefaultXmlGenerator	src/gtest/gtest-all.cpp	/^void TestEventListeners::SetDefaultXmlGenerator(TestEventListener* listener) {$/;"	f	class:testing::TestEventListeners
SetDevice	src/caffe/common.cpp	/^void Caffe::SetDevice(const int device_id) {$/;"	f	class:caffe::Caffe
SetFilters	scripts/cpp_lint.py	/^  def SetFilters(self, filters):$/;"	m	class:_CppLintState
SetGlobalTestPartResultReporter	src/gtest/gtest-all.cpp	/^void UnitTestImpl::SetGlobalTestPartResultReporter($/;"	f	class:testing::internal::UnitTestImpl
SetLastHeader	scripts/cpp_lint.py	/^  def SetLastHeader(self, header_path):$/;"	m	class:_IncludeState
SetLossWeights	include/caffe/layer.hpp	/^  inline void SetLossWeights(const vector<Blob<Dtype>*>& top) {$/;"	f	class:caffe::Layer
SetMean	examples/cpp_classification/classification.cpp	/^void Classifier::SetMean(const string& mean_file) {$/;"	f	class:Classifier
SetOutputFormat	scripts/cpp_lint.py	/^  def SetOutputFormat(self, output_format):$/;"	m	class:_CppLintState
SetParam	src/gtest/gtest.h	/^  static void SetParam(const ParamType* parameter) {$/;"	f	class:testing::WithParamInterface
SetTestPartResultReporterForCurrentThread	src/gtest/gtest-all.cpp	/^void UnitTestImpl::SetTestPartResultReporterForCurrentThread($/;"	f	class:testing::internal::UnitTestImpl
SetUp	include/caffe/layer.hpp	/^  void SetUp(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::Layer
SetUp	src/caffe/test/test_batch_reindex_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::BatchReindexLayerTest
SetUp	src/caffe/test/test_concat_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::ConcatLayerTest
SetUp	src/caffe/test/test_convolution_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::ConvolutionLayerTest
SetUp	src/caffe/test/test_convolution_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::CuDNNConvolutionLayerTest
SetUp	src/caffe/test/test_crop_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::CropLayerTest
SetUp	src/caffe/test/test_data_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::DataLayerTest
SetUp	src/caffe/test/test_db.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::DBTest
SetUp	src/caffe/test/test_deconvolution_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::DeconvolutionLayerTest
SetUp	src/caffe/test/test_dummy_data_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::DummyDataLayerTest
SetUp	src/caffe/test/test_filter_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::FilterLayerTest
SetUp	src/caffe/test/test_hdf5data_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::HDF5DataLayerTest
SetUp	src/caffe/test/test_image_data_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::ImageDataLayerTest
SetUp	src/caffe/test/test_lrn_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::CuDNNLRNLayerTest
SetUp	src/caffe/test/test_lrn_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::LRNLayerTest
SetUp	src/caffe/test/test_math_functions.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::MathFunctionsTest
SetUp	src/caffe/test/test_maxpool_dropout_layers.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::MaxPoolingDropoutTest
SetUp	src/caffe/test/test_memory_data_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::MemoryDataLayerTest
SetUp	src/caffe/test/test_pooling_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::CuDNNPoolingLayerTest
SetUp	src/caffe/test/test_pooling_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::PoolingLayerTest
SetUp	src/caffe/test/test_random_number_generator.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::RandomNumberGeneratorTest
SetUp	src/caffe/test/test_slice_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::SliceLayerTest
SetUp	src/caffe/test/test_spp_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::SPPLayerTest
SetUp	src/caffe/test/test_stochastic_pooling.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::StochasticPoolingLayerTest
SetUp	src/caffe/test/test_tile_layer.cpp	/^  virtual void SetUp() {$/;"	f	class:caffe::TileLayerTest
SetUp	src/gtest/gtest-all.cpp	/^void Test::SetUp() {$/;"	f	class:testing::Test
SetUp	src/gtest/gtest.h	/^  virtual void SetUp() {}$/;"	f	class:testing::Environment
SetUpEnvironment	src/gtest/gtest-all.cpp	/^static void SetUpEnvironment(Environment* env) { env->SetUp(); }$/;"	f	namespace:testing::internal
SetUpTestCase	src/gtest/gtest.h	/^  static void SetUpTestCase() {}$/;"	f	class:testing::Test
SetUpTestCaseFunc	src/gtest/gtest.h	/^  typedef internal::SetUpTestCaseFunc SetUpTestCaseFunc;$/;"	t	class:testing::Test
SetUpTestCaseFunc	src/gtest/gtest.h	/^typedef void (*SetUpTestCaseFunc)();$/;"	t	namespace:testing::internal
SetValue	src/gtest/gtest.h	/^  void SetValue(const char* new_value) {$/;"	f	class:testing::TestProperty
SetVerboseLevel	scripts/cpp_lint.py	/^  def SetVerboseLevel(self, level):$/;"	m	class:_CppLintState
Setup	src/gtest/gtest.h	/^  virtual Setup_should_be_spelled_SetUp* Setup() { return NULL; }$/;"	f	class:testing::Environment
Setup	src/gtest/gtest.h	/^  virtual Setup_should_be_spelled_SetUp* Setup() { return NULL; }$/;"	f	class:testing::Test
Setup_should_be_spelled_SetUp	src/gtest/gtest.h	/^  struct Setup_should_be_spelled_SetUp {};$/;"	s	class:testing::Environment
Setup_should_be_spelled_SetUp	src/gtest/gtest.h	/^  struct Setup_should_be_spelled_SetUp {};$/;"	s	class:testing::Test
ShapeEquals	src/caffe/blob.cpp	/^bool Blob<Dtype>::ShapeEquals(const BlobProto& other) {$/;"	f	class:caffe::Blob
ShareData	src/caffe/blob.cpp	/^void Blob<Dtype>::ShareData(const Blob& other) {$/;"	f	class:caffe::Blob
ShareDiff	src/caffe/blob.cpp	/^void Blob<Dtype>::ShareDiff(const Blob& other) {$/;"	f	class:caffe::Blob
ShareTrainedLayersWith	src/caffe/net.cpp	/^void Net<Dtype>::ShareTrainedLayersWith(const Net* other) {$/;"	f	class:caffe::Net
ShareWeights	src/caffe/net.cpp	/^void Net<Dtype>::ShareWeights() {$/;"	f	class:caffe::Net
ShouldRunTest	src/gtest/gtest.h	/^  static bool ShouldRunTest(const TestInfo* test_info) {$/;"	f	class:testing::TestCase
ShouldRunTestCase	src/gtest/gtest-all.cpp	/^static bool ShouldRunTestCase(const TestCase* test_case) {$/;"	f	namespace:testing::internal
ShouldRunTestOnShard	src/gtest/gtest-all.cpp	/^bool ShouldRunTestOnShard(int total_shards, int shard_index, int test_id) {$/;"	f	namespace:testing::internal
ShouldShard	src/gtest/gtest-all.cpp	/^bool ShouldShard(const char* total_shards_env,$/;"	f	namespace:testing::internal
ShouldUseColor	src/gtest/gtest-all.cpp	/^bool ShouldUseColor(bool stdout_is_tty) {$/;"	f	namespace:testing::internal
ShowCStringQuoted	src/gtest/gtest-all.cpp	/^String String::ShowCStringQuoted(const char* c_str) {$/;"	f	class:testing::internal::String
ShowWideCString	src/gtest/gtest-all.cpp	/^String String::ShowWideCString(const wchar_t * wide_c_str) {$/;"	f	class:testing::internal::String
ShowWideCStringQuoted	src/gtest/gtest-all.cpp	/^String String::ShowWideCStringQuoted(const wchar_t* wide_c_str) {$/;"	f	class:testing::internal::String
Shuffle	src/gtest/gtest-all.cpp	/^inline void Shuffle(internal::Random* random, std::vector<E>* v) {$/;"	f	namespace:testing::internal
ShuffleImages	src/caffe/layers/image_data_layer.cpp	/^void ImageDataLayer<Dtype>::ShuffleImages() {$/;"	f	class:caffe::ImageDataLayer
ShuffleRange	src/gtest/gtest-all.cpp	/^void ShuffleRange(internal::Random* random, int begin, int end,$/;"	f	namespace:testing::internal
ShuffleTests	src/gtest/gtest-all.cpp	/^void TestCase::ShuffleTests(internal::Random* random) {$/;"	f	class:testing::TestCase
ShuffleTests	src/gtest/gtest-all.cpp	/^void UnitTestImpl::ShuffleTests() {$/;"	f	class:testing::internal::UnitTestImpl
SigmoidCrossEntropyLossLayer	include/caffe/layers/sigmoid_cross_entropy_loss_layer.hpp	/^  explicit SigmoidCrossEntropyLossLayer(const LayerParameter& param)$/;"	f	class:caffe::SigmoidCrossEntropyLossLayer
SigmoidCrossEntropyLossLayer	include/caffe/layers/sigmoid_cross_entropy_loss_layer.hpp	/^class SigmoidCrossEntropyLossLayer : public LossLayer<Dtype> {$/;"	c	namespace:caffe
SigmoidCrossEntropyLossLayerTest	src/caffe/test/test_sigmoid_cross_entropy_loss_layer.cpp	/^  SigmoidCrossEntropyLossLayerTest()$/;"	f	class:caffe::SigmoidCrossEntropyLossLayerTest
SigmoidCrossEntropyLossLayerTest	src/caffe/test/test_sigmoid_cross_entropy_loss_layer.cpp	/^class SigmoidCrossEntropyLossLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
SigmoidCrossEntropyLossReference	src/caffe/test/test_sigmoid_cross_entropy_loss_layer.cpp	/^  Dtype SigmoidCrossEntropyLossReference(const int count, const int num,$/;"	f	class:caffe::SigmoidCrossEntropyLossLayerTest
SigmoidLayer	include/caffe/layers/sigmoid_layer.hpp	/^  explicit SigmoidLayer(const LayerParameter& param)$/;"	f	class:caffe::SigmoidLayer
SigmoidLayer	include/caffe/layers/sigmoid_layer.hpp	/^class SigmoidLayer : public NeuronLayer<Dtype> {$/;"	c	namespace:caffe
SignAndMagnitudeToBiased	src/gtest/gtest.h	/^  static Bits SignAndMagnitudeToBiased(const Bits &sam) {$/;"	f	class:testing::internal::FloatingPoint
SignalHandler	include/caffe/util/signal_handler.h	/^class SignalHandler {$/;"	c	namespace:caffe
SignalHandler	src/caffe/util/signal_handler.cpp	/^SignalHandler::SignalHandler(SolverAction::Enum SIGINT_action,$/;"	f	class:caffe::SignalHandler
SilenceLayer	include/caffe/layers/silence_layer.hpp	/^  explicit SilenceLayer(const LayerParameter& param)$/;"	f	class:caffe::SilenceLayer
SilenceLayer	include/caffe/layers/silence_layer.hpp	/^class SilenceLayer : public Layer<Dtype> {$/;"	c	namespace:caffe
SimpleLayer	python/caffe/test/test_python_layer.py	/^class SimpleLayer(caffe.Layer):$/;"	c
SimpleParamLayer	python/caffe/test/test_python_layer_with_param_str.py	/^class SimpleParamLayer(caffe.Layer):$/;"	c
SimpleTransformer	examples/pycaffe/layers/pascal_multilabel_datalayers.py	/^from tools import SimpleTransformer$/;"	i
SimpleTransformer	examples/pycaffe/tools.py	/^class SimpleTransformer:$/;"	c
SingleFailureChecker	src/gtest/gtest-all.cpp	/^SingleFailureChecker:: SingleFailureChecker($/;"	f	class:testing::internal::SingleFailureChecker
SingleFailureChecker	src/gtest/gtest-all.cpp	/^class GTEST_API_ SingleFailureChecker {$/;"	c	namespace:testing::internal	file:
Skip	src/caffe/layers/data_layer.cpp	/^bool DataLayer<Dtype>::Skip() {$/;"	f	class:caffe::DataLayer
Skip	src/caffe/layers/hdf5_data_layer.cpp	/^bool HDF5DataLayer<Dtype>::Skip() {$/;"	f	class:caffe::HDF5DataLayer
SkipComma	src/gtest/gtest.h	/^inline const char* SkipComma(const char* str) {$/;"	f	namespace:testing::internal
SkipPrefix	src/gtest/gtest-all.cpp	/^bool SkipPrefix(const char* prefix, const char** pstr) {$/;"	f	namespace:testing::internal
SkipSpaces	src/gtest/gtest-all.cpp	/^static const char* SkipSpaces(const char* str) {$/;"	f	namespace:testing::internal
SleepMilliseconds	src/gtest/gtest.h	/^inline void SleepMilliseconds(int n) {$/;"	f	namespace:std::tr1
SliceLayer	include/caffe/layers/slice_layer.hpp	/^  explicit SliceLayer(const LayerParameter& param)$/;"	f	class:caffe::SliceLayer
SliceLayer	include/caffe/layers/slice_layer.hpp	/^class SliceLayer : public Layer<Dtype> {$/;"	c	namespace:caffe
SliceLayerTest	src/caffe/test/test_slice_layer.cpp	/^  SliceLayerTest()$/;"	f	class:caffe::SliceLayerTest
SliceLayerTest	src/caffe/test/test_slice_layer.cpp	/^class SliceLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
Snapshot	src/caffe/solver.cpp	/^void Solver<Dtype>::Snapshot() {$/;"	f	class:caffe::Solver
SnapshotFilename	src/caffe/solver.cpp	/^string Solver<Dtype>::SnapshotFilename(const string extension) {$/;"	f	class:caffe::Solver
SnapshotSolverState	src/caffe/solvers/sgd_solver.cpp	/^void SGDSolver<Dtype>::SnapshotSolverState(const string& model_filename) {$/;"	f	class:caffe::SGDSolver
SnapshotSolverStateToBinaryProto	src/caffe/solvers/sgd_solver.cpp	/^void SGDSolver<Dtype>::SnapshotSolverStateToBinaryProto($/;"	f	class:caffe::SGDSolver
SnapshotSolverStateToHDF5	src/caffe/solvers/sgd_solver.cpp	/^void SGDSolver<Dtype>::SnapshotSolverStateToHDF5($/;"	f	class:caffe::SGDSolver
SnapshotToBinaryProto	src/caffe/solver.cpp	/^string Solver<Dtype>::SnapshotToBinaryProto() {$/;"	f	class:caffe::Solver
SnapshotToHDF5	src/caffe/solver.cpp	/^string Solver<Dtype>::SnapshotToHDF5() {$/;"	f	class:caffe::Solver
SoftmaxLayer	include/caffe/layers/softmax_layer.hpp	/^  explicit SoftmaxLayer(const LayerParameter& param)$/;"	f	class:caffe::SoftmaxLayer
SoftmaxLayer	include/caffe/layers/softmax_layer.hpp	/^class SoftmaxLayer : public Layer<Dtype> {$/;"	c	namespace:caffe
SoftmaxLayerTest	src/caffe/test/test_softmax_layer.cpp	/^  SoftmaxLayerTest()$/;"	f	class:caffe::SoftmaxLayerTest
SoftmaxLayerTest	src/caffe/test/test_softmax_layer.cpp	/^class SoftmaxLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
SoftmaxWithLossLayer	include/caffe/layers/softmax_loss_layer.hpp	/^  explicit SoftmaxWithLossLayer(const LayerParameter& param)$/;"	f	class:caffe::SoftmaxWithLossLayer
SoftmaxWithLossLayer	include/caffe/layers/softmax_loss_layer.hpp	/^class SoftmaxWithLossLayer : public LossLayer<Dtype> {$/;"	c	namespace:caffe
SoftmaxWithLossLayerTest	src/caffe/test/test_softmax_with_loss_layer.cpp	/^  SoftmaxWithLossLayerTest()$/;"	f	class:caffe::SoftmaxWithLossLayerTest
SoftmaxWithLossLayerTest	src/caffe/test/test_softmax_with_loss_layer.cpp	/^class SoftmaxWithLossLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
Solve	include/caffe/solver.hpp	/^  inline void Solve(const string resume_file) { Solve(resume_file.c_str()); }$/;"	f	class:caffe::Solver
Solve	src/caffe/solver.cpp	/^void Solver<Dtype>::Solve(const char* resume_file) {$/;"	f	class:caffe::Solver
Solver	include/caffe/solver.hpp	/^class Solver {$/;"	c	namespace:caffe
Solver	src/caffe/solver.cpp	/^Solver<Dtype>::Solver(const SolverParameter& param)$/;"	f	class:caffe::Solver
Solver	src/caffe/solver.cpp	/^Solver<Dtype>::Solver(const string& param_file)$/;"	f	class:caffe::Solver
SolverAction	include/caffe/solver.hpp	/^  namespace SolverAction {$/;"	n	namespace:caffe
SolverCallback	python/caffe/_caffe.cpp	/^  SolverCallback(bp::object on_start, bp::object on_gradients_ready)$/;"	f	class:caffe::SolverCallback
SolverCallback	python/caffe/_caffe.cpp	/^class SolverCallback: public Solver<Dtype>::Callback {$/;"	c	namespace:caffe	file:
SolverFactoryTest	src/caffe/test/test_solver_factory.cpp	/^class SolverFactoryTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
SolverNeedsTypeUpgrade	src/caffe/util/upgrade_proto.cpp	/^bool SolverNeedsTypeUpgrade(const SolverParameter& solver_param) {$/;"	f	namespace:caffe
SolverRegisterer	include/caffe/solver_factory.hpp	/^  SolverRegisterer(const string& type,$/;"	f	class:caffe::SolverRegisterer
SolverRegisterer	include/caffe/solver_factory.hpp	/^class SolverRegisterer {$/;"	c	namespace:caffe
SolverRegistry	include/caffe/solver_factory.hpp	/^  SolverRegistry() {}$/;"	f	class:caffe::SolverRegistry
SolverRegistry	include/caffe/solver_factory.hpp	/^class SolverRegistry {$/;"	c	namespace:caffe
SolverTest	src/caffe/test/test_solver.cpp	/^class SolverTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
SolverTypeList	include/caffe/solver_factory.hpp	/^  static vector<string> SolverTypeList() {$/;"	f	class:caffe::SolverRegistry
SolverTypeListString	include/caffe/solver_factory.hpp	/^  static string SolverTypeListString() {$/;"	f	class:caffe::SolverRegistry
SolverTypeUpgradeTest	src/caffe/test/test_upgrade_proto.cpp	/^class SolverTypeUpgradeTest : public ::testing::Test {$/;"	c	namespace:caffe	file:
Solver_add_callback	python/caffe/_caffe.cpp	/^void Solver_add_callback(Solver<Dtype> * solver, bp::object on_start,$/;"	f	namespace:caffe
Solver_add_nccl	python/caffe/_caffe.cpp	/^void Solver_add_nccl(Solver<Dtype>* solver$/;"	f	namespace:caffe
Split	scripts/cpp_lint.py	/^  def Split(self):$/;"	m	class:FileInfo
SplitBlobName	src/caffe/util/insert_splits.cpp	/^string SplitBlobName(const string& layer_name, const string& blob_name,$/;"	f	namespace:caffe
SplitLayer	include/caffe/layers/split_layer.hpp	/^  explicit SplitLayer(const LayerParameter& param)$/;"	f	class:caffe::SplitLayer
SplitLayer	include/caffe/layers/split_layer.hpp	/^class SplitLayer : public Layer<Dtype> {$/;"	c	namespace:caffe
SplitLayerInsertionTest	src/caffe/test/test_split_layer.cpp	/^class SplitLayerInsertionTest : public ::testing::Test {$/;"	c	namespace:caffe	file:
SplitLayerName	src/caffe/util/insert_splits.cpp	/^string SplitLayerName(const string& layer_name, const string& blob_name,$/;"	f	namespace:caffe
SplitLayerTest	src/caffe/test/test_split_layer.cpp	/^  SplitLayerTest()$/;"	f	class:caffe::SplitLayerTest
SplitLayerTest	src/caffe/test/test_split_layer.cpp	/^class SplitLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
SplitString	src/gtest/gtest-all.cpp	/^static void SplitString(const ::std::string& str, char delimiter,$/;"	f	namespace:testing::internal
StackGrowsDown	src/gtest/gtest-all.cpp	/^bool StackGrowsDown() {$/;"	f	namespace:testing::internal
StackLowerThanAddress	src/gtest/gtest-all.cpp	/^bool StackLowerThanAddress(const void* ptr) {$/;"	f	namespace:testing::internal
Start	src/caffe/util/benchmark.cpp	/^void CPUTimer::Start() {$/;"	f	class:caffe::CPUTimer
Start	src/caffe/util/benchmark.cpp	/^void Timer::Start() {$/;"	f	class:caffe::Timer
StartInternalThread	src/caffe/internal_thread.cpp	/^void InternalThread::StartInternalThread() {$/;"	f	class:caffe::InternalThread
Stat	src/gtest/gtest.h	/^inline int Stat(const char* path, StatStruct* buf) { return _stat(path, buf); }$/;"	f	namespace:std::tr1::posix
StatStruct	src/gtest/gtest.h	/^typedef struct _stat StatStruct;$/;"	t	namespace:std::tr1::posix	typeref:struct:std::tr1::posix::_stat
StateMeetsRule	src/caffe/net.cpp	/^bool Net<Dtype>::StateMeetsRule(const NetState& state,$/;"	f	class:caffe::Net
StaticAssertTypeEq	src/gtest/gtest.h	/^bool StaticAssertTypeEq() {$/;"	f	namespace:testing
Step	src/caffe/solver.cpp	/^void Solver<Dtype>::Step(int iters) {$/;"	f	class:caffe::Solver
StochasticPoolingLayerTest	src/caffe/test/test_stochastic_pooling.cpp	/^  StochasticPoolingLayerTest()$/;"	f	class:caffe::StochasticPoolingLayerTest
StochasticPoolingLayerTest	src/caffe/test/test_stochastic_pooling.cpp	/^class StochasticPoolingLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
Stop	src/caffe/util/benchmark.cpp	/^void CPUTimer::Stop() {$/;"	f	class:caffe::CPUTimer
Stop	src/caffe/util/benchmark.cpp	/^void Timer::Stop() {$/;"	f	class:caffe::Timer
StopInternalThread	src/caffe/internal_thread.cpp	/^void InternalThread::StopInternalThread() {$/;"	f	class:caffe::InternalThread
StrCaseCmp	src/gtest/gtest.h	/^inline int StrCaseCmp(const char* s1, const char* s2) {$/;"	f	namespace:std::tr1::posix
StrDup	src/gtest/gtest.h	/^inline char* StrDup(const char* src) { return _strdup(src); }$/;"	f	namespace:std::tr1::posix
StrDup	src/gtest/gtest.h	/^inline char* StrDup(const char* src) { return strdup(src); }$/;"	f	namespace:std::tr1::posix
StrError	src/gtest/gtest.h	/^inline const char* StrError(int errnum) { return strerror(errnum); }$/;"	f	namespace:std::tr1::posix
StrNCpy	src/gtest/gtest.h	/^inline const char* StrNCpy(char* dest, const char* src, size_t n) {$/;"	f	namespace:std::tr1::posix
StreamHelper	src/gtest/gtest.h	/^  inline void StreamHelper(internal::false_type \/*dummy*\/, const T& value) {$/;"	f	class:testing::Message
StreamHelper	src/gtest/gtest.h	/^  inline void StreamHelper(internal::true_type \/*dummy*\/, T* pointer) {$/;"	f	class:testing::Message
StreamWideCharsToMessage	src/gtest/gtest-all.cpp	/^static void StreamWideCharsToMessage(const wchar_t* wstr, size_t length,$/;"	f	namespace:testing::internal
StreamableToString	src/gtest/gtest.h	/^String StreamableToString(const T& streamable) {$/;"	f	namespace:testing::internal
StreamingListener	src/gtest/gtest-all.cpp	/^  StreamingListener(const string& host, const string& port)$/;"	f	class:testing::internal::StreamingListener
StreamingListener	src/gtest/gtest-all.cpp	/^class StreamingListener : public EmptyTestEventListener {$/;"	c	namespace:testing::internal	file:
String	src/gtest/gtest.h	/^  String() : c_str_(NULL), length_(0) {}$/;"	f	class:testing::internal::String
String	src/gtest/gtest.h	/^  String(const ::std::string& str) {$/;"	f	class:testing::internal::String
String	src/gtest/gtest.h	/^  String(const ::string& str) {$/;"	f	class:testing::internal::String
String	src/gtest/gtest.h	/^  String(const String& str) : c_str_(NULL), length_(0) { *this = str; }$/;"	f	class:testing::internal::String
String	src/gtest/gtest.h	/^  String(const char* a_c_str) {  \/\/ NOLINT$/;"	f	class:testing::internal::String
String	src/gtest/gtest.h	/^  String(const char* buffer, size_t a_length) {$/;"	f	class:testing::internal::String
String	src/gtest/gtest.h	/^class GTEST_API_ String {$/;"	c	namespace:testing::internal
StringFromGTestEnv	src/gtest/gtest-all.cpp	/^const char* StringFromGTestEnv(const char* flag, const char* default_value) {$/;"	f	namespace:testing::internal
StringIO	examples/web_demo/app.py	/^import cStringIO as StringIO$/;"	i
StringStreamToString	src/gtest/gtest-all.cpp	/^String StringStreamToString(::std::stringstream* ss) {$/;"	f	namespace:testing::internal
Strings	src/gtest/gtest.h	/^typedef ::std::vector<string> Strings;$/;"	t	namespace:testing::internal
SumOverTestCaseList	src/gtest/gtest-all.cpp	/^static int SumOverTestCaseList(const std::vector<TestCase*>& case_list,$/;"	f	namespace:testing::internal
SuppressEventForwarding	src/gtest/gtest-all.cpp	/^void TestEventListeners::SuppressEventForwarding() {$/;"	f	class:testing::TestEventListeners
SuppressTestEventsIfInSubprocess	src/gtest/gtest-all.cpp	/^void UnitTestImpl::SuppressTestEventsIfInSubprocess() {$/;"	f	class:testing::internal::UnitTestImpl
SyncedHead	include/caffe/syncedmem.hpp	/^  enum SyncedHead { UNINITIALIZED, HEAD_AT_CPU, HEAD_AT_GPU, SYNCED };$/;"	g	class:caffe::SyncedMemory
SyncedMemory	include/caffe/syncedmem.hpp	/^class SyncedMemory {$/;"	c	namespace:caffe
SyncedMemory	src/caffe/syncedmem.cpp	/^SyncedMemory::SyncedMemory()$/;"	f	class:caffe::SyncedMemory
SyncedMemory	src/caffe/syncedmem.cpp	/^SyncedMemory::SyncedMemory(size_t size)$/;"	f	class:caffe::SyncedMemory
SyncedMemoryTest	src/caffe/test/test_syncedmem.cpp	/^class SyncedMemoryTest : public ::testing::Test {};$/;"	c	namespace:caffe	file:
T	src/gtest/gtest.h	/^  static void Print(const T (&a)[N], ::std::ostream* os) {$/;"	m	class:testing::internal::UniversalPrinter
T	src/gtest/gtest.h	/^inline bool ArrayEq(const T(&lhs)[N], const U(&rhs)[N]) {$/;"	m	namespace:testing::internal
T	src/gtest/gtest.h	/^inline void CopyArray(const T(&from)[N], U(*to)[N]) {$/;"	m	namespace:testing::internal
T	src/gtest/gtest.h	/^internal::ParamGenerator<T> ValuesIn(const T (&array)[N]);$/;"	m	namespace:testing
TEST	python/caffe/__init__.py	/^from .proto.caffe_pb2 import TRAIN, TEST$/;"	i
TEST	src/gtest/gtest.h	/^# define TEST(/;"	d
TEST_ALL_BIN	Makefile	/^TEST_ALL_BIN := $(TEST_BIN_DIR)\/test_all.testbin$/;"	m
TEST_BINS	Makefile	/^	TEST_BINS := $(TEST_CXX_BINS)$/;"	m
TEST_BINS	Makefile	/^TEST_BINS := $(TEST_CXX_BINS) $(TEST_CU_BINS)$/;"	m
TEST_BIN_DIR	Makefile	/^TEST_BIN_DIR := $(BUILD_DIR)\/test$/;"	m
TEST_CU_BINS	Makefile	/^TEST_CU_BINS := $(addsuffix .testbin,$(addprefix $(TEST_BIN_DIR)\/, \\$/;"	m
TEST_CU_BUILD_DIR	Makefile	/^TEST_CU_BUILD_DIR := $(BUILD_DIR)\/cuda\/src\/$(PROJECT)\/test$/;"	m
TEST_CU_OBJS	Makefile	/^TEST_CU_OBJS := $(addprefix $(BUILD_DIR)\/cuda\/, ${TEST_CU_SRCS:.cu=.o})$/;"	m
TEST_CU_SRCS	Makefile	/^TEST_CU_SRCS := $(shell find src\/$(PROJECT) -name "test_*.cu")$/;"	m
TEST_CU_WARNS	Makefile	/^TEST_CU_WARNS := $(addprefix $(BUILD_DIR)\/cuda\/, ${TEST_CU_SRCS:.cu=.o.$(WARNS_EXT)})$/;"	m
TEST_CXX_BINS	Makefile	/^TEST_CXX_BINS := $(addsuffix .testbin,$(addprefix $(TEST_BIN_DIR)\/, \\$/;"	m
TEST_CXX_BUILD_DIR	Makefile	/^TEST_CXX_BUILD_DIR := $(BUILD_DIR)\/src\/$(PROJECT)\/test$/;"	m
TEST_CXX_OBJS	Makefile	/^TEST_CXX_OBJS := $(addprefix $(BUILD_DIR)\/, ${TEST_SRCS:.cpp=.o})$/;"	m
TEST_DID_NOT_DIE	src/gtest/gtest.h	/^    TEST_DID_NOT_DIE$/;"	e	enum:testing::internal::DeathTest::AbortReason
TEST_ENCOUNTERED_RETURN_STATEMENT	src/gtest/gtest.h	/^    TEST_ENCOUNTERED_RETURN_STATEMENT,$/;"	e	enum:testing::internal::DeathTest::AbortReason
TEST_F	src/caffe/test/test_common.cpp	/^TEST_F(CommonTest, TestBrewMode) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_common.cpp	/^TEST_F(CommonTest, TestCublasHandlerGPU) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_common.cpp	/^TEST_F(CommonTest, TestRandSeedCPU) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_common.cpp	/^TEST_F(CommonTest, TestRandSeedGPU) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_internal_thread.cpp	/^TEST_F(InternalThreadTest, TestRandomSeed) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_internal_thread.cpp	/^TEST_F(InternalThreadTest, TestStartAndExit) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_io.cpp	/^TEST_F(IOTest, TestCVMatToDatum) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_io.cpp	/^TEST_F(IOTest, TestCVMatToDatumContent) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_io.cpp	/^TEST_F(IOTest, TestCVMatToDatumReference) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_io.cpp	/^TEST_F(IOTest, TestDecodeDatum) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_io.cpp	/^TEST_F(IOTest, TestDecodeDatumNative) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_io.cpp	/^TEST_F(IOTest, TestDecodeDatumNativeGray) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_io.cpp	/^TEST_F(IOTest, TestDecodeDatumToCVMat) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_io.cpp	/^TEST_F(IOTest, TestDecodeDatumToCVMatContent) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_io.cpp	/^TEST_F(IOTest, TestDecodeDatumToCVMatContentNative) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_io.cpp	/^TEST_F(IOTest, TestDecodeDatumToCVMatNative) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_io.cpp	/^TEST_F(IOTest, TestDecodeDatumToCVMatNativeGray) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_io.cpp	/^TEST_F(IOTest, TestReadFileToDatum) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToCVMat) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToCVMatGray) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToCVMatResized) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToCVMatResizedGray) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToCVMatResizedSquare) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToDatum) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToDatumContent) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToDatumContentGray) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToDatumGray) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToDatumReference) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToDatumReferenceResized) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToDatumResized) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToDatumResizedGray) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_io.cpp	/^TEST_F(IOTest, TestReadImageToDatumResizedSquare) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterInByIncludeMultiRule) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterInByMaxLevel) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterInByMaxLevel2) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterInByMinLevel) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterInByMinLevel2) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterInByMultipleStage) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterInByMultipleStage2) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterInByNotStage) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterInByStage) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterInByStage2) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterInOutByExcludeMultiRule) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterInOutByIncludeMultiRule) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterLeNetTrainTest) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterOutByMaxLevel) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterOutByMinLevel) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterOutByMultipleStage) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterOutByNotStage) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterOutByStage) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_net.cpp	/^TEST_F(FilterNetTest, TestFilterOutByStage2) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_net.cpp	/^TEST_F(FilterNetTest, TestNoFilter) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_platform.cpp	/^TEST_F(PlatformTest, TestInitialization) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_protobuf.cpp	/^TEST_F(ProtoTest, TestSerialization) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_split_layer.cpp	/^TEST_F(SplitLayerInsertionTest, TestInsertion) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_split_layer.cpp	/^TEST_F(SplitLayerInsertionTest, TestInsertionTwoTop) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_split_layer.cpp	/^TEST_F(SplitLayerInsertionTest, TestLossInsertion) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_split_layer.cpp	/^TEST_F(SplitLayerInsertionTest, TestNoInsertion1) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_split_layer.cpp	/^TEST_F(SplitLayerInsertionTest, TestNoInsertion2) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_split_layer.cpp	/^TEST_F(SplitLayerInsertionTest, TestNoInsertionImageNet) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_split_layer.cpp	/^TEST_F(SplitLayerInsertionTest, TestNoInsertionWithInPlace) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_split_layer.cpp	/^TEST_F(SplitLayerInsertionTest, TestWithInPlace) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_syncedmem.cpp	/^TEST_F(SyncedMemoryTest, TestAllocationCPU) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_syncedmem.cpp	/^TEST_F(SyncedMemoryTest, TestAllocationCPUGPU) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_syncedmem.cpp	/^TEST_F(SyncedMemoryTest, TestAllocationGPU) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_syncedmem.cpp	/^TEST_F(SyncedMemoryTest, TestCPUWrite) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_syncedmem.cpp	/^TEST_F(SyncedMemoryTest, TestGPURead) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_syncedmem.cpp	/^TEST_F(SyncedMemoryTest, TestGPUWrite) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_syncedmem.cpp	/^TEST_F(SyncedMemoryTest, TestInitialization) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_upgrade_proto.cpp	/^TEST_F(NetUpgradeTest, TestAllParams) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_upgrade_proto.cpp	/^TEST_F(NetUpgradeTest, TestImageNet) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_upgrade_proto.cpp	/^TEST_F(NetUpgradeTest, TestSimple) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_upgrade_proto.cpp	/^TEST_F(NetUpgradeTest, TestUpgradeV1LayerType) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_upgrade_proto.cpp	/^TEST_F(PaddingLayerUpgradeTest, TestImageNet) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_upgrade_proto.cpp	/^TEST_F(PaddingLayerUpgradeTest, TestSimple) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_upgrade_proto.cpp	/^TEST_F(PaddingLayerUpgradeTest, TestTwoTops) {$/;"	f	namespace:caffe
TEST_F	src/caffe/test/test_upgrade_proto.cpp	/^TEST_F(SolverTypeUpgradeTest, TestSimple) {$/;"	f	namespace:caffe
TEST_F	src/gtest/gtest.h	/^#define TEST_F(/;"	d
TEST_FILTER	Makefile	/^	TEST_FILTER := --gtest_filter="-*GPU*"$/;"	m
TEST_MAIN_SRC	Makefile	/^TEST_MAIN_SRC := src\/$(PROJECT)\/test\/test_caffe_main.cpp$/;"	m
TEST_OBJS	Makefile	/^	TEST_OBJS := $(TEST_CXX_OBJS)$/;"	m
TEST_OBJS	Makefile	/^TEST_OBJS := $(TEST_CXX_OBJS) $(TEST_CU_OBJS)$/;"	m
TEST_P	src/gtest/gtest.h	/^# define TEST_P(/;"	d
TEST_SRCS	Makefile	/^TEST_SRCS := $(filter-out $(TEST_MAIN_SRC), $(TEST_SRCS))$/;"	m
TEST_SRCS	Makefile	/^TEST_SRCS := $(shell find src\/$(PROJECT) -name "test_*.cpp")$/;"	m
TEST_THREW_EXCEPTION	src/gtest/gtest.h	/^    TEST_THREW_EXCEPTION,$/;"	e	enum:testing::internal::DeathTest::AbortReason
TEST_WARNS	Makefile	/^TEST_WARNS := $(addprefix $(BUILD_DIR)\/, ${TEST_SRCS:.cpp=.o.$(WARNS_EXT)})$/;"	m
THREW	src/gtest/gtest-all.cpp	/^enum DeathTestOutcome { IN_PROGRESS, DIED, LIVED, RETURNED, THREW };$/;"	e	enum:testing::internal::DeathTestOutcome	file:
TOOL_BINS	Makefile	/^TOOL_BINS := ${TOOL_OBJS:.o=.bin}$/;"	m
TOOL_BIN_LINKS	Makefile	/^TOOL_BIN_LINKS := ${TOOL_BINS:.bin=}$/;"	m
TOOL_BUILD_DIR	Makefile	/^TOOL_BUILD_DIR := $(BUILD_DIR)\/tools$/;"	m
TOOL_OBJS	Makefile	/^TOOL_OBJS := $(addprefix $(BUILD_DIR)\/, ${TOOL_SRCS:.cpp=.o})$/;"	m
TOOL_SRCS	Makefile	/^TOOL_SRCS := $(shell find tools -name "*.cpp")$/;"	m
TOOL_WARNS	Makefile	/^TOOL_WARNS := $(addprefix $(BUILD_DIR)\/, ${TOOL_SRCS:.cpp=.o.$(WARNS_EXT)})$/;"	m
TRAIN	python/caffe/__init__.py	/^from .proto.caffe_pb2 import TRAIN, TEST$/;"	i
TYPED_TEST	src/caffe/test/test_accuracy_layer.cpp	/^TYPED_TEST(AccuracyLayerTest, TestForwardCPU) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_accuracy_layer.cpp	/^TYPED_TEST(AccuracyLayerTest, TestForwardCPUPerClass) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_accuracy_layer.cpp	/^TYPED_TEST(AccuracyLayerTest, TestForwardCPUPerClassWithIgnoreLabel) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_accuracy_layer.cpp	/^TYPED_TEST(AccuracyLayerTest, TestForwardCPUTopK) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_accuracy_layer.cpp	/^TYPED_TEST(AccuracyLayerTest, TestForwardIgnoreLabel) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_accuracy_layer.cpp	/^TYPED_TEST(AccuracyLayerTest, TestForwardWithSpatialAxes) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_accuracy_layer.cpp	/^TYPED_TEST(AccuracyLayerTest, TestSetup) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_accuracy_layer.cpp	/^TYPED_TEST(AccuracyLayerTest, TestSetupOutputPerClass) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_accuracy_layer.cpp	/^TYPED_TEST(AccuracyLayerTest, TestSetupTopK) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_argmax_layer.cpp	/^TYPED_TEST(ArgMaxLayerTest, TestCPU) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_argmax_layer.cpp	/^TYPED_TEST(ArgMaxLayerTest, TestCPUAxis) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_argmax_layer.cpp	/^TYPED_TEST(ArgMaxLayerTest, TestCPUAxisMaxValTopK) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_argmax_layer.cpp	/^TYPED_TEST(ArgMaxLayerTest, TestCPUAxisTopK) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_argmax_layer.cpp	/^TYPED_TEST(ArgMaxLayerTest, TestCPUMaxVal) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_argmax_layer.cpp	/^TYPED_TEST(ArgMaxLayerTest, TestCPUMaxValTopK) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_argmax_layer.cpp	/^TYPED_TEST(ArgMaxLayerTest, TestCPUTopK) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_argmax_layer.cpp	/^TYPED_TEST(ArgMaxLayerTest, TestSetup) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_argmax_layer.cpp	/^TYPED_TEST(ArgMaxLayerTest, TestSetupAxis) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_argmax_layer.cpp	/^TYPED_TEST(ArgMaxLayerTest, TestSetupAxisMaxVal) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_argmax_layer.cpp	/^TYPED_TEST(ArgMaxLayerTest, TestSetupAxisNegativeIndexing) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_argmax_layer.cpp	/^TYPED_TEST(ArgMaxLayerTest, TestSetupMaxVal) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_batch_norm_layer.cpp	/^  TYPED_TEST(BatchNormLayerTest, TestForward) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_batch_norm_layer.cpp	/^  TYPED_TEST(BatchNormLayerTest, TestForwardInplace) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_batch_norm_layer.cpp	/^  TYPED_TEST(BatchNormLayerTest, TestGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_batch_reindex_layer.cpp	/^TYPED_TEST(BatchReindexLayerTest, TestForward) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_batch_reindex_layer.cpp	/^TYPED_TEST(BatchReindexLayerTest, TestGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_benchmark.cpp	/^TYPED_TEST(BenchmarkTest, TestTimerConstructor) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_benchmark.cpp	/^TYPED_TEST(BenchmarkTest, TestTimerMilliSeconds) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_benchmark.cpp	/^TYPED_TEST(BenchmarkTest, TestTimerSeconds) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_benchmark.cpp	/^TYPED_TEST(BenchmarkTest, TestTimerStart) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_benchmark.cpp	/^TYPED_TEST(BenchmarkTest, TestTimerStop) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_bias_layer.cpp	/^TYPED_TEST(BiasLayerTest, TestBackwardBroadcastMiddleInPlace) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_bias_layer.cpp	/^TYPED_TEST(BiasLayerTest, TestBackwardEltwiseInPlace) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_bias_layer.cpp	/^TYPED_TEST(BiasLayerTest, TestForwardBias) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_bias_layer.cpp	/^TYPED_TEST(BiasLayerTest, TestForwardBiasAxis2) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_bias_layer.cpp	/^TYPED_TEST(BiasLayerTest, TestForwardBroadcastBegin) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_bias_layer.cpp	/^TYPED_TEST(BiasLayerTest, TestForwardBroadcastEnd) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_bias_layer.cpp	/^TYPED_TEST(BiasLayerTest, TestForwardBroadcastMiddle) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_bias_layer.cpp	/^TYPED_TEST(BiasLayerTest, TestForwardBroadcastMiddleInPlace) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_bias_layer.cpp	/^TYPED_TEST(BiasLayerTest, TestForwardBroadcastMiddleWithParam) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_bias_layer.cpp	/^TYPED_TEST(BiasLayerTest, TestForwardEltwise) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_bias_layer.cpp	/^TYPED_TEST(BiasLayerTest, TestForwardEltwiseInPlace) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_bias_layer.cpp	/^TYPED_TEST(BiasLayerTest, TestForwardEltwiseWithParam) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_bias_layer.cpp	/^TYPED_TEST(BiasLayerTest, TestGradientBias) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_bias_layer.cpp	/^TYPED_TEST(BiasLayerTest, TestGradientBiasAxis2) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_bias_layer.cpp	/^TYPED_TEST(BiasLayerTest, TestGradientBroadcastBegin) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_bias_layer.cpp	/^TYPED_TEST(BiasLayerTest, TestGradientBroadcastEnd) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_bias_layer.cpp	/^TYPED_TEST(BiasLayerTest, TestGradientBroadcastMiddle) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_bias_layer.cpp	/^TYPED_TEST(BiasLayerTest, TestGradientBroadcastMiddleWithParam) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_bias_layer.cpp	/^TYPED_TEST(BiasLayerTest, TestGradientEltwise) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_bias_layer.cpp	/^TYPED_TEST(BiasLayerTest, TestGradientEltwiseWithParam) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_blob.cpp	/^TYPED_TEST(BlobMathTest, TestAsum) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_blob.cpp	/^TYPED_TEST(BlobMathTest, TestScaleData) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_blob.cpp	/^TYPED_TEST(BlobMathTest, TestSumOfSquares) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_blob.cpp	/^TYPED_TEST(BlobSimpleTest, TestInitialization) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_blob.cpp	/^TYPED_TEST(BlobSimpleTest, TestLegacyBlobProtoShapeEquals) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_blob.cpp	/^TYPED_TEST(BlobSimpleTest, TestPointersCPUGPU) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_blob.cpp	/^TYPED_TEST(BlobSimpleTest, TestReshape) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_blob.cpp	/^TYPED_TEST(BlobSimpleTest, TestReshapeZero) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_concat_layer.cpp	/^TYPED_TEST(ConcatLayerTest, TestForwardChannels) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_concat_layer.cpp	/^TYPED_TEST(ConcatLayerTest, TestForwardNum) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_concat_layer.cpp	/^TYPED_TEST(ConcatLayerTest, TestForwardTrivial) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_concat_layer.cpp	/^TYPED_TEST(ConcatLayerTest, TestGradientChannels) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_concat_layer.cpp	/^TYPED_TEST(ConcatLayerTest, TestGradientChannelsBottomOneOnly) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_concat_layer.cpp	/^TYPED_TEST(ConcatLayerTest, TestGradientNum) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_concat_layer.cpp	/^TYPED_TEST(ConcatLayerTest, TestGradientTrivial) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_concat_layer.cpp	/^TYPED_TEST(ConcatLayerTest, TestSetupChannels) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_concat_layer.cpp	/^TYPED_TEST(ConcatLayerTest, TestSetupChannelsNegativeIndexing) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_concat_layer.cpp	/^TYPED_TEST(ConcatLayerTest, TestSetupNum) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_contrastive_loss_layer.cpp	/^TYPED_TEST(ContrastiveLossLayerTest, TestForward) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_contrastive_loss_layer.cpp	/^TYPED_TEST(ContrastiveLossLayerTest, TestForwardLegacy) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_contrastive_loss_layer.cpp	/^TYPED_TEST(ContrastiveLossLayerTest, TestGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_contrastive_loss_layer.cpp	/^TYPED_TEST(ContrastiveLossLayerTest, TestGradientLegacy) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, Test0DConvolution) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, Test1x1Convolution) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, Test1x1Gradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, TestDilated3DConvolution) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, TestDilatedConvolution) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, TestDilatedGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, TestGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, TestGradient3D) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, TestGradientGroup) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, TestNDAgainst2D) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, TestSetup) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, TestSimple3DConvolution) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, TestSimpleConvolution) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, TestSimpleConvolutionGroup) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_convolution_layer.cpp	/^TYPED_TEST(ConvolutionLayerTest, TestSobelConvolution) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_convolution_layer.cpp	/^TYPED_TEST(CuDNNConvolutionLayerTest, TestGradientCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_convolution_layer.cpp	/^TYPED_TEST(CuDNNConvolutionLayerTest, TestGradientGroupCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_convolution_layer.cpp	/^TYPED_TEST(CuDNNConvolutionLayerTest, TestSetupCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_convolution_layer.cpp	/^TYPED_TEST(CuDNNConvolutionLayerTest, TestSimpleConvolutionCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_convolution_layer.cpp	/^TYPED_TEST(CuDNNConvolutionLayerTest, TestSimpleConvolutionGroupCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_convolution_layer.cpp	/^TYPED_TEST(CuDNNConvolutionLayerTest, TestSobelConvolutionCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_crop_layer.cpp	/^TYPED_TEST(CropLayerTest, TestCrop5D) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_crop_layer.cpp	/^TYPED_TEST(CropLayerTest, TestCrop5DGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_crop_layer.cpp	/^TYPED_TEST(CropLayerTest, TestCropAll) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_crop_layer.cpp	/^TYPED_TEST(CropLayerTest, TestCropAllGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_crop_layer.cpp	/^TYPED_TEST(CropLayerTest, TestCropAllOffset) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_crop_layer.cpp	/^TYPED_TEST(CropLayerTest, TestCropHW) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_crop_layer.cpp	/^TYPED_TEST(CropLayerTest, TestCropHWGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_crop_layer.cpp	/^TYPED_TEST(CropLayerTest, TestDimensionsCheck) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_crop_layer.cpp	/^TYPED_TEST(CropLayerTest, TestSetupShapeAll) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_crop_layer.cpp	/^TYPED_TEST(CropLayerTest, TestSetupShapeDefault) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_crop_layer.cpp	/^TYPED_TEST(CropLayerTest, TestSetupShapeNegativeIndexing) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestReadCropTestLMDB) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestReadCropTestLevelDB) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestReadCropTrainLMDB) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestReadCropTrainLevelDB) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestReadCropTrainSequenceSeededLMDB) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestReadCropTrainSequenceSeededLevelDB) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestReadCropTrainSequenceUnseededLMDB) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestReadCropTrainSequenceUnseededLevelDB) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestReadLMDB) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestReadLevelDB) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestReshapeLMDB) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestReshapeLevelDB) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestSkipLMDB) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_data_layer.cpp	/^TYPED_TEST(DataLayerTest, TestSkipLevelDB) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_data_transformer.cpp	/^TYPED_TEST(DataTransformTest, TestCropMirrorTest) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_data_transformer.cpp	/^TYPED_TEST(DataTransformTest, TestCropMirrorTrain) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_data_transformer.cpp	/^TYPED_TEST(DataTransformTest, TestCropSize) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_data_transformer.cpp	/^TYPED_TEST(DataTransformTest, TestCropTest) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_data_transformer.cpp	/^TYPED_TEST(DataTransformTest, TestCropTrain) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_data_transformer.cpp	/^TYPED_TEST(DataTransformTest, TestEmptyTransform) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_data_transformer.cpp	/^TYPED_TEST(DataTransformTest, TestEmptyTransformUniquePixels) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_data_transformer.cpp	/^TYPED_TEST(DataTransformTest, TestMeanFile) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_data_transformer.cpp	/^TYPED_TEST(DataTransformTest, TestMeanValue) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_data_transformer.cpp	/^TYPED_TEST(DataTransformTest, TestMeanValues) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_data_transformer.cpp	/^TYPED_TEST(DataTransformTest, TestMirrorTest) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_data_transformer.cpp	/^TYPED_TEST(DataTransformTest, TestMirrorTrain) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_db.cpp	/^TYPED_TEST(DBTest, TestGetDB) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_db.cpp	/^TYPED_TEST(DBTest, TestKeyValue) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_db.cpp	/^TYPED_TEST(DBTest, TestNext) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_db.cpp	/^TYPED_TEST(DBTest, TestSeekToFirst) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_db.cpp	/^TYPED_TEST(DBTest, TestWrite) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_deconvolution_layer.cpp	/^TYPED_TEST(DeconvolutionLayerTest, TestGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_deconvolution_layer.cpp	/^TYPED_TEST(DeconvolutionLayerTest, TestGradient3D) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_deconvolution_layer.cpp	/^TYPED_TEST(DeconvolutionLayerTest, TestNDAgainst2D) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_deconvolution_layer.cpp	/^TYPED_TEST(DeconvolutionLayerTest, TestSetup) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_deconvolution_layer.cpp	/^TYPED_TEST(DeconvolutionLayerTest, TestSimpleDeconvolution) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_dummy_data_layer.cpp	/^TYPED_TEST(DummyDataLayerTest, TestOneTopConstant) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_dummy_data_layer.cpp	/^TYPED_TEST(DummyDataLayerTest, TestThreeTopConstantGaussianConstant) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_dummy_data_layer.cpp	/^TYPED_TEST(DummyDataLayerTest, TestTwoTopConstant) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_eltwise_layer.cpp	/^TYPED_TEST(EltwiseLayerTest, TestMax) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_eltwise_layer.cpp	/^TYPED_TEST(EltwiseLayerTest, TestMaxGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_eltwise_layer.cpp	/^TYPED_TEST(EltwiseLayerTest, TestProd) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_eltwise_layer.cpp	/^TYPED_TEST(EltwiseLayerTest, TestSetUp) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_eltwise_layer.cpp	/^TYPED_TEST(EltwiseLayerTest, TestStableProdGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_eltwise_layer.cpp	/^TYPED_TEST(EltwiseLayerTest, TestSum) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_eltwise_layer.cpp	/^TYPED_TEST(EltwiseLayerTest, TestSumCoeff) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_eltwise_layer.cpp	/^TYPED_TEST(EltwiseLayerTest, TestSumCoeffGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_eltwise_layer.cpp	/^TYPED_TEST(EltwiseLayerTest, TestSumGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_eltwise_layer.cpp	/^TYPED_TEST(EltwiseLayerTest, TestUnstableProdGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_embed_layer.cpp	/^TYPED_TEST(EmbedLayerTest, TestForward) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_embed_layer.cpp	/^TYPED_TEST(EmbedLayerTest, TestForwardWithBias) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_embed_layer.cpp	/^TYPED_TEST(EmbedLayerTest, TestGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_embed_layer.cpp	/^TYPED_TEST(EmbedLayerTest, TestGradientWithBias) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_embed_layer.cpp	/^TYPED_TEST(EmbedLayerTest, TestSetUp) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_euclidean_loss_layer.cpp	/^TYPED_TEST(EuclideanLossLayerTest, TestForward) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_euclidean_loss_layer.cpp	/^TYPED_TEST(EuclideanLossLayerTest, TestGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_filler.cpp	/^TYPED_TEST(ConstantFillerTest, TestFill) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_filler.cpp	/^TYPED_TEST(GaussianFillerTest, TestFill) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_filler.cpp	/^TYPED_TEST(MSRAFillerTest, TestFillAverage) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_filler.cpp	/^TYPED_TEST(MSRAFillerTest, TestFillFanIn) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_filler.cpp	/^TYPED_TEST(MSRAFillerTest, TestFillFanOut) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_filler.cpp	/^TYPED_TEST(PositiveUnitballFillerTest, TestFill) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_filler.cpp	/^TYPED_TEST(UniformFillerTest, TestFill) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_filler.cpp	/^TYPED_TEST(XavierFillerTest, TestFillAverage) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_filler.cpp	/^TYPED_TEST(XavierFillerTest, TestFillFanIn) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_filler.cpp	/^TYPED_TEST(XavierFillerTest, TestFillFanOut) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_filter_layer.cpp	/^TYPED_TEST(FilterLayerTest, TestForward) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_filter_layer.cpp	/^TYPED_TEST(FilterLayerTest, TestGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_filter_layer.cpp	/^TYPED_TEST(FilterLayerTest, TestReshape) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_flatten_layer.cpp	/^TYPED_TEST(FlattenLayerTest, TestForward) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_flatten_layer.cpp	/^TYPED_TEST(FlattenLayerTest, TestGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_flatten_layer.cpp	/^TYPED_TEST(FlattenLayerTest, TestSetup) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_flatten_layer.cpp	/^TYPED_TEST(FlattenLayerTest, TestSetupWithAxis) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_flatten_layer.cpp	/^TYPED_TEST(FlattenLayerTest, TestSetupWithEndAxis) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_flatten_layer.cpp	/^TYPED_TEST(FlattenLayerTest, TestSetupWithStartAndEndAxis) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaDeltaSolverTest, TestAdaDeltaLeastSquaresUpdate) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaDeltaSolverTest, TestAdaDeltaLeastSquaresUpdateWithEverything) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaDeltaSolverTest, TestAdaDeltaLeastSquaresUpdateWithHalfMomentum) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaDeltaSolverTest, TestAdaDeltaLeastSquaresUpdateWithMomentum) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaDeltaSolverTest, TestAdaDeltaLeastSquaresUpdateWithWeightDecay) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaDeltaSolverTest, TestLeastSquaresUpdateWithEverythingAccum) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaDeltaSolverTest, TestLeastSquaresUpdateWithEverythingAccumShare) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaDeltaSolverTest, TestLeastSquaresUpdateWithMomentumMultiIter) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaDeltaSolverTest, TestSnapshot) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaDeltaSolverTest, TestSnapshotShare) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaDeltaSolverTest,$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaGradSolverTest, TestAdaGradLeastSquaresUpdate) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaGradSolverTest, TestAdaGradLeastSquaresUpdateLROneHundredth) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaGradSolverTest, TestAdaGradLeastSquaresUpdateWithEverything) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaGradSolverTest, TestAdaGradLeastSquaresUpdateWithWeightDecay) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaGradSolverTest, TestLeastSquaresUpdateWithEverythingAccum) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaGradSolverTest, TestLeastSquaresUpdateWithEverythingAccumShare) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaGradSolverTest, TestSnapshot) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaGradSolverTest, TestSnapshotShare) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdaGradSolverTest,$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdamSolverTest, TestAdamLeastSquaresUpdate) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdamSolverTest, TestAdamLeastSquaresUpdateWithEverything) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdamSolverTest, TestAdamLeastSquaresUpdateWithEverythingShare) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdamSolverTest, TestAdamLeastSquaresUpdateWithWeightDecay) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdamSolverTest, TestLeastSquaresUpdateWithEverythingAccum) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdamSolverTest, TestLeastSquaresUpdateWithEverythingAccumShare) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdamSolverTest, TestSnapshot) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(AdamSolverTest, TestSnapshotShare) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(NesterovSolverTest, TestLeastSquaresUpdateWithEverythingAccum) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(NesterovSolverTest, TestLeastSquaresUpdateWithEverythingAccumShare) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(NesterovSolverTest, TestLeastSquaresUpdateWithMomentumMultiIter) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(NesterovSolverTest, TestNesterovLeastSquaresUpdate) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(NesterovSolverTest, TestNesterovLeastSquaresUpdateLROneHundredth) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(NesterovSolverTest, TestNesterovLeastSquaresUpdateWithEverything) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(NesterovSolverTest, TestNesterovLeastSquaresUpdateWithMomentum) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(NesterovSolverTest, TestNesterovLeastSquaresUpdateWithWeightDecay) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(NesterovSolverTest, TestSnapshot) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(NesterovSolverTest, TestSnapshotShare) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(NesterovSolverTest,$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(RMSPropSolverTest, TestLeastSquaresUpdateWithEverythingAccum) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(RMSPropSolverTest, TestLeastSquaresUpdateWithEverythingAccumShare) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(RMSPropSolverTest, TestRMSPropLeastSquaresUpdateWithEverything) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(RMSPropSolverTest, TestRMSPropLeastSquaresUpdateWithRmsDecay) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(RMSPropSolverTest, TestRMSPropLeastSquaresUpdateWithWeightDecay) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(RMSPropSolverTest, TestSnapshot) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(RMSPropSolverTest, TestSnapshotShare) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(RMSPropSolverTest,$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(SGDSolverTest, TestLeastSquaresUpdate) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(SGDSolverTest, TestLeastSquaresUpdateLROneHundredth) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(SGDSolverTest, TestLeastSquaresUpdateWithEverything) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(SGDSolverTest, TestLeastSquaresUpdateWithEverythingAccum) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(SGDSolverTest, TestLeastSquaresUpdateWithEverythingAccumShare) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(SGDSolverTest, TestLeastSquaresUpdateWithEverythingShare) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(SGDSolverTest, TestLeastSquaresUpdateWithMomentum) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(SGDSolverTest, TestLeastSquaresUpdateWithMomentumMultiIter) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(SGDSolverTest, TestLeastSquaresUpdateWithWeightDecay) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(SGDSolverTest, TestLeastSquaresUpdateWithWeightDecayMultiIter) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(SGDSolverTest, TestSnapshot) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_gradient_based_solver.cpp	/^TYPED_TEST(SGDSolverTest, TestSnapshotShare) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_hdf5_output_layer.cpp	/^TYPED_TEST(HDF5OutputLayerTest, TestForward) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_hdf5data_layer.cpp	/^TYPED_TEST(HDF5DataLayerTest, TestRead) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_hdf5data_layer.cpp	/^TYPED_TEST(HDF5DataLayerTest, TestSkip) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_hinge_loss_layer.cpp	/^TYPED_TEST(HingeLossLayerTest, TestGradientL1) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_hinge_loss_layer.cpp	/^TYPED_TEST(HingeLossLayerTest, TestGradientL2) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_im2col_layer.cpp	/^TYPED_TEST(Im2colLayerTest, TestDilatedGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_im2col_layer.cpp	/^TYPED_TEST(Im2colLayerTest, TestDilatedGradientForceND) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_im2col_layer.cpp	/^TYPED_TEST(Im2colLayerTest, TestForward) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_im2col_layer.cpp	/^TYPED_TEST(Im2colLayerTest, TestGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_im2col_layer.cpp	/^TYPED_TEST(Im2colLayerTest, TestGradientForceND) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_im2col_layer.cpp	/^TYPED_TEST(Im2colLayerTest, TestRect) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_im2col_layer.cpp	/^TYPED_TEST(Im2colLayerTest, TestRectGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_im2col_layer.cpp	/^TYPED_TEST(Im2colLayerTest, TestSetup) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_image_data_layer.cpp	/^TYPED_TEST(ImageDataLayerTest, TestRead) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_image_data_layer.cpp	/^TYPED_TEST(ImageDataLayerTest, TestReshape) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_image_data_layer.cpp	/^TYPED_TEST(ImageDataLayerTest, TestResize) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_image_data_layer.cpp	/^TYPED_TEST(ImageDataLayerTest, TestShuffle) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_image_data_layer.cpp	/^TYPED_TEST(ImageDataLayerTest, TestSpace) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_infogain_loss_layer.cpp	/^TYPED_TEST(InfogainLossLayerTest, TestGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_infogain_loss_layer.cpp	/^TYPED_TEST(InfogainLossLayerTest, TestInfogainLoss) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_inner_product_layer.cpp	/^TYPED_TEST(InnerProductLayerTest, TestBackwardTranspose) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_inner_product_layer.cpp	/^TYPED_TEST(InnerProductLayerTest, TestForward) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_inner_product_layer.cpp	/^TYPED_TEST(InnerProductLayerTest, TestForwardNoBatch) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_inner_product_layer.cpp	/^TYPED_TEST(InnerProductLayerTest, TestForwardTranspose) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_inner_product_layer.cpp	/^TYPED_TEST(InnerProductLayerTest, TestGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_inner_product_layer.cpp	/^TYPED_TEST(InnerProductLayerTest, TestGradientTranspose) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_inner_product_layer.cpp	/^TYPED_TEST(InnerProductLayerTest, TestSetUp) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_inner_product_layer.cpp	/^TYPED_TEST(InnerProductLayerTest, TestSetUpTransposeFalse) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_inner_product_layer.cpp	/^TYPED_TEST(InnerProductLayerTest, TestSetUpTransposeTrue) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_layer_factory.cpp	/^TYPED_TEST(LayerFactoryTest, TestCreateLayer) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_lrn_layer.cpp	/^TYPED_TEST(CuDNNLRNLayerTest, TestForwardAcrossChannelsCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_lrn_layer.cpp	/^TYPED_TEST(CuDNNLRNLayerTest, TestForwardAcrossChannelsLargeRegionCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_lrn_layer.cpp	/^TYPED_TEST(CuDNNLRNLayerTest, TestForwardWithinChannel) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_lrn_layer.cpp	/^TYPED_TEST(CuDNNLRNLayerTest, TestGradientAcrossChannelsCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_lrn_layer.cpp	/^TYPED_TEST(CuDNNLRNLayerTest, TestGradientAcrossChannelsLargeRegionCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_lrn_layer.cpp	/^TYPED_TEST(CuDNNLRNLayerTest, TestGradientWithinChannel) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_lrn_layer.cpp	/^TYPED_TEST(LRNLayerTest, TestForwardAcrossChannels) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_lrn_layer.cpp	/^TYPED_TEST(LRNLayerTest, TestForwardAcrossChannelsLargeRegion) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_lrn_layer.cpp	/^TYPED_TEST(LRNLayerTest, TestForwardWithinChannel) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_lrn_layer.cpp	/^TYPED_TEST(LRNLayerTest, TestGradientAcrossChannels) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_lrn_layer.cpp	/^TYPED_TEST(LRNLayerTest, TestGradientAcrossChannelsLargeRegion) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_lrn_layer.cpp	/^TYPED_TEST(LRNLayerTest, TestGradientWithinChannel) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_lrn_layer.cpp	/^TYPED_TEST(LRNLayerTest, TestSetupAcrossChannels) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_lrn_layer.cpp	/^TYPED_TEST(LRNLayerTest, TestSetupWithinChannel) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_lstm_layer.cpp	/^TYPED_TEST(LSTMLayerTest, TestForward) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_lstm_layer.cpp	/^TYPED_TEST(LSTMLayerTest, TestGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_lstm_layer.cpp	/^TYPED_TEST(LSTMLayerTest, TestGradientNonZeroCont) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_lstm_layer.cpp	/^TYPED_TEST(LSTMLayerTest, TestGradientNonZeroContBufferSize2) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_lstm_layer.cpp	/^TYPED_TEST(LSTMLayerTest, TestGradientNonZeroContBufferSize2WithStaticInput) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_lstm_layer.cpp	/^TYPED_TEST(LSTMLayerTest, TestLSTMUnitGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_lstm_layer.cpp	/^TYPED_TEST(LSTMLayerTest, TestLSTMUnitGradientNonZeroCont) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_lstm_layer.cpp	/^TYPED_TEST(LSTMLayerTest, TestLSTMUnitSetUp) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_lstm_layer.cpp	/^TYPED_TEST(LSTMLayerTest, TestSetUp) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_math_functions.cpp	/^TYPED_TEST(CPUMathFunctionsTest, TestAsum) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_math_functions.cpp	/^TYPED_TEST(CPUMathFunctionsTest, TestCopy) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_math_functions.cpp	/^TYPED_TEST(CPUMathFunctionsTest, TestFabs) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_math_functions.cpp	/^TYPED_TEST(CPUMathFunctionsTest, TestNothing) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_math_functions.cpp	/^TYPED_TEST(CPUMathFunctionsTest, TestScale) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_math_functions.cpp	/^TYPED_TEST(CPUMathFunctionsTest, TestSgnbit) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_math_functions.cpp	/^TYPED_TEST(CPUMathFunctionsTest, TestSign) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_math_functions.cpp	/^TYPED_TEST(GPUMathFunctionsTest, TestAsum) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_math_functions.cpp	/^TYPED_TEST(GPUMathFunctionsTest, TestCopy) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_math_functions.cpp	/^TYPED_TEST(GPUMathFunctionsTest, TestFabs) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_math_functions.cpp	/^TYPED_TEST(GPUMathFunctionsTest, TestScale) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_math_functions.cpp	/^TYPED_TEST(GPUMathFunctionsTest, TestSgnbit) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_math_functions.cpp	/^TYPED_TEST(GPUMathFunctionsTest, TestSign) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_maxpool_dropout_layers.cpp	/^TYPED_TEST(MaxPoolingDropoutTest, TestBackward) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_maxpool_dropout_layers.cpp	/^TYPED_TEST(MaxPoolingDropoutTest, TestForward) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_maxpool_dropout_layers.cpp	/^TYPED_TEST(MaxPoolingDropoutTest, TestSetup) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_memory_data_layer.cpp	/^TYPED_TEST(MemoryDataLayerTest, AddDatumVectorDefaultTransform) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_memory_data_layer.cpp	/^TYPED_TEST(MemoryDataLayerTest, AddMatVectorDefaultTransform) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_memory_data_layer.cpp	/^TYPED_TEST(MemoryDataLayerTest, TestForward) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_memory_data_layer.cpp	/^TYPED_TEST(MemoryDataLayerTest, TestSetBatchSize) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_memory_data_layer.cpp	/^TYPED_TEST(MemoryDataLayerTest, TestSetup) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_multinomial_logistic_loss_layer.cpp	/^TYPED_TEST(MultinomialLogisticLossLayerTest, TestGradientCPU) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_mvn_layer.cpp	/^TYPED_TEST(MVNLayerTest, TestForward) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_mvn_layer.cpp	/^TYPED_TEST(MVNLayerTest, TestForwardAcrossChannels) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_mvn_layer.cpp	/^TYPED_TEST(MVNLayerTest, TestForwardMeanOnly) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_mvn_layer.cpp	/^TYPED_TEST(MVNLayerTest, TestGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_mvn_layer.cpp	/^TYPED_TEST(MVNLayerTest, TestGradientAcrossChannels) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_mvn_layer.cpp	/^TYPED_TEST(MVNLayerTest, TestGradientMeanOnly) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_net.cpp	/^TYPED_TEST(NetTest, TestAllInOneNetDeploy) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_net.cpp	/^TYPED_TEST(NetTest, TestAllInOneNetTrain) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_net.cpp	/^TYPED_TEST(NetTest, TestAllInOneNetVal) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_net.cpp	/^TYPED_TEST(NetTest, TestBackwardWithAccuracyLayer) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_net.cpp	/^TYPED_TEST(NetTest, TestBottomNeedBackward) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_net.cpp	/^TYPED_TEST(NetTest, TestBottomNeedBackwardEuclideanForce) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_net.cpp	/^TYPED_TEST(NetTest, TestBottomNeedBackwardForce) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_net.cpp	/^TYPED_TEST(NetTest, TestBottomNeedBackwardTricky) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_net.cpp	/^TYPED_TEST(NetTest, TestComboLossWeight) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_net.cpp	/^TYPED_TEST(NetTest, TestForcePropagateDown) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_net.cpp	/^TYPED_TEST(NetTest, TestFromTo) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_net.cpp	/^TYPED_TEST(NetTest, TestGetBlob) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_net.cpp	/^TYPED_TEST(NetTest, TestGetLayerByName) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_net.cpp	/^TYPED_TEST(NetTest, TestHasBlob) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_net.cpp	/^TYPED_TEST(NetTest, TestHasLayer) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_net.cpp	/^TYPED_TEST(NetTest, TestLossWeight) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_net.cpp	/^TYPED_TEST(NetTest, TestLossWeightMidNet) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_net.cpp	/^TYPED_TEST(NetTest, TestParamPropagateDown) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_net.cpp	/^TYPED_TEST(NetTest, TestReshape) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_net.cpp	/^TYPED_TEST(NetTest, TestSharedWeightsDataNet) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_net.cpp	/^TYPED_TEST(NetTest, TestSharedWeightsDiffNet) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_net.cpp	/^TYPED_TEST(NetTest, TestSharedWeightsResume) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_net.cpp	/^TYPED_TEST(NetTest, TestSharedWeightsUpdate) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_net.cpp	/^TYPED_TEST(NetTest, TestSkipPropagateDown) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_net.cpp	/^TYPED_TEST(NetTest, TestUnsharedWeightsDataNet) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_net.cpp	/^TYPED_TEST(NetTest, TestUnsharedWeightsDiffNet) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(CuDNNNeuronLayerTest, TestReLUCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(CuDNNNeuronLayerTest, TestReLUGradientCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(CuDNNNeuronLayerTest, TestReLUGradientWithNegativeSlopeCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(CuDNNNeuronLayerTest, TestReLUWithNegativeSlopeCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(CuDNNNeuronLayerTest, TestSigmoidCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(CuDNNNeuronLayerTest, TestSigmoidGradientCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(CuDNNNeuronLayerTest, TestTanHCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(CuDNNNeuronLayerTest, TestTanHGradientCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestAbsGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestAbsVal) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestBNLL) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestBNLLGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestDropoutGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestDropoutGradientTest) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestDropoutHalf) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestDropoutTestPhase) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestDropoutThreeQuarters) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestELU) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestELUGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestELUasReLU) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestELUasReLUGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestExpGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestExpGradientBase2) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestExpGradientBase2Scale3) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestExpGradientBase2Shift1) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestExpGradientBase2Shift1Scale3) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestExpGradientWithShift) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestExpLayer) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestExpLayerBase2) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestExpLayerBase2Scale3) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestExpLayerBase2Shift1) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestExpLayerBase2Shift1Scale3) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestExpLayerWithShift) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestLogGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestLogGradientBase2) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestLogGradientBase2Scale3) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestLogGradientBase2Shift1) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestLogGradientBase2Shift1Scale3) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestLogLayer) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestLogLayerBase2) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestLogLayerBase2Scale3) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestLogLayerBase2Shift1) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestLogLayerBase2Shift1Scale3) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestPReLUConsistencyReLU) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestPReLUForward) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestPReLUForwardChannelShared) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestPReLUGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestPReLUGradientChannelShared) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestPReLUInPlace) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestPReLUParam) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestReLU) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestReLUGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestReLUGradientWithNegativeSlope) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestReLUWithNegativeSlope) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestSigmoid) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestSigmoidGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestTanH) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_neuron_layer.cpp	/^TYPED_TEST(NeuronLayerTest, TestTanHGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_pooling_layer.cpp	/^TYPED_TEST(CuDNNPoolingLayerTest, TestForwardAveCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_pooling_layer.cpp	/^TYPED_TEST(CuDNNPoolingLayerTest, TestForwardMaxCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_pooling_layer.cpp	/^TYPED_TEST(CuDNNPoolingLayerTest, TestForwardMaxPaddedCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_pooling_layer.cpp	/^TYPED_TEST(CuDNNPoolingLayerTest, TestGradientAveCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_pooling_layer.cpp	/^TYPED_TEST(CuDNNPoolingLayerTest, TestGradientAvePaddedCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_pooling_layer.cpp	/^TYPED_TEST(CuDNNPoolingLayerTest, TestGradientMaxCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_pooling_layer.cpp	/^TYPED_TEST(CuDNNPoolingLayerTest, TestSetupCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_pooling_layer.cpp	/^TYPED_TEST(CuDNNPoolingLayerTest, TestSetupPaddedCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_pooling_layer.cpp	/^TYPED_TEST(PoolingLayerTest, TestForwardAve) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_pooling_layer.cpp	/^TYPED_TEST(PoolingLayerTest, TestForwardMax) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_pooling_layer.cpp	/^TYPED_TEST(PoolingLayerTest, TestForwardMaxPadded) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_pooling_layer.cpp	/^TYPED_TEST(PoolingLayerTest, TestForwardMaxTopMask) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_pooling_layer.cpp	/^TYPED_TEST(PoolingLayerTest, TestGradientAve) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_pooling_layer.cpp	/^TYPED_TEST(PoolingLayerTest, TestGradientAvePadded) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_pooling_layer.cpp	/^TYPED_TEST(PoolingLayerTest, TestGradientMax) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_pooling_layer.cpp	/^TYPED_TEST(PoolingLayerTest, TestGradientMaxTopMask) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_pooling_layer.cpp	/^TYPED_TEST(PoolingLayerTest, TestSetup) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_pooling_layer.cpp	/^TYPED_TEST(PoolingLayerTest, TestSetupGlobalPooling) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_pooling_layer.cpp	/^TYPED_TEST(PoolingLayerTest, TestSetupPadded) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_power_layer.cpp	/^TYPED_TEST(PowerLayerTest, TestPower) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_power_layer.cpp	/^TYPED_TEST(PowerLayerTest, TestPowerGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_power_layer.cpp	/^TYPED_TEST(PowerLayerTest, TestPowerGradientShiftZero) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_power_layer.cpp	/^TYPED_TEST(PowerLayerTest, TestPowerOne) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_power_layer.cpp	/^TYPED_TEST(PowerLayerTest, TestPowerOneGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_power_layer.cpp	/^TYPED_TEST(PowerLayerTest, TestPowerTwo) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_power_layer.cpp	/^TYPED_TEST(PowerLayerTest, TestPowerTwoGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_power_layer.cpp	/^TYPED_TEST(PowerLayerTest, TestPowerTwoScaleHalfGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_power_layer.cpp	/^TYPED_TEST(PowerLayerTest, TestPowerZero) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_power_layer.cpp	/^TYPED_TEST(PowerLayerTest, TestPowerZeroGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngBernoulli) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngBernoulli2) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngBernoulliTimesBernoulli) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngGaussian) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngGaussian2) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngGaussian2GPU) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngGaussianGPU) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngGaussianTimesBernoulli) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngGaussianTimesGaussian) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngGaussianTimesGaussianGPU) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngUniform) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngUniform2) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngUniform2GPU) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngUniformGPU) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngUniformIntGPU) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngUniformTimesBernoulli) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngUniformTimesUniform) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_random_number_generator.cpp	/^TYPED_TEST(RandomNumberGeneratorTest, TestRngUniformTimesUniformGPU) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestAbsSum) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestAbsSumCoeff) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestAbsSumCoeffAxis1) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestAbsSumCoeffAxis1Gradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestAbsSumCoeffGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestAbsSumGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestMean) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestMeanCoeff) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestMeanCoeffAxis1) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestMeanCoeffGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestMeanCoeffGradientAxis1) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestMeanGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSetUp) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSetUpWithAxis1) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSetUpWithAxis2) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSum) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSumCoeff) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSumCoeffAxis1) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSumCoeffAxis1Gradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSumCoeffGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSumGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSumOfSquares) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSumOfSquaresCoeff) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSumOfSquaresCoeffAxis1) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSumOfSquaresCoeffAxis1Gradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSumOfSquaresCoeffGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_reduction_layer.cpp	/^TYPED_TEST(ReductionLayerTest, TestSumOfSquaresGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_reshape_layer.cpp	/^TYPED_TEST(ReshapeLayerTest, TestCopyDimensions) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_reshape_layer.cpp	/^TYPED_TEST(ReshapeLayerTest, TestFlattenMiddle) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_reshape_layer.cpp	/^TYPED_TEST(ReshapeLayerTest, TestFlattenOutputSizes) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_reshape_layer.cpp	/^TYPED_TEST(ReshapeLayerTest, TestFlattenValues) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_reshape_layer.cpp	/^TYPED_TEST(ReshapeLayerTest, TestForward) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_reshape_layer.cpp	/^TYPED_TEST(ReshapeLayerTest, TestForwardAfterReshape) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_reshape_layer.cpp	/^TYPED_TEST(ReshapeLayerTest, TestGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_reshape_layer.cpp	/^TYPED_TEST(ReshapeLayerTest, TestInferenceOfUnspecified) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_reshape_layer.cpp	/^TYPED_TEST(ReshapeLayerTest, TestInferenceOfUnspecifiedWithStartAxis) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_reshape_layer.cpp	/^TYPED_TEST(ReshapeLayerTest, TestInsertSingletonAxesEnd) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_reshape_layer.cpp	/^TYPED_TEST(ReshapeLayerTest, TestInsertSingletonAxesMiddle) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_reshape_layer.cpp	/^TYPED_TEST(ReshapeLayerTest, TestInsertSingletonAxesStart) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_rnn_layer.cpp	/^TYPED_TEST(RNNLayerTest, TestForward) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_rnn_layer.cpp	/^TYPED_TEST(RNNLayerTest, TestGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_rnn_layer.cpp	/^TYPED_TEST(RNNLayerTest, TestGradientNonZeroCont) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_rnn_layer.cpp	/^TYPED_TEST(RNNLayerTest, TestGradientNonZeroContBufferSize2) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_rnn_layer.cpp	/^TYPED_TEST(RNNLayerTest, TestGradientNonZeroContBufferSize2WithStaticInput) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_rnn_layer.cpp	/^TYPED_TEST(RNNLayerTest, TestSetUp) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_scale_layer.cpp	/^TYPED_TEST(ScaleLayerTest, TestBackwardBroadcastMiddleInPlace) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_scale_layer.cpp	/^TYPED_TEST(ScaleLayerTest, TestBackwardEltwiseInPlace) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_scale_layer.cpp	/^TYPED_TEST(ScaleLayerTest, TestForwardBroadcastBegin) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_scale_layer.cpp	/^TYPED_TEST(ScaleLayerTest, TestForwardBroadcastEnd) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_scale_layer.cpp	/^TYPED_TEST(ScaleLayerTest, TestForwardBroadcastMiddle) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_scale_layer.cpp	/^TYPED_TEST(ScaleLayerTest, TestForwardBroadcastMiddleInPlace) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_scale_layer.cpp	/^TYPED_TEST(ScaleLayerTest, TestForwardBroadcastMiddleWithParam) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_scale_layer.cpp	/^TYPED_TEST(ScaleLayerTest, TestForwardBroadcastMiddleWithParamAndBias) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_scale_layer.cpp	/^TYPED_TEST(ScaleLayerTest, TestForwardEltwise) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_scale_layer.cpp	/^TYPED_TEST(ScaleLayerTest, TestForwardEltwiseInPlace) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_scale_layer.cpp	/^TYPED_TEST(ScaleLayerTest, TestForwardEltwiseWithParam) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_scale_layer.cpp	/^TYPED_TEST(ScaleLayerTest, TestForwardScale) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_scale_layer.cpp	/^TYPED_TEST(ScaleLayerTest, TestForwardScaleAxis2) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_scale_layer.cpp	/^TYPED_TEST(ScaleLayerTest, TestGradientBroadcastBegin) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_scale_layer.cpp	/^TYPED_TEST(ScaleLayerTest, TestGradientBroadcastEnd) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_scale_layer.cpp	/^TYPED_TEST(ScaleLayerTest, TestGradientBroadcastMiddle) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_scale_layer.cpp	/^TYPED_TEST(ScaleLayerTest, TestGradientBroadcastMiddleWithParam) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_scale_layer.cpp	/^TYPED_TEST(ScaleLayerTest, TestGradientEltwise) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_scale_layer.cpp	/^TYPED_TEST(ScaleLayerTest, TestGradientEltwiseWithParam) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_scale_layer.cpp	/^TYPED_TEST(ScaleLayerTest, TestGradientScale) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_scale_layer.cpp	/^TYPED_TEST(ScaleLayerTest, TestGradientScaleAndBias) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_scale_layer.cpp	/^TYPED_TEST(ScaleLayerTest, TestGradientScaleAxis2) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_sigmoid_cross_entropy_loss_layer.cpp	/^TYPED_TEST(SigmoidCrossEntropyLossLayerTest, TestGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_sigmoid_cross_entropy_loss_layer.cpp	/^TYPED_TEST(SigmoidCrossEntropyLossLayerTest, TestIgnoreGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_sigmoid_cross_entropy_loss_layer.cpp	/^TYPED_TEST(SigmoidCrossEntropyLossLayerTest, TestSigmoidCrossEntropyLoss) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_slice_layer.cpp	/^TYPED_TEST(SliceLayerTest, TestGradientAcrossChannels) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_slice_layer.cpp	/^TYPED_TEST(SliceLayerTest, TestGradientAcrossNum) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_slice_layer.cpp	/^TYPED_TEST(SliceLayerTest, TestGradientTrivial) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_slice_layer.cpp	/^TYPED_TEST(SliceLayerTest, TestSetupChannels) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_slice_layer.cpp	/^TYPED_TEST(SliceLayerTest, TestSetupNum) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_slice_layer.cpp	/^TYPED_TEST(SliceLayerTest, TestSliceAcrossChannels) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_slice_layer.cpp	/^TYPED_TEST(SliceLayerTest, TestSliceAcrossNum) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_slice_layer.cpp	/^TYPED_TEST(SliceLayerTest, TestTrivialSlice) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_softmax_layer.cpp	/^TYPED_TEST(CuDNNSoftmaxLayerTest, TestForwardCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_softmax_layer.cpp	/^TYPED_TEST(CuDNNSoftmaxLayerTest, TestGradientCuDNN) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_softmax_layer.cpp	/^TYPED_TEST(SoftmaxLayerTest, TestForward) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_softmax_layer.cpp	/^TYPED_TEST(SoftmaxLayerTest, TestGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_softmax_with_loss_layer.cpp	/^TYPED_TEST(SoftmaxWithLossLayerTest, TestForwardIgnoreLabel) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_softmax_with_loss_layer.cpp	/^TYPED_TEST(SoftmaxWithLossLayerTest, TestGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_softmax_with_loss_layer.cpp	/^TYPED_TEST(SoftmaxWithLossLayerTest, TestGradientIgnoreLabel) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_softmax_with_loss_layer.cpp	/^TYPED_TEST(SoftmaxWithLossLayerTest, TestGradientUnnormalized) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_solver.cpp	/^TYPED_TEST(SolverTest, TestInitTrainTestNets) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_solver_factory.cpp	/^TYPED_TEST(SolverFactoryTest, TestCreateSolver) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_split_layer.cpp	/^TYPED_TEST(SplitLayerTest, Test) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_split_layer.cpp	/^TYPED_TEST(SplitLayerTest, TestGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_split_layer.cpp	/^TYPED_TEST(SplitLayerTest, TestSetup) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_spp_layer.cpp	/^TYPED_TEST(SPPLayerTest, TestEqualOutputDims) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_spp_layer.cpp	/^TYPED_TEST(SPPLayerTest, TestEqualOutputDims2) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_spp_layer.cpp	/^TYPED_TEST(SPPLayerTest, TestForwardBackward) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_spp_layer.cpp	/^TYPED_TEST(SPPLayerTest, TestGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_spp_layer.cpp	/^TYPED_TEST(SPPLayerTest, TestSetup) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_stochastic_pooling.cpp	/^TYPED_TEST(CPUStochasticPoolingLayerTest, TestSetup) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_stochastic_pooling.cpp	/^TYPED_TEST(GPUStochasticPoolingLayerTest, TestGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_stochastic_pooling.cpp	/^TYPED_TEST(GPUStochasticPoolingLayerTest, TestStochastic) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_stochastic_pooling.cpp	/^TYPED_TEST(GPUStochasticPoolingLayerTest, TestStochasticTestPhase) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_tanh_layer.cpp	/^TYPED_TEST(TanHLayerTest, TestTanH) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_tanh_layer.cpp	/^TYPED_TEST(TanHLayerTest, TestTanHGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_tanh_layer.cpp	/^TYPED_TEST(TanHLayerTest, TestTanHOverflow) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_threshold_layer.cpp	/^TYPED_TEST(ThresholdLayerTest, Test) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_threshold_layer.cpp	/^TYPED_TEST(ThresholdLayerTest, Test2) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_threshold_layer.cpp	/^TYPED_TEST(ThresholdLayerTest, TestSetup) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_tile_layer.cpp	/^TYPED_TEST(TileLayerTest, TestForwardChannels) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_tile_layer.cpp	/^TYPED_TEST(TileLayerTest, TestForwardNum) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_tile_layer.cpp	/^TYPED_TEST(TileLayerTest, TestGradientChannels) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_tile_layer.cpp	/^TYPED_TEST(TileLayerTest, TestGradientNum) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_tile_layer.cpp	/^TYPED_TEST(TileLayerTest, TestSetup) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_tile_layer.cpp	/^TYPED_TEST(TileLayerTest, TestTrivialGradient) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_tile_layer.cpp	/^TYPED_TEST(TileLayerTest, TestTrivialSetup) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_util_blas.cpp	/^TYPED_TEST(GemmTest, TestGemmCPUGPU) {$/;"	f	namespace:caffe
TYPED_TEST	src/caffe/test/test_util_blas.cpp	/^TYPED_TEST(GemmTest, TestGemvCPUGPU) {$/;"	f	namespace:caffe
TYPED_TEST	src/gtest/gtest.h	/^# define TYPED_TEST(/;"	d
TYPED_TEST_CASE	src/gtest/gtest.h	/^# define TYPED_TEST_CASE(/;"	d
TYPED_TEST_CASE_P	src/gtest/gtest.h	/^# define TYPED_TEST_CASE_P(/;"	d
TYPED_TEST_P	src/gtest/gtest.h	/^# define TYPED_TEST_P(/;"	d
T_	include/caffe/layers/recurrent_layer.hpp	/^  int T_;$/;"	m	class:caffe::RecurrentLayer
Tail	src/gtest/gtest.h	/^      T14> Tail;$/;"	t	struct:testing::internal::Templates14
Tail	src/gtest/gtest.h	/^      T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> Tail;$/;"	t	struct:testing::internal::Templates27
Tail	src/gtest/gtest.h	/^      T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> Tail;$/;"	t	struct:testing::internal::Templates26
Tail	src/gtest/gtest.h	/^      T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> Tail;$/;"	t	struct:testing::internal::Templates25
Tail	src/gtest/gtest.h	/^      T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> Tail;$/;"	t	struct:testing::internal::Templates24
Tail	src/gtest/gtest.h	/^      T15, T16, T17, T18, T19, T20, T21, T22, T23> Tail;$/;"	t	struct:testing::internal::Templates23
Tail	src/gtest/gtest.h	/^      T15, T16, T17, T18, T19, T20, T21, T22> Tail;$/;"	t	struct:testing::internal::Templates22
Tail	src/gtest/gtest.h	/^      T15, T16, T17, T18, T19, T20, T21> Tail;$/;"	t	struct:testing::internal::Templates21
Tail	src/gtest/gtest.h	/^      T15, T16, T17, T18, T19, T20> Tail;$/;"	t	struct:testing::internal::Templates20
Tail	src/gtest/gtest.h	/^      T15, T16, T17, T18, T19> Tail;$/;"	t	struct:testing::internal::Templates19
Tail	src/gtest/gtest.h	/^      T15, T16, T17, T18> Tail;$/;"	t	struct:testing::internal::Templates18
Tail	src/gtest/gtest.h	/^      T15, T16, T17> Tail;$/;"	t	struct:testing::internal::Templates17
Tail	src/gtest/gtest.h	/^      T15, T16> Tail;$/;"	t	struct:testing::internal::Templates16
Tail	src/gtest/gtest.h	/^      T15> Tail;$/;"	t	struct:testing::internal::Templates15
Tail	src/gtest/gtest.h	/^      T15> Tail;$/;"	t	struct:testing::internal::Types15
Tail	src/gtest/gtest.h	/^      T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> Tail;$/;"	t	struct:testing::internal::Types28
Tail	src/gtest/gtest.h	/^      T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> Tail;$/;"	t	struct:testing::internal::Types27
Tail	src/gtest/gtest.h	/^      T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> Tail;$/;"	t	struct:testing::internal::Types26
Tail	src/gtest/gtest.h	/^      T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> Tail;$/;"	t	struct:testing::internal::Types25
Tail	src/gtest/gtest.h	/^      T16, T17, T18, T19, T20, T21, T22, T23, T24> Tail;$/;"	t	struct:testing::internal::Types24
Tail	src/gtest/gtest.h	/^      T16, T17, T18, T19, T20, T21, T22, T23> Tail;$/;"	t	struct:testing::internal::Types23
Tail	src/gtest/gtest.h	/^      T16, T17, T18, T19, T20, T21, T22> Tail;$/;"	t	struct:testing::internal::Types22
Tail	src/gtest/gtest.h	/^      T16, T17, T18, T19, T20, T21> Tail;$/;"	t	struct:testing::internal::Types21
Tail	src/gtest/gtest.h	/^      T16, T17, T18, T19, T20> Tail;$/;"	t	struct:testing::internal::Types20
Tail	src/gtest/gtest.h	/^      T16, T17, T18, T19> Tail;$/;"	t	struct:testing::internal::Types19
Tail	src/gtest/gtest.h	/^      T16, T17, T18> Tail;$/;"	t	struct:testing::internal::Types18
Tail	src/gtest/gtest.h	/^      T16, T17> Tail;$/;"	t	struct:testing::internal::Types17
Tail	src/gtest/gtest.h	/^      T16> Tail;$/;"	t	struct:testing::internal::Types16
Tail	src/gtest/gtest.h	/^      T28> Tail;$/;"	t	struct:testing::internal::Templates28
Tail	src/gtest/gtest.h	/^      T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41> Tail;$/;"	t	struct:testing::internal::Templates41
Tail	src/gtest/gtest.h	/^      T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40> Tail;$/;"	t	struct:testing::internal::Templates40
Tail	src/gtest/gtest.h	/^      T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39> Tail;$/;"	t	struct:testing::internal::Templates39
Tail	src/gtest/gtest.h	/^      T29, T30, T31, T32, T33, T34, T35, T36, T37, T38> Tail;$/;"	t	struct:testing::internal::Templates38
Tail	src/gtest/gtest.h	/^      T29, T30, T31, T32, T33, T34, T35, T36, T37> Tail;$/;"	t	struct:testing::internal::Templates37
Tail	src/gtest/gtest.h	/^      T29, T30, T31, T32, T33, T34, T35, T36> Tail;$/;"	t	struct:testing::internal::Templates36
Tail	src/gtest/gtest.h	/^      T29, T30, T31, T32, T33, T34, T35> Tail;$/;"	t	struct:testing::internal::Templates35
Tail	src/gtest/gtest.h	/^      T29, T30, T31, T32, T33, T34> Tail;$/;"	t	struct:testing::internal::Templates34
Tail	src/gtest/gtest.h	/^      T29, T30, T31, T32, T33> Tail;$/;"	t	struct:testing::internal::Templates33
Tail	src/gtest/gtest.h	/^      T29, T30, T31, T32> Tail;$/;"	t	struct:testing::internal::Templates32
Tail	src/gtest/gtest.h	/^      T29, T30, T31> Tail;$/;"	t	struct:testing::internal::Templates31
Tail	src/gtest/gtest.h	/^      T29, T30> Tail;$/;"	t	struct:testing::internal::Templates30
Tail	src/gtest/gtest.h	/^      T29> Tail;$/;"	t	struct:testing::internal::Templates29
Tail	src/gtest/gtest.h	/^      T29> Tail;$/;"	t	struct:testing::internal::Types29
Tail	src/gtest/gtest.h	/^      T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42> Tail;$/;"	t	struct:testing::internal::Types42
Tail	src/gtest/gtest.h	/^      T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41> Tail;$/;"	t	struct:testing::internal::Types41
Tail	src/gtest/gtest.h	/^      T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40> Tail;$/;"	t	struct:testing::internal::Types40
Tail	src/gtest/gtest.h	/^      T30, T31, T32, T33, T34, T35, T36, T37, T38, T39> Tail;$/;"	t	struct:testing::internal::Types39
Tail	src/gtest/gtest.h	/^      T30, T31, T32, T33, T34, T35, T36, T37, T38> Tail;$/;"	t	struct:testing::internal::Types38
Tail	src/gtest/gtest.h	/^      T30, T31, T32, T33, T34, T35, T36, T37> Tail;$/;"	t	struct:testing::internal::Types37
Tail	src/gtest/gtest.h	/^      T30, T31, T32, T33, T34, T35, T36> Tail;$/;"	t	struct:testing::internal::Types36
Tail	src/gtest/gtest.h	/^      T30, T31, T32, T33, T34, T35> Tail;$/;"	t	struct:testing::internal::Types35
Tail	src/gtest/gtest.h	/^      T30, T31, T32, T33, T34> Tail;$/;"	t	struct:testing::internal::Types34
Tail	src/gtest/gtest.h	/^      T30, T31, T32, T33> Tail;$/;"	t	struct:testing::internal::Types33
Tail	src/gtest/gtest.h	/^      T30, T31, T32> Tail;$/;"	t	struct:testing::internal::Types32
Tail	src/gtest/gtest.h	/^      T30, T31> Tail;$/;"	t	struct:testing::internal::Types31
Tail	src/gtest/gtest.h	/^      T30> Tail;$/;"	t	struct:testing::internal::Types30
Tail	src/gtest/gtest.h	/^      T42> Tail;$/;"	t	struct:testing::internal::Templates42
Tail	src/gtest/gtest.h	/^      T43, T44, T45, T46, T47, T48, T49, T50> Tail;$/;"	t	struct:testing::internal::Templates50
Tail	src/gtest/gtest.h	/^      T43, T44, T45, T46, T47, T48, T49> Tail;$/;"	t	struct:testing::internal::Templates49
Tail	src/gtest/gtest.h	/^      T43, T44, T45, T46, T47, T48> Tail;$/;"	t	struct:testing::internal::Templates48
Tail	src/gtest/gtest.h	/^      T43, T44, T45, T46, T47> Tail;$/;"	t	struct:testing::internal::Templates47
Tail	src/gtest/gtest.h	/^      T43, T44, T45, T46> Tail;$/;"	t	struct:testing::internal::Templates46
Tail	src/gtest/gtest.h	/^      T43, T44, T45> Tail;$/;"	t	struct:testing::internal::Templates45
Tail	src/gtest/gtest.h	/^      T43, T44> Tail;$/;"	t	struct:testing::internal::Templates44
Tail	src/gtest/gtest.h	/^      T43> Tail;$/;"	t	struct:testing::internal::Templates43
Tail	src/gtest/gtest.h	/^      T43> Tail;$/;"	t	struct:testing::internal::Types43
Tail	src/gtest/gtest.h	/^      T44, T45, T46, T47, T48, T49, T50> Tail;$/;"	t	struct:testing::internal::Types50
Tail	src/gtest/gtest.h	/^      T44, T45, T46, T47, T48, T49> Tail;$/;"	t	struct:testing::internal::Types49
Tail	src/gtest/gtest.h	/^      T44, T45, T46, T47, T48> Tail;$/;"	t	struct:testing::internal::Types48
Tail	src/gtest/gtest.h	/^      T44, T45, T46, T47> Tail;$/;"	t	struct:testing::internal::Types47
Tail	src/gtest/gtest.h	/^      T44, T45, T46> Tail;$/;"	t	struct:testing::internal::Types46
Tail	src/gtest/gtest.h	/^      T44, T45> Tail;$/;"	t	struct:testing::internal::Types45
Tail	src/gtest/gtest.h	/^      T44> Tail;$/;"	t	struct:testing::internal::Types44
Tail	src/gtest/gtest.h	/^  typedef Templates0 Tail;$/;"	t	struct:testing::internal::Templates1
Tail	src/gtest/gtest.h	/^  typedef Templates10<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Tail;$/;"	t	struct:testing::internal::Templates11
Tail	src/gtest/gtest.h	/^  typedef Templates11<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Tail;$/;"	t	struct:testing::internal::Templates12
Tail	src/gtest/gtest.h	/^  typedef Templates12<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Tail;$/;"	t	struct:testing::internal::Templates13
Tail	src/gtest/gtest.h	/^  typedef Templates1<T2> Tail;$/;"	t	struct:testing::internal::Templates2
Tail	src/gtest/gtest.h	/^  typedef Templates2<T2, T3> Tail;$/;"	t	struct:testing::internal::Templates3
Tail	src/gtest/gtest.h	/^  typedef Templates3<T2, T3, T4> Tail;$/;"	t	struct:testing::internal::Templates4
Tail	src/gtest/gtest.h	/^  typedef Templates4<T2, T3, T4, T5> Tail;$/;"	t	struct:testing::internal::Templates5
Tail	src/gtest/gtest.h	/^  typedef Templates5<T2, T3, T4, T5, T6> Tail;$/;"	t	struct:testing::internal::Templates6
Tail	src/gtest/gtest.h	/^  typedef Templates6<T2, T3, T4, T5, T6, T7> Tail;$/;"	t	struct:testing::internal::Templates7
Tail	src/gtest/gtest.h	/^  typedef Templates7<T2, T3, T4, T5, T6, T7, T8> Tail;$/;"	t	struct:testing::internal::Templates8
Tail	src/gtest/gtest.h	/^  typedef Templates8<T2, T3, T4, T5, T6, T7, T8, T9> Tail;$/;"	t	struct:testing::internal::Templates9
Tail	src/gtest/gtest.h	/^  typedef Templates9<T2, T3, T4, T5, T6, T7, T8, T9, T10> Tail;$/;"	t	struct:testing::internal::Templates10
Tail	src/gtest/gtest.h	/^  typedef Types0 Tail;$/;"	t	struct:testing::internal::Types1
Tail	src/gtest/gtest.h	/^  typedef Types10<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Tail;$/;"	t	struct:testing::internal::Types11
Tail	src/gtest/gtest.h	/^  typedef Types11<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Tail;$/;"	t	struct:testing::internal::Types12
Tail	src/gtest/gtest.h	/^  typedef Types12<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Tail;$/;"	t	struct:testing::internal::Types13
Tail	src/gtest/gtest.h	/^  typedef Types13<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Tail;$/;"	t	struct:testing::internal::Types14
Tail	src/gtest/gtest.h	/^  typedef Types1<T2> Tail;$/;"	t	struct:testing::internal::Types2
Tail	src/gtest/gtest.h	/^  typedef Types2<T2, T3> Tail;$/;"	t	struct:testing::internal::Types3
Tail	src/gtest/gtest.h	/^  typedef Types3<T2, T3, T4> Tail;$/;"	t	struct:testing::internal::Types4
Tail	src/gtest/gtest.h	/^  typedef Types4<T2, T3, T4, T5> Tail;$/;"	t	struct:testing::internal::Types5
Tail	src/gtest/gtest.h	/^  typedef Types5<T2, T3, T4, T5, T6> Tail;$/;"	t	struct:testing::internal::Types6
Tail	src/gtest/gtest.h	/^  typedef Types6<T2, T3, T4, T5, T6, T7> Tail;$/;"	t	struct:testing::internal::Types7
Tail	src/gtest/gtest.h	/^  typedef Types7<T2, T3, T4, T5, T6, T7, T8> Tail;$/;"	t	struct:testing::internal::Types8
Tail	src/gtest/gtest.h	/^  typedef Types8<T2, T3, T4, T5, T6, T7, T8, T9> Tail;$/;"	t	struct:testing::internal::Types9
Tail	src/gtest/gtest.h	/^  typedef Types9<T2, T3, T4, T5, T6, T7, T8, T9, T10> Tail;$/;"	t	struct:testing::internal::Types10
TanHLayer	include/caffe/layers/tanh_layer.hpp	/^  explicit TanHLayer(const LayerParameter& param)$/;"	f	class:caffe::TanHLayer
TanHLayer	include/caffe/layers/tanh_layer.hpp	/^class TanHLayer : public NeuronLayer<Dtype> {$/;"	c	namespace:caffe
TanHLayerTest	src/caffe/test/test_tanh_layer.cpp	/^  TanHLayerTest()$/;"	f	class:caffe::TanHLayerTest
TanHLayerTest	src/caffe/test/test_tanh_layer.cpp	/^class TanHLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
TearDown	src/gtest/gtest-all.cpp	/^void Test::TearDown() {$/;"	f	class:testing::Test
TearDown	src/gtest/gtest.h	/^  virtual void TearDown() {}$/;"	f	class:testing::Environment
TearDownEnvironment	src/gtest/gtest-all.cpp	/^static void TearDownEnvironment(Environment* env) { env->TearDown(); }$/;"	f	namespace:testing::internal
TearDownTestCase	src/gtest/gtest.h	/^  static void TearDownTestCase() {}$/;"	f	class:testing::Test
TearDownTestCaseFunc	src/gtest/gtest.h	/^  typedef internal::TearDownTestCaseFunc TearDownTestCaseFunc;$/;"	t	class:testing::Test
TearDownTestCaseFunc	src/gtest/gtest.h	/^typedef void (*TearDownTestCaseFunc)();$/;"	t	namespace:testing::internal
TemplateSel	src/gtest/gtest.h	/^struct TemplateSel {$/;"	s	namespace:testing::internal
Templates	src/gtest/gtest.h	/^struct Templates {$/;"	s	namespace:testing::internal
Templates	src/gtest/gtest.h	/^struct Templates<NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	src/gtest/gtest.h	/^struct Templates<T1, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	src/gtest/gtest.h	/^struct Templates<T1, T2, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	src/gtest/gtest.h	/^struct Templates<T1, T2, T3, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	src/gtest/gtest.h	/^struct Templates<T1, T2, T3, T4, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	src/gtest/gtest.h	/^struct Templates<T1, T2, T3, T4, T5, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	src/gtest/gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	src/gtest/gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	src/gtest/gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	src/gtest/gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	src/gtest/gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	src/gtest/gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	src/gtest/gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, NoneT,$/;"	s	namespace:testing::internal
Templates	src/gtest/gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, NoneT,$/;"	s	namespace:testing::internal
Templates	src/gtest/gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,$/;"	s	namespace:testing::internal
Templates0	src/gtest/gtest.h	/^struct Templates0 {};$/;"	s	namespace:testing::internal
Templates1	src/gtest/gtest.h	/^struct Templates1 {$/;"	s	namespace:testing::internal
Templates10	src/gtest/gtest.h	/^struct Templates10 {$/;"	s	namespace:testing::internal
Templates11	src/gtest/gtest.h	/^struct Templates11 {$/;"	s	namespace:testing::internal
Templates12	src/gtest/gtest.h	/^struct Templates12 {$/;"	s	namespace:testing::internal
Templates13	src/gtest/gtest.h	/^struct Templates13 {$/;"	s	namespace:testing::internal
Templates14	src/gtest/gtest.h	/^struct Templates14 {$/;"	s	namespace:testing::internal
Templates15	src/gtest/gtest.h	/^struct Templates15 {$/;"	s	namespace:testing::internal
Templates16	src/gtest/gtest.h	/^struct Templates16 {$/;"	s	namespace:testing::internal
Templates17	src/gtest/gtest.h	/^struct Templates17 {$/;"	s	namespace:testing::internal
Templates18	src/gtest/gtest.h	/^struct Templates18 {$/;"	s	namespace:testing::internal
Templates19	src/gtest/gtest.h	/^struct Templates19 {$/;"	s	namespace:testing::internal
Templates2	src/gtest/gtest.h	/^struct Templates2 {$/;"	s	namespace:testing::internal
Templates20	src/gtest/gtest.h	/^struct Templates20 {$/;"	s	namespace:testing::internal
Templates21	src/gtest/gtest.h	/^struct Templates21 {$/;"	s	namespace:testing::internal
Templates22	src/gtest/gtest.h	/^struct Templates22 {$/;"	s	namespace:testing::internal
Templates23	src/gtest/gtest.h	/^struct Templates23 {$/;"	s	namespace:testing::internal
Templates24	src/gtest/gtest.h	/^struct Templates24 {$/;"	s	namespace:testing::internal
Templates25	src/gtest/gtest.h	/^struct Templates25 {$/;"	s	namespace:testing::internal
Templates26	src/gtest/gtest.h	/^struct Templates26 {$/;"	s	namespace:testing::internal
Templates27	src/gtest/gtest.h	/^struct Templates27 {$/;"	s	namespace:testing::internal
Templates28	src/gtest/gtest.h	/^struct Templates28 {$/;"	s	namespace:testing::internal
Templates29	src/gtest/gtest.h	/^struct Templates29 {$/;"	s	namespace:testing::internal
Templates3	src/gtest/gtest.h	/^struct Templates3 {$/;"	s	namespace:testing::internal
Templates30	src/gtest/gtest.h	/^struct Templates30 {$/;"	s	namespace:testing::internal
Templates31	src/gtest/gtest.h	/^struct Templates31 {$/;"	s	namespace:testing::internal
Templates32	src/gtest/gtest.h	/^struct Templates32 {$/;"	s	namespace:testing::internal
Templates33	src/gtest/gtest.h	/^struct Templates33 {$/;"	s	namespace:testing::internal
Templates34	src/gtest/gtest.h	/^struct Templates34 {$/;"	s	namespace:testing::internal
Templates35	src/gtest/gtest.h	/^struct Templates35 {$/;"	s	namespace:testing::internal
Templates36	src/gtest/gtest.h	/^struct Templates36 {$/;"	s	namespace:testing::internal
Templates37	src/gtest/gtest.h	/^struct Templates37 {$/;"	s	namespace:testing::internal
Templates38	src/gtest/gtest.h	/^struct Templates38 {$/;"	s	namespace:testing::internal
Templates39	src/gtest/gtest.h	/^struct Templates39 {$/;"	s	namespace:testing::internal
Templates4	src/gtest/gtest.h	/^struct Templates4 {$/;"	s	namespace:testing::internal
Templates40	src/gtest/gtest.h	/^struct Templates40 {$/;"	s	namespace:testing::internal
Templates41	src/gtest/gtest.h	/^struct Templates41 {$/;"	s	namespace:testing::internal
Templates42	src/gtest/gtest.h	/^struct Templates42 {$/;"	s	namespace:testing::internal
Templates43	src/gtest/gtest.h	/^struct Templates43 {$/;"	s	namespace:testing::internal
Templates44	src/gtest/gtest.h	/^struct Templates44 {$/;"	s	namespace:testing::internal
Templates45	src/gtest/gtest.h	/^struct Templates45 {$/;"	s	namespace:testing::internal
Templates46	src/gtest/gtest.h	/^struct Templates46 {$/;"	s	namespace:testing::internal
Templates47	src/gtest/gtest.h	/^struct Templates47 {$/;"	s	namespace:testing::internal
Templates48	src/gtest/gtest.h	/^struct Templates48 {$/;"	s	namespace:testing::internal
Templates49	src/gtest/gtest.h	/^struct Templates49 {$/;"	s	namespace:testing::internal
Templates5	src/gtest/gtest.h	/^struct Templates5 {$/;"	s	namespace:testing::internal
Templates50	src/gtest/gtest.h	/^struct Templates50 {$/;"	s	namespace:testing::internal
Templates6	src/gtest/gtest.h	/^struct Templates6 {$/;"	s	namespace:testing::internal
Templates7	src/gtest/gtest.h	/^struct Templates7 {$/;"	s	namespace:testing::internal
Templates8	src/gtest/gtest.h	/^struct Templates8 {$/;"	s	namespace:testing::internal
Templates9	src/gtest/gtest.h	/^struct Templates9 {$/;"	s	namespace:testing::internal
TersePrintPrefixToStrings	src/gtest/gtest.h	/^  static void TersePrintPrefixToStrings(const Tuple& t, Strings* strings) {$/;"	f	struct:testing::internal::TuplePrefixPrinter
TersePrintPrefixToStrings	src/gtest/gtest.h	/^  static void TersePrintPrefixToStrings(const Tuple&, Strings*) {}$/;"	f	struct:testing::internal::TuplePrefixPrinter
Test	src/caffe/solver.cpp	/^void Solver<Dtype>::Test(const int test_net_id) {$/;"	f	class:caffe::Solver
Test	src/gtest/gtest-all.cpp	/^Test::Test()$/;"	f	class:testing::Test
Test	src/gtest/gtest.h	/^class GTEST_API_ Test {$/;"	c	namespace:testing
TestAll	src/caffe/solver.cpp	/^void Solver<Dtype>::TestAll() {$/;"	f	class:caffe::Solver
TestAllInOne	python/caffe/test/test_net.py	/^class TestAllInOne(unittest.TestCase):$/;"	c
TestArrayToDatum	python/caffe/test/test_io.py	/^class TestArrayToDatum(unittest.TestCase):$/;"	c
TestBackward	src/caffe/test/test_power_layer.cpp	/^  void TestBackward(Dtype power, Dtype scale, Dtype shift) {$/;"	f	class:caffe::PowerLayerTest
TestBackward	src/caffe/test/test_tanh_layer.cpp	/^  void TestBackward(Dtype filler_std) {$/;"	f	class:caffe::TanHLayerTest
TestBlobProtoToArray	python/caffe/test/test_io.py	/^class TestBlobProtoToArray(unittest.TestCase):$/;"	c
TestCase	src/gtest/gtest-all.cpp	/^TestCase::TestCase(const char* a_name, const char* a_type_param,$/;"	f	class:testing::TestCase
TestCase	src/gtest/gtest.h	/^class GTEST_API_ TestCase {$/;"	c	namespace:testing
TestCaseFailed	src/gtest/gtest-all.cpp	/^static bool TestCaseFailed(const TestCase* test_case) {$/;"	f	namespace:testing::internal
TestCaseInfoContainer	src/gtest/gtest.h	/^  typedef ::std::vector<ParameterizedTestCaseInfoBase*> TestCaseInfoContainer;$/;"	t	class:testing::internal::ParameterizedTestCaseRegistry
TestCaseNameIs	src/gtest/gtest-all.cpp	/^  explicit TestCaseNameIs(const String& name)$/;"	f	class:testing::internal::TestCaseNameIs
TestCaseNameIs	src/gtest/gtest-all.cpp	/^class TestCaseNameIs {$/;"	c	namespace:testing::internal	file:
TestCasePassed	src/gtest/gtest-all.cpp	/^static bool TestCasePassed(const TestCase* test_case) {$/;"	f	namespace:testing::internal
TestCoordMap	python/caffe/test/test_coord_map.py	/^class TestCoordMap(unittest.TestCase):$/;"	c
TestDisabled	src/gtest/gtest.h	/^  static bool TestDisabled(const TestInfo* test_info) {$/;"	f	class:testing::TestCase
TestDraw	python/caffe/test/test_draw.py	/^class TestDraw(unittest.TestCase):$/;"	c
TestDropoutForward	src/caffe/test/test_neuron_layer.cpp	/^  void TestDropoutForward(const float dropout_ratio) {$/;"	f	class:caffe::NeuronLayerTest
TestDtypes	include/caffe/test/test_caffe_main.hpp	/^typedef ::testing::Types<float, double> TestDtypes;$/;"	t	namespace:caffe
TestDtypesAndDevices	include/caffe/test/test_caffe_main.hpp	/^                         CPUDevice<double> > TestDtypesAndDevices;$/;"	t	namespace:caffe
TestDtypesAndDevices	include/caffe/test/test_caffe_main.hpp	/^                         TestDtypesAndDevices;$/;"	t	namespace:caffe
TestEventListener	src/gtest/gtest.h	/^class TestEventListener {$/;"	c	namespace:testing
TestEventListeners	src/gtest/gtest-all.cpp	/^TestEventListeners::TestEventListeners()$/;"	f	class:testing::TestEventListeners
TestEventListeners	src/gtest/gtest.h	/^class GTEST_API_ TestEventListeners {$/;"	c	namespace:testing
TestEventRepeater	src/gtest/gtest-all.cpp	/^  TestEventRepeater() : forwarding_enabled_(true) {}$/;"	f	class:testing::internal::TestEventRepeater
TestEventRepeater	src/gtest/gtest-all.cpp	/^class TestEventRepeater : public TestEventListener {$/;"	c	namespace:testing::internal	file:
TestExpForward	src/caffe/test/test_neuron_layer.cpp	/^  void TestExpForward(const float base, const float scale, const float shift) {$/;"	f	class:caffe::NeuronLayerTest
TestExpGradient	src/caffe/test/test_neuron_layer.cpp	/^  void TestExpGradient(const float base, const float scale, const float shift) {$/;"	f	class:caffe::NeuronLayerTest
TestFactoryBase	src/gtest/gtest.h	/^  TestFactoryBase() {}$/;"	f	class:testing::internal::TestFactoryBase
TestFactoryBase	src/gtest/gtest.h	/^class TestFactoryBase {$/;"	c	namespace:testing::internal
TestFactoryImpl	src/gtest/gtest.h	/^class TestFactoryImpl : public TestFactoryBase {$/;"	c	namespace:testing::internal
TestFailed	src/gtest/gtest.h	/^  static bool TestFailed(const TestInfo* test_info) {$/;"	f	class:testing::TestCase
TestForward	src/caffe/test/test_batch_reindex_layer.cpp	/^  void TestForward() {$/;"	f	class:caffe::BatchReindexLayerTest
TestForward	src/caffe/test/test_euclidean_loss_layer.cpp	/^  void TestForward() {$/;"	f	class:caffe::EuclideanLossLayerTest
TestForward	src/caffe/test/test_power_layer.cpp	/^  void TestForward(Dtype power, Dtype scale, Dtype shift) {$/;"	f	class:caffe::PowerLayerTest
TestForward	src/caffe/test/test_reduction_layer.cpp	/^  void TestForward(ReductionParameter_ReductionOp op,$/;"	f	class:caffe::ReductionLayerTest
TestForward	src/caffe/test/test_sigmoid_cross_entropy_loss_layer.cpp	/^  void TestForward() {$/;"	f	class:caffe::SigmoidCrossEntropyLossLayerTest
TestForward	src/caffe/test/test_tanh_layer.cpp	/^  void TestForward(Dtype filler_std) {$/;"	f	class:caffe::TanHLayerTest
TestForwardRectHigh	src/caffe/test/test_pooling_layer.cpp	/^  void TestForwardRectHigh() {$/;"	f	class:caffe::CuDNNPoolingLayerTest
TestForwardRectHigh	src/caffe/test/test_pooling_layer.cpp	/^  void TestForwardRectHigh() {$/;"	f	class:caffe::PoolingLayerTest
TestForwardRectWide	src/caffe/test/test_pooling_layer.cpp	/^  void TestForwardRectWide() {$/;"	f	class:caffe::CuDNNPoolingLayerTest
TestForwardRectWide	src/caffe/test/test_pooling_layer.cpp	/^  void TestForwardRectWide() {$/;"	f	class:caffe::PoolingLayerTest
TestForwardSquare	src/caffe/test/test_pooling_layer.cpp	/^  void TestForwardSquare() {$/;"	f	class:caffe::CuDNNPoolingLayerTest
TestForwardSquare	src/caffe/test/test_pooling_layer.cpp	/^  void TestForwardSquare() {$/;"	f	class:caffe::PoolingLayerTest
TestGradient	src/caffe/test/test_reduction_layer.cpp	/^  void TestGradient(ReductionParameter_ReductionOp op,$/;"	f	class:caffe::ReductionLayerTest
TestInfo	src/gtest/gtest-all.cpp	/^TestInfo::TestInfo(const char* a_test_case_name,$/;"	f	class:testing::TestInfo
TestInfo	src/gtest/gtest.h	/^    TestInfo(const char* a_test_case_base_name,$/;"	f	struct:testing::internal::ParameterizedTestCaseInfo::TestInfo
TestInfo	src/gtest/gtest.h	/^  struct TestInfo {$/;"	s	class:testing::internal::ParameterizedTestCaseInfo
TestInfo	src/gtest/gtest.h	/^class GTEST_API_ TestInfo {$/;"	c	namespace:testing
TestInfoContainer	src/gtest/gtest.h	/^  typedef ::std::vector<linked_ptr<TestInfo> > TestInfoContainer;$/;"	t	class:testing::internal::ParameterizedTestCaseInfo
TestLayerTypeList	python/caffe/test/test_layer_type_list.py	/^class TestLayerTypeList(unittest.TestCase):$/;"	c
TestLayerWithParam	python/caffe/test/test_python_layer_with_param_str.py	/^class TestLayerWithParam(unittest.TestCase):$/;"	c
TestLeastSquaresUpdate	src/caffe/test/test_gradient_based_solver.cpp	/^  void TestLeastSquaresUpdate(const Dtype learning_rate = 1.0,$/;"	f	class:caffe::GradientBasedSolverTest
TestLevels	python/caffe/test/test_net.py	/^class TestLevels(unittest.TestCase):$/;"	c
TestLogForward	src/caffe/test/test_neuron_layer.cpp	/^  void TestLogForward(const float base, const float scale, const float shift) {$/;"	f	class:caffe::NeuronLayerTest
TestLogGradient	src/caffe/test/test_neuron_layer.cpp	/^  void TestLogGradient(const float base, const float scale, const float shift) {$/;"	f	class:caffe::NeuronLayerTest
TestMetaFactory	src/gtest/gtest.h	/^  TestMetaFactory() {}$/;"	f	class:testing::internal::TestMetaFactory
TestMetaFactory	src/gtest/gtest.h	/^class TestMetaFactory$/;"	c	namespace:testing::internal
TestMetaFactoryBase	src/gtest/gtest.h	/^class TestMetaFactoryBase {$/;"	c	namespace:testing::internal
TestNCCL	python/caffe/test/test_nccl.py	/^class TestNCCL(unittest.TestCase):$/;"	c
TestNameIs	src/gtest/gtest-all.cpp	/^  explicit TestNameIs(const char* name)$/;"	f	class:testing::__anon4::TestNameIs
TestNameIs	src/gtest/gtest-all.cpp	/^class TestNameIs {$/;"	c	namespace:testing::__anon4	file:
TestNet	python/caffe/test/test_net.py	/^class TestNet(unittest.TestCase):$/;"	c
TestNetSpec	python/caffe/test/test_net_spec.py	/^class TestNetSpec(unittest.TestCase):$/;"	c
TestPReLU	src/caffe/test/test_neuron_layer.cpp	/^  void TestPReLU(PReLULayer<Dtype> *layer) {$/;"	f	class:caffe::NeuronLayerTest
TestPartFatallyFailed	src/gtest/gtest-all.cpp	/^static bool TestPartFatallyFailed(const TestPartResult& result) {$/;"	f	namespace:testing
TestPartNonfatallyFailed	src/gtest/gtest-all.cpp	/^static bool TestPartNonfatallyFailed(const TestPartResult& result) {$/;"	f	namespace:testing
TestPartResult	src/gtest/gtest.h	/^  TestPartResult(Type a_type,$/;"	f	class:testing::TestPartResult
TestPartResult	src/gtest/gtest.h	/^class GTEST_API_ TestPartResult {$/;"	c	namespace:testing
TestPartResultArray	src/gtest/gtest.h	/^  TestPartResultArray() {}$/;"	f	class:testing::TestPartResultArray
TestPartResultArray	src/gtest/gtest.h	/^class GTEST_API_ TestPartResultArray {$/;"	c	namespace:testing
TestPartResultReporterInterface	src/gtest/gtest.h	/^class TestPartResultReporterInterface {$/;"	c	namespace:testing
TestPartResultTypeToString	src/gtest/gtest-all.cpp	/^static const char * TestPartResultTypeToString(TestPartResult::Type type) {$/;"	f	namespace:testing
TestPassed	src/gtest/gtest.h	/^  static bool TestPassed(const TestInfo* test_info) {$/;"	f	class:testing::TestCase
TestPropertiesAsXmlAttributes	src/gtest/gtest-all.cpp	/^String XmlUnitTestResultPrinter::TestPropertiesAsXmlAttributes($/;"	f	class:testing::internal::XmlUnitTestResultPrinter
TestProperty	src/gtest/gtest.h	/^  TestProperty(const char* a_key, const char* a_value) :$/;"	f	class:testing::TestProperty
TestProperty	src/gtest/gtest.h	/^class TestProperty {$/;"	c	namespace:testing
TestPropertyKeyIs	src/gtest/gtest-all.cpp	/^  explicit TestPropertyKeyIs(const char* key)$/;"	f	class:testing::internal::TestPropertyKeyIs
TestPropertyKeyIs	src/gtest/gtest-all.cpp	/^class TestPropertyKeyIs {$/;"	c	namespace:testing::internal	file:
TestPythonLayer	python/caffe/test/test_python_layer.py	/^class TestPythonLayer(unittest.TestCase):$/;"	c
TestRead	src/caffe/test/test_data_layer.cpp	/^  void TestRead() {$/;"	f	class:caffe::DataLayerTest
TestReadCrop	src/caffe/test/test_data_layer.cpp	/^  void TestReadCrop(Phase phase) {$/;"	f	class:caffe::DataLayerTest
TestReadCropTrainSequenceSeeded	src/caffe/test/test_data_layer.cpp	/^  void TestReadCropTrainSequenceSeeded() {$/;"	f	class:caffe::DataLayerTest
TestReadCropTrainSequenceUnseeded	src/caffe/test/test_data_layer.cpp	/^  void TestReadCropTrainSequenceUnseeded() {$/;"	f	class:caffe::DataLayerTest
TestReshape	src/caffe/test/test_data_layer.cpp	/^  void TestReshape(DataParameter_DB backend) {$/;"	f	class:caffe::DataLayerTest
TestResult	src/gtest/gtest-all.cpp	/^TestResult::TestResult()$/;"	f	class:testing::TestResult
TestResult	src/gtest/gtest.h	/^class GTEST_API_ TestResult {$/;"	c	namespace:testing
TestResultAccessor	src/gtest/gtest-all.cpp	/^class TestResultAccessor {$/;"	c	namespace:testing::internal	file:
TestRole	src/gtest/gtest.h	/^  enum TestRole { OVERSEE_TEST, EXECUTE_TEST };$/;"	g	class:testing::internal::DeathTest
TestSkip	src/caffe/test/test_data_layer.cpp	/^  void TestSkip() {$/;"	f	class:caffe::DataLayerTest
TestSnapshot	src/caffe/test/test_gradient_based_solver.cpp	/^  void TestSnapshot(const Dtype learning_rate = 1.0,$/;"	f	class:caffe::GradientBasedSolverTest
TestSolver	python/caffe/test/test_solver.py	/^class TestSolver(unittest.TestCase):$/;"	c
TestStages	python/caffe/test/test_net.py	/^class TestStages(unittest.TestCase):$/;"	c
TestThreadA	src/caffe/test/test_internal_thread.cpp	/^class TestThreadA : public InternalThread {$/;"	c	namespace:caffe	file:
TestThreadB	src/caffe/test/test_internal_thread.cpp	/^class TestThreadB : public InternalThread {$/;"	c	namespace:caffe	file:
TestTypes	src/caffe/test/test_db.cpp	/^typedef ::testing::Types<TypeLevelDB, TypeLMDB> TestTypes;$/;"	t	namespace:caffe	file:
TestWithParam	src/gtest/gtest.h	/^class TestWithParam : public Test, public WithParamInterface<T> {$/;"	c	namespace:testing
Thread	examples/pycaffe/layers/pascal_multilabel_datalayers.py	/^from threading import Thread$/;"	i
ThreadFuncWithCLinkage	src/gtest/gtest.h	/^extern "C" inline void* ThreadFuncWithCLinkage(void* thread) {$/;"	f	namespace:std::tr1
ThreadLocal	src/gtest/gtest.h	/^  ThreadLocal() : key_(CreateKey()),$/;"	f	class:std::tr1::ThreadLocal
ThreadLocal	src/gtest/gtest.h	/^  ThreadLocal() : value_() {}$/;"	f	class:std::tr1::ThreadLocal
ThreadLocal	src/gtest/gtest.h	/^  explicit ThreadLocal(const T& value) : key_(CreateKey()),$/;"	f	class:std::tr1::ThreadLocal
ThreadLocal	src/gtest/gtest.h	/^  explicit ThreadLocal(const T& value) : value_(value) {}$/;"	f	class:std::tr1::ThreadLocal
ThreadLocal	src/gtest/gtest.h	/^class ThreadLocal {$/;"	c	namespace:std::tr1
ThreadLocalValueHolderBase	src/gtest/gtest.h	/^class ThreadLocalValueHolderBase {$/;"	c	namespace:std::tr1
ThreadWithParam	src/gtest/gtest.h	/^  ThreadWithParam($/;"	f	class:std::tr1::ThreadWithParam
ThreadWithParam	src/gtest/gtest.h	/^class ThreadWithParam : public ThreadWithParamBase {$/;"	c	namespace:std::tr1
ThreadWithParamBase	src/gtest/gtest.h	/^class ThreadWithParamBase {$/;"	c	namespace:std::tr1
ThresholdLayer	include/caffe/layers/threshold_layer.hpp	/^  explicit ThresholdLayer(const LayerParameter& param)$/;"	f	class:caffe::ThresholdLayer
ThresholdLayer	include/caffe/layers/threshold_layer.hpp	/^class ThresholdLayer : public NeuronLayer<Dtype> {$/;"	c	namespace:caffe
ThresholdLayerTest	src/caffe/test/test_threshold_layer.cpp	/^  ThresholdLayerTest()$/;"	f	class:caffe::ThresholdLayerTest
ThresholdLayerTest	src/caffe/test/test_threshold_layer.cpp	/^class ThresholdLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
TileLayer	include/caffe/layers/tile_layer.hpp	/^  explicit TileLayer(const LayerParameter& param)$/;"	f	class:caffe::TileLayer
TileLayer	include/caffe/layers/tile_layer.hpp	/^class TileLayer : public Layer<Dtype> {$/;"	c	namespace:caffe
TileLayerTest	src/caffe/test/test_tile_layer.cpp	/^  TileLayerTest()$/;"	f	class:caffe::TileLayerTest
TileLayerTest	src/caffe/test/test_tile_layer.cpp	/^class TileLayerTest : public MultiDeviceTest<TypeParam> {$/;"	c	namespace:caffe	file:
TimeInMillis	src/gtest/gtest.h	/^typedef TypeWithSize<8>::Int TimeInMillis;  \/\/ Represents time in milliseconds.$/;"	t	namespace:std::tr1
TimeInMillis	src/gtest/gtest.h	/^typedef internal::TimeInMillis TimeInMillis;$/;"	t	namespace:testing
Timer	include/caffe/util/benchmark.hpp	/^class Timer {$/;"	c	namespace:caffe
Timer	python/caffe/__init__.py	/^from .pycaffe import Net, SGDSolver, NesterovSolver, AdaGradSolver, RMSPropSolver, AdaDeltaSolver, AdamSolver, NCCL, Timer$/;"	i
Timer	python/caffe/pycaffe.py	/^        RMSPropSolver, AdaDeltaSolver, AdamSolver, NCCL, Timer$/;"	i
Timer	src/caffe/util/benchmark.cpp	/^Timer::Timer()$/;"	f	class:caffe::Timer
ToHDF5	src/caffe/net.cpp	/^void Net<Dtype>::ToHDF5(const string& filename, bool write_diff) const {$/;"	f	class:caffe::Net
ToLower	src/gtest/gtest.h	/^inline char ToLower(char ch) {$/;"	f	namespace:std::tr1
ToProto	include/caffe/layer.hpp	/^void Layer<Dtype>::ToProto(LayerParameter* param, bool write_diff) {$/;"	f	class:caffe::Layer
ToProto	src/caffe/blob.cpp	/^void Blob<double>::ToProto(BlobProto* proto, bool write_diff) const {$/;"	f	class:caffe::Blob
ToProto	src/caffe/blob.cpp	/^void Blob<float>::ToProto(BlobProto* proto, bool write_diff) const {$/;"	f	class:caffe::Blob
ToProto	src/caffe/net.cpp	/^void Net<Dtype>::ToProto(NetParameter* param, bool write_diff) const {$/;"	f	class:caffe::Net
ToString	src/gtest/gtest.h	/^  String ToString() const { return pathname_; }$/;"	f	class:testing::internal::FilePath
ToUpper	src/gtest/gtest.h	/^inline char ToUpper(char ch) {$/;"	f	namespace:std::tr1
Top	python/caffe/net_spec.py	/^class Top(object):$/;"	c
TraceInfo	src/gtest/gtest-all.cpp	/^struct TraceInfo {$/;"	s	namespace:testing::internal	file:
Transaction	include/caffe/util/db.hpp	/^  Transaction() { }$/;"	f	class:caffe::db::Transaction
Transaction	include/caffe/util/db.hpp	/^class Transaction {$/;"	c	namespace:caffe::db
Transform	src/caffe/data_transformer.cpp	/^void DataTransformer<Dtype>::Transform(Blob<Dtype>* input_blob,$/;"	f	class:caffe::DataTransformer
Transform	src/caffe/data_transformer.cpp	/^void DataTransformer<Dtype>::Transform(const Datum& datum,$/;"	f	class:caffe::DataTransformer
Transform	src/caffe/data_transformer.cpp	/^void DataTransformer<Dtype>::Transform(const cv::Mat& cv_img,$/;"	f	class:caffe::DataTransformer
Transform	src/caffe/data_transformer.cpp	/^void DataTransformer<Dtype>::Transform(const vector<Datum> & datum_vector,$/;"	f	class:caffe::DataTransformer
Transform	src/caffe/data_transformer.cpp	/^void DataTransformer<Dtype>::Transform(const vector<cv::Mat> & mat_vector,$/;"	f	class:caffe::DataTransformer
Transformer	python/caffe/io.py	/^class Transformer:$/;"	c
TupleElement	src/gtest/gtest.h	/^struct TupleElement<true, 0, GTEST_10_TUPLE_(T)> { typedef T0 type; };$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	src/gtest/gtest.h	/^struct TupleElement<true, 1, GTEST_10_TUPLE_(T)> { typedef T1 type; };$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	src/gtest/gtest.h	/^struct TupleElement<true, 2, GTEST_10_TUPLE_(T)> { typedef T2 type; };$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	src/gtest/gtest.h	/^struct TupleElement<true, 3, GTEST_10_TUPLE_(T)> { typedef T3 type; };$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	src/gtest/gtest.h	/^struct TupleElement<true, 4, GTEST_10_TUPLE_(T)> { typedef T4 type; };$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	src/gtest/gtest.h	/^struct TupleElement<true, 5, GTEST_10_TUPLE_(T)> { typedef T5 type; };$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	src/gtest/gtest.h	/^struct TupleElement<true, 6, GTEST_10_TUPLE_(T)> { typedef T6 type; };$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	src/gtest/gtest.h	/^struct TupleElement<true, 7, GTEST_10_TUPLE_(T)> { typedef T7 type; };$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	src/gtest/gtest.h	/^struct TupleElement<true, 8, GTEST_10_TUPLE_(T)> { typedef T8 type; };$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	src/gtest/gtest.h	/^struct TupleElement<true, 9, GTEST_10_TUPLE_(T)> { typedef T9 type; };$/;"	s	namespace:std::tr1::gtest_internal
TuplePrefixPrinter	src/gtest/gtest.h	/^struct TuplePrefixPrinter {$/;"	s	namespace:testing::internal
TuplePrefixPrinter	src/gtest/gtest.h	/^struct TuplePrefixPrinter<0> {$/;"	s	namespace:testing::internal
TuplePrefixPrinter	src/gtest/gtest.h	/^struct TuplePrefixPrinter<1> {$/;"	s	namespace:testing::internal
Type	src/gtest/gtest.h	/^  enum Type {$/;"	g	class:testing::TestPartResult
TypeId	src/gtest/gtest.h	/^typedef const void* TypeId;$/;"	t	namespace:testing::internal
TypeIdHelper	src/gtest/gtest.h	/^class TypeIdHelper {$/;"	c	namespace:testing::internal
TypeKind	src/gtest/gtest.h	/^enum TypeKind {$/;"	g	namespace:testing::internal2
TypeLMDB	src/caffe/test/test_db.cpp	/^struct TypeLMDB {$/;"	s	namespace:caffe	file:
TypeLevelDB	src/caffe/test/test_db.cpp	/^struct TypeLevelDB {$/;"	s	namespace:caffe	file:
TypeList	src/gtest/gtest.h	/^struct TypeList { typedef Types1<T> type; };$/;"	s	namespace:testing::internal
TypeList	src/gtest/gtest.h	/^struct TypeList<Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,$/;"	s	namespace:testing::internal
TypeParameterizedTest	src/gtest/gtest.h	/^class TypeParameterizedTest {$/;"	c	namespace:testing::internal
TypeParameterizedTest	src/gtest/gtest.h	/^class TypeParameterizedTest<Fixture, TestSel, Types0> {$/;"	c	namespace:testing::internal
TypeParameterizedTestCase	src/gtest/gtest.h	/^class TypeParameterizedTestCase {$/;"	c	namespace:testing::internal
TypeParameterizedTestCase	src/gtest/gtest.h	/^class TypeParameterizedTestCase<Fixture, Templates0, Types> {$/;"	c	namespace:testing::internal
TypeWithSize	src/gtest/gtest.h	/^class TypeWithSize {$/;"	c	namespace:std::tr1
TypeWithSize	src/gtest/gtest.h	/^class TypeWithSize<4> {$/;"	c	namespace:std::tr1
TypeWithSize	src/gtest/gtest.h	/^class TypeWithSize<8> {$/;"	c	namespace:std::tr1
TypeWithoutFormatter	src/gtest/gtest.h	/^class TypeWithoutFormatter {$/;"	c	namespace:testing::internal2
TypeWithoutFormatter	src/gtest/gtest.h	/^class TypeWithoutFormatter<T, kConvertibleToInteger> {$/;"	c	namespace:testing::internal2
TypeWithoutFormatter	src/gtest/gtest.h	/^class TypeWithoutFormatter<T, kProtobuf> {$/;"	c	namespace:testing::internal2
TypedTestCasePState	src/gtest/gtest.h	/^  TypedTestCasePState() : registered_(false) {}$/;"	f	class:testing::internal::TypedTestCasePState
TypedTestCasePState	src/gtest/gtest.h	/^class GTEST_API_ TypedTestCasePState {$/;"	c	namespace:testing::internal
Types	src/gtest/gtest.h	/^struct Types {$/;"	s	namespace:testing
Types	src/gtest/gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,$/;"	s	namespace:testing
Types	src/gtest/gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,$/;"	s	namespace:testing
Types	src/gtest/gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,$/;"	s	namespace:testing
Types	src/gtest/gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, internal::None,$/;"	s	namespace:testing
Types	src/gtest/gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, internal::None,$/;"	s	namespace:testing
Types	src/gtest/gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, internal::None,$/;"	s	namespace:testing
Types	src/gtest/gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, internal::None,$/;"	s	namespace:testing
Types	src/gtest/gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, internal::None, internal::None,$/;"	s	namespace:testing
Types	src/gtest/gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, internal::None, internal::None,$/;"	s	namespace:testing
Types	src/gtest/gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, internal::None, internal::None,$/;"	s	namespace:testing
Types	src/gtest/gtest.h	/^struct Types<T1, T2, T3, T4, T5, internal::None, internal::None,$/;"	s	namespace:testing
Types	src/gtest/gtest.h	/^struct Types<T1, T2, T3, T4, internal::None, internal::None, internal::None,$/;"	s	namespace:testing
Types	src/gtest/gtest.h	/^struct Types<T1, T2, T3, internal::None, internal::None, internal::None,$/;"	s	namespace:testing
Types	src/gtest/gtest.h	/^struct Types<T1, T2, internal::None, internal::None, internal::None,$/;"	s	namespace:testing
Types	src/gtest/gtest.h	/^struct Types<T1, internal::None, internal::None, internal::None,$/;"	s	namespace:testing
Types	src/gtest/gtest.h	/^struct Types<internal::None, internal::None, internal::None, internal::None,$/;"	s	namespace:testing
Types0	src/gtest/gtest.h	/^struct Types0 {};$/;"	s	namespace:testing::internal
Types1	src/gtest/gtest.h	/^struct Types1 {$/;"	s	namespace:testing::internal
Types10	src/gtest/gtest.h	/^struct Types10 {$/;"	s	namespace:testing::internal
Types11	src/gtest/gtest.h	/^struct Types11 {$/;"	s	namespace:testing::internal
Types12	src/gtest/gtest.h	/^struct Types12 {$/;"	s	namespace:testing::internal
Types13	src/gtest/gtest.h	/^struct Types13 {$/;"	s	namespace:testing::internal
Types14	src/gtest/gtest.h	/^struct Types14 {$/;"	s	namespace:testing::internal
Types15	src/gtest/gtest.h	/^struct Types15 {$/;"	s	namespace:testing::internal
Types16	src/gtest/gtest.h	/^struct Types16 {$/;"	s	namespace:testing::internal
Types17	src/gtest/gtest.h	/^struct Types17 {$/;"	s	namespace:testing::internal
Types18	src/gtest/gtest.h	/^struct Types18 {$/;"	s	namespace:testing::internal
Types19	src/gtest/gtest.h	/^struct Types19 {$/;"	s	namespace:testing::internal
Types2	src/gtest/gtest.h	/^struct Types2 {$/;"	s	namespace:testing::internal
Types20	src/gtest/gtest.h	/^struct Types20 {$/;"	s	namespace:testing::internal
Types21	src/gtest/gtest.h	/^struct Types21 {$/;"	s	namespace:testing::internal
Types22	src/gtest/gtest.h	/^struct Types22 {$/;"	s	namespace:testing::internal
Types23	src/gtest/gtest.h	/^struct Types23 {$/;"	s	namespace:testing::internal
Types24	src/gtest/gtest.h	/^struct Types24 {$/;"	s	namespace:testing::internal
Types25	src/gtest/gtest.h	/^struct Types25 {$/;"	s	namespace:testing::internal
Types26	src/gtest/gtest.h	/^struct Types26 {$/;"	s	namespace:testing::internal
Types27	src/gtest/gtest.h	/^struct Types27 {$/;"	s	namespace:testing::internal
Types28	src/gtest/gtest.h	/^struct Types28 {$/;"	s	namespace:testing::internal
Types29	src/gtest/gtest.h	/^struct Types29 {$/;"	s	namespace:testing::internal
Types3	src/gtest/gtest.h	/^struct Types3 {$/;"	s	namespace:testing::internal
Types30	src/gtest/gtest.h	/^struct Types30 {$/;"	s	namespace:testing::internal
Types31	src/gtest/gtest.h	/^struct Types31 {$/;"	s	namespace:testing::internal
Types32	src/gtest/gtest.h	/^struct Types32 {$/;"	s	namespace:testing::internal
Types33	src/gtest/gtest.h	/^struct Types33 {$/;"	s	namespace:testing::internal
Types34	src/gtest/gtest.h	/^struct Types34 {$/;"	s	namespace:testing::internal
Types35	src/gtest/gtest.h	/^struct Types35 {$/;"	s	namespace:testing::internal
Types36	src/gtest/gtest.h	/^struct Types36 {$/;"	s	namespace:testing::internal
Types37	src/gtest/gtest.h	/^struct Types37 {$/;"	s	namespace:testing::internal
Types38	src/gtest/gtest.h	/^struct Types38 {$/;"	s	namespace:testing::internal
Types39	src/gtest/gtest.h	/^struct Types39 {$/;"	s	namespace:testing::internal
Types4	src/gtest/gtest.h	/^struct Types4 {$/;"	s	namespace:testing::internal
Types40	src/gtest/gtest.h	/^struct Types40 {$/;"	s	namespace:testing::internal
Types41	src/gtest/gtest.h	/^struct Types41 {$/;"	s	namespace:testing::internal
Types42	src/gtest/gtest.h	/^struct Types42 {$/;"	s	namespace:testing::internal
Types43	src/gtest/gtest.h	/^struct Types43 {$/;"	s	namespace:testing::internal
Types44	src/gtest/gtest.h	/^struct Types44 {$/;"	s	namespace:testing::internal
Types45	src/gtest/gtest.h	/^struct Types45 {$/;"	s	namespace:testing::internal
Types46	src/gtest/gtest.h	/^struct Types46 {$/;"	s	namespace:testing::internal
Types47	src/gtest/gtest.h	/^struct Types47 {$/;"	s	namespace:testing::internal
Types48	src/gtest/gtest.h	/^struct Types48 {$/;"	s	namespace:testing::internal
Types49	src/gtest/gtest.h	/^struct Types49 {$/;"	s	namespace:testing::internal
Types5	src/gtest/gtest.h	/^struct Types5 {$/;"	s	namespace:testing::internal
Types50	src/gtest/gtest.h	/^struct Types50 {$/;"	s	namespace:testing::internal
Types6	src/gtest/gtest.h	/^struct Types6 {$/;"	s	namespace:testing::internal
Types7	src/gtest/gtest.h	/^struct Types7 {$/;"	s	namespace:testing::internal
Types8	src/gtest/gtest.h	/^struct Types8 {$/;"	s	namespace:testing::internal
Types9	src/gtest/gtest.h	/^struct Types9 {$/;"	s	namespace:testing::internal
UInt	src/gtest/gtest.h	/^  typedef unsigned __int64 UInt;$/;"	t	class:std::tr1::TypeWithSize
UInt	src/gtest/gtest.h	/^  typedef unsigned int UInt;$/;"	t	class:std::tr1::TypeWithSize
UInt	src/gtest/gtest.h	/^  typedef void UInt;$/;"	t	class:std::tr1::TypeWithSize
UInt32	src/gtest/gtest.h	/^typedef TypeWithSize<4>::UInt UInt32;$/;"	t	namespace:std::tr1
UInt64	src/gtest/gtest.h	/^typedef TypeWithSize<8>::UInt UInt64;$/;"	t	namespace:std::tr1
UNAME	Makefile	/^UNAME := $(shell uname -s)$/;"	m
UNINITIALIZED	include/caffe/syncedmem.hpp	/^  enum SyncedHead { UNINITIALIZED, HEAD_AT_CPU, HEAD_AT_GPU, SYNCED };$/;"	e	enum:caffe::SyncedMemory::SyncedHead
UPLOAD_FOLDER	examples/web_demo/app.py	/^UPLOAD_FOLDER = '\/tmp\/caffe_demos_uploads'$/;"	v
USE_LEVELDB	Makefile	/^USE_LEVELDB ?= 1$/;"	m
USE_LMDB	Makefile	/^USE_LMDB ?= 1$/;"	m
USE_OPENCV	Makefile	/^USE_OPENCV ?= 1$/;"	m
USE_PKG_CONFIG	Makefile	/^USE_PKG_CONFIG ?= 0$/;"	m
UndefinedMapException	python/caffe/coord_map.py	/^class UndefinedMapException(Exception):$/;"	c
UnhookHandler	src/caffe/util/signal_handler.cpp	/^  void UnhookHandler() {$/;"	f	namespace:__anon1
UniformFiller	include/caffe/filler.hpp	/^  explicit UniformFiller(const FillerParameter& param)$/;"	f	class:caffe::UniformFiller
UniformFiller	include/caffe/filler.hpp	/^class UniformFiller : public Filler<Dtype> {$/;"	c	namespace:caffe
UniformFillerTest	src/caffe/test/test_filler.cpp	/^  UniformFillerTest()$/;"	f	class:caffe::UniformFillerTest
UniformFillerTest	src/caffe/test/test_filler.cpp	/^class UniformFillerTest : public ::testing::Test {$/;"	c	namespace:caffe	file:
UnitTest	src/gtest/gtest-all.cpp	/^UnitTest::UnitTest() {$/;"	f	class:testing::UnitTest
UnitTest	src/gtest/gtest.h	/^class GTEST_API_ UnitTest {$/;"	c	namespace:testing
UnitTestImpl	src/gtest/gtest-all.cpp	/^UnitTestImpl::UnitTestImpl(UnitTest* parent)$/;"	f	class:testing::internal::UnitTestImpl
UnitTestImpl	src/gtest/gtest-all.cpp	/^class GTEST_API_ UnitTestImpl {$/;"	c	namespace:testing::internal	file:
UnitTestOptions	src/gtest/gtest-all.cpp	/^class GTEST_API_ UnitTestOptions {$/;"	c	namespace:testing::internal	file:
UniversalPrint	src/gtest/gtest.h	/^void UniversalPrint(const T& value, ::std::ostream* os) {$/;"	f	namespace:testing::internal
UniversalPrintArray	src/gtest/gtest-all.cpp	/^void UniversalPrintArray(const char* begin, size_t len, ostream* os) {$/;"	f	namespace:testing::internal
UniversalPrintArray	src/gtest/gtest.h	/^void UniversalPrintArray(const T* begin, size_t len, ::std::ostream* os) {$/;"	f	namespace:testing::internal
UniversalPrinter	src/gtest/gtest.h	/^class UniversalPrinter {$/;"	c	namespace:testing::internal
UniversalPrinter	src/gtest/gtest.h	/^class UniversalPrinter<T&> {$/;"	c	namespace:testing::internal
UniversalPrinter	src/gtest/gtest.h	/^class UniversalPrinter<T[N]> {$/;"	c	namespace:testing::internal
UniversalTersePrint	src/gtest/gtest.h	/^inline void UniversalTersePrint(char* str, ::std::ostream* os) {$/;"	f	namespace:testing::internal
UniversalTersePrint	src/gtest/gtest.h	/^inline void UniversalTersePrint(const char* str, ::std::ostream* os) {$/;"	f	namespace:testing::internal
UniversalTersePrint	src/gtest/gtest.h	/^void UniversalTersePrint(const T& value, ::std::ostream* os) {$/;"	f	namespace:testing::internal
UniversalTersePrintTupleFieldsToStrings	src/gtest/gtest.h	/^Strings UniversalTersePrintTupleFieldsToStrings(const Tuple& value) {$/;"	f	namespace:testing::internal
Unlock	src/gtest/gtest.h	/^  void Unlock() {$/;"	f	class:std::tr1::MutexBase
UnshuffleTests	src/gtest/gtest-all.cpp	/^void TestCase::UnshuffleTests() {$/;"	f	class:testing::TestCase
UnshuffleTests	src/gtest/gtest-all.cpp	/^void UnitTestImpl::UnshuffleTests() {$/;"	f	class:testing::internal::UnitTestImpl
Update	scripts/cpp_lint.py	/^  def Update(self, filename, clean_lines, linenum, error):$/;"	m	class:_NestingState
Update	src/caffe/blob.cpp	/^template <> void Blob<int>::Update() { NOT_IMPLEMENTED; }$/;"	f	class:caffe::Blob
Update	src/caffe/blob.cpp	/^template <> void Blob<unsigned int>::Update() { NOT_IMPLEMENTED; }$/;"	f	class:caffe::Blob
Update	src/caffe/blob.cpp	/^void Blob<Dtype>::Update() {$/;"	f	class:caffe::Blob
Update	src/caffe/net.cpp	/^void Net<Dtype>::Update() {$/;"	f	class:caffe::Net
UpdateDebugInfo	src/caffe/net.cpp	/^void Net<Dtype>::UpdateDebugInfo(const int param_id) {$/;"	f	class:caffe::Net
UpdateIncludeState	scripts/cpp_lint.py	/^def UpdateIncludeState(filename, include_state, io=codecs):$/;"	f
UpdatePreprocessor	scripts/cpp_lint.py	/^  def UpdatePreprocessor(self, line):$/;"	m	class:_NestingState
UpdateSmoothedLoss	src/caffe/solver.cpp	/^void Solver<Dtype>::UpdateSmoothedLoss(Dtype loss, int start_iter,$/;"	f	class:caffe::Solver
UpgradeNetAsNeeded	src/caffe/util/upgrade_proto.cpp	/^bool UpgradeNetAsNeeded(const string& param_file, NetParameter* param) {$/;"	f	namespace:caffe
UpgradeNetBatchNorm	src/caffe/util/upgrade_proto.cpp	/^void UpgradeNetBatchNorm(NetParameter* net_param) {$/;"	f	namespace:caffe
UpgradeNetDataTransformation	src/caffe/util/upgrade_proto.cpp	/^void UpgradeNetDataTransformation(NetParameter* net_param) {$/;"	f	namespace:caffe
UpgradeNetInput	src/caffe/util/upgrade_proto.cpp	/^void UpgradeNetInput(NetParameter* net_param) {$/;"	f	namespace:caffe
UpgradeSolverAsNeeded	src/caffe/util/upgrade_proto.cpp	/^bool UpgradeSolverAsNeeded(const string& param_file, SolverParameter* param) {$/;"	f	namespace:caffe
UpgradeSolverType	src/caffe/util/upgrade_proto.cpp	/^bool UpgradeSolverType(SolverParameter* solver_param) {$/;"	f	namespace:caffe
UpgradeV0LayerParameter	src/caffe/util/upgrade_proto.cpp	/^bool UpgradeV0LayerParameter(const V1LayerParameter& v0_layer_connection,$/;"	f	namespace:caffe
UpgradeV0LayerType	src/caffe/util/upgrade_proto.cpp	/^V1LayerParameter_LayerType UpgradeV0LayerType(const string& type) {$/;"	f	namespace:caffe
UpgradeV0Net	src/caffe/util/upgrade_proto.cpp	/^bool UpgradeV0Net(const NetParameter& v0_net_param_padding_layers,$/;"	f	namespace:caffe
UpgradeV0PaddingLayers	src/caffe/util/upgrade_proto.cpp	/^void UpgradeV0PaddingLayers(const NetParameter& param,$/;"	f	namespace:caffe
UpgradeV1LayerParameter	src/caffe/util/upgrade_proto.cpp	/^bool UpgradeV1LayerParameter(const V1LayerParameter& v1_layer_param,$/;"	f	namespace:caffe
UpgradeV1LayerType	src/caffe/util/upgrade_proto.cpp	/^const char* UpgradeV1LayerType(const V1LayerParameter_LayerType type) {$/;"	f	namespace:caffe
UpgradeV1Net	src/caffe/util/upgrade_proto.cpp	/^bool UpgradeV1Net(const NetParameter& v1_net_param, NetParameter* net_param) {$/;"	f	namespace:caffe
UponLeavingGTest	src/gtest/gtest-all.cpp	/^void OsStackTraceGetter::UponLeavingGTest() {$/;"	f	class:testing::internal::OsStackTraceGetter
UrlEncode	src/gtest/gtest-all.cpp	/^string StreamingListener::UrlEncode(const char* str) {$/;"	f	class:testing::internal::StreamingListener
UserThreadFunc	src/gtest/gtest.h	/^  typedef void (*UserThreadFunc)(T);$/;"	t	class:std::tr1::ThreadWithParam
Utf16ToAnsi	src/gtest/gtest-all.cpp	/^const char* String::Utf16ToAnsi(LPCWSTR utf16_str)  {$/;"	f	class:testing::internal::String
ValidateRegex	src/gtest/gtest-all.cpp	/^bool ValidateRegex(const char* regex) {$/;"	f	namespace:testing::internal
ValidateTestProperty	src/gtest/gtest-all.cpp	/^bool TestResult::ValidateTestProperty(const TestProperty& test_property) {$/;"	f	class:testing::TestResult
ValueArray1	src/gtest/gtest.h	/^  explicit ValueArray1(T1 v1) : v1_(v1) {}$/;"	f	class:testing::internal::ValueArray1
ValueArray1	src/gtest/gtest.h	/^class ValueArray1 {$/;"	c	namespace:testing::internal
ValueArray10	src/gtest/gtest.h	/^  ValueArray10(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray10
ValueArray10	src/gtest/gtest.h	/^class ValueArray10 {$/;"	c	namespace:testing::internal
ValueArray11	src/gtest/gtest.h	/^  ValueArray11(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray11
ValueArray11	src/gtest/gtest.h	/^class ValueArray11 {$/;"	c	namespace:testing::internal
ValueArray12	src/gtest/gtest.h	/^  ValueArray12(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray12
ValueArray12	src/gtest/gtest.h	/^class ValueArray12 {$/;"	c	namespace:testing::internal
ValueArray13	src/gtest/gtest.h	/^  ValueArray13(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray13
ValueArray13	src/gtest/gtest.h	/^class ValueArray13 {$/;"	c	namespace:testing::internal
ValueArray14	src/gtest/gtest.h	/^  ValueArray14(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray14
ValueArray14	src/gtest/gtest.h	/^class ValueArray14 {$/;"	c	namespace:testing::internal
ValueArray15	src/gtest/gtest.h	/^  ValueArray15(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray15
ValueArray15	src/gtest/gtest.h	/^class ValueArray15 {$/;"	c	namespace:testing::internal
ValueArray16	src/gtest/gtest.h	/^  ValueArray16(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray16
ValueArray16	src/gtest/gtest.h	/^class ValueArray16 {$/;"	c	namespace:testing::internal
ValueArray17	src/gtest/gtest.h	/^  ValueArray17(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray17
ValueArray17	src/gtest/gtest.h	/^class ValueArray17 {$/;"	c	namespace:testing::internal
ValueArray18	src/gtest/gtest.h	/^  ValueArray18(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray18
ValueArray18	src/gtest/gtest.h	/^class ValueArray18 {$/;"	c	namespace:testing::internal
ValueArray19	src/gtest/gtest.h	/^  ValueArray19(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray19
ValueArray19	src/gtest/gtest.h	/^class ValueArray19 {$/;"	c	namespace:testing::internal
ValueArray2	src/gtest/gtest.h	/^  ValueArray2(T1 v1, T2 v2) : v1_(v1), v2_(v2) {}$/;"	f	class:testing::internal::ValueArray2
ValueArray2	src/gtest/gtest.h	/^class ValueArray2 {$/;"	c	namespace:testing::internal
ValueArray20	src/gtest/gtest.h	/^  ValueArray20(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray20
ValueArray20	src/gtest/gtest.h	/^class ValueArray20 {$/;"	c	namespace:testing::internal
ValueArray21	src/gtest/gtest.h	/^  ValueArray21(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray21
ValueArray21	src/gtest/gtest.h	/^class ValueArray21 {$/;"	c	namespace:testing::internal
ValueArray22	src/gtest/gtest.h	/^  ValueArray22(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray22
ValueArray22	src/gtest/gtest.h	/^class ValueArray22 {$/;"	c	namespace:testing::internal
ValueArray23	src/gtest/gtest.h	/^  ValueArray23(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray23
ValueArray23	src/gtest/gtest.h	/^class ValueArray23 {$/;"	c	namespace:testing::internal
ValueArray24	src/gtest/gtest.h	/^  ValueArray24(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray24
ValueArray24	src/gtest/gtest.h	/^class ValueArray24 {$/;"	c	namespace:testing::internal
ValueArray25	src/gtest/gtest.h	/^  ValueArray25(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray25
ValueArray25	src/gtest/gtest.h	/^class ValueArray25 {$/;"	c	namespace:testing::internal
ValueArray26	src/gtest/gtest.h	/^  ValueArray26(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray26
ValueArray26	src/gtest/gtest.h	/^class ValueArray26 {$/;"	c	namespace:testing::internal
ValueArray27	src/gtest/gtest.h	/^  ValueArray27(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray27
ValueArray27	src/gtest/gtest.h	/^class ValueArray27 {$/;"	c	namespace:testing::internal
ValueArray28	src/gtest/gtest.h	/^  ValueArray28(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray28
ValueArray28	src/gtest/gtest.h	/^class ValueArray28 {$/;"	c	namespace:testing::internal
ValueArray29	src/gtest/gtest.h	/^  ValueArray29(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray29
ValueArray29	src/gtest/gtest.h	/^class ValueArray29 {$/;"	c	namespace:testing::internal
ValueArray3	src/gtest/gtest.h	/^  ValueArray3(T1 v1, T2 v2, T3 v3) : v1_(v1), v2_(v2), v3_(v3) {}$/;"	f	class:testing::internal::ValueArray3
ValueArray3	src/gtest/gtest.h	/^class ValueArray3 {$/;"	c	namespace:testing::internal
ValueArray30	src/gtest/gtest.h	/^  ValueArray30(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray30
ValueArray30	src/gtest/gtest.h	/^class ValueArray30 {$/;"	c	namespace:testing::internal
ValueArray31	src/gtest/gtest.h	/^  ValueArray31(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray31
ValueArray31	src/gtest/gtest.h	/^class ValueArray31 {$/;"	c	namespace:testing::internal
ValueArray32	src/gtest/gtest.h	/^  ValueArray32(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray32
ValueArray32	src/gtest/gtest.h	/^class ValueArray32 {$/;"	c	namespace:testing::internal
ValueArray33	src/gtest/gtest.h	/^  ValueArray33(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray33
ValueArray33	src/gtest/gtest.h	/^class ValueArray33 {$/;"	c	namespace:testing::internal
ValueArray34	src/gtest/gtest.h	/^  ValueArray34(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray34
ValueArray34	src/gtest/gtest.h	/^class ValueArray34 {$/;"	c	namespace:testing::internal
ValueArray35	src/gtest/gtest.h	/^  ValueArray35(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray35
ValueArray35	src/gtest/gtest.h	/^class ValueArray35 {$/;"	c	namespace:testing::internal
ValueArray36	src/gtest/gtest.h	/^  ValueArray36(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray36
ValueArray36	src/gtest/gtest.h	/^class ValueArray36 {$/;"	c	namespace:testing::internal
ValueArray37	src/gtest/gtest.h	/^  ValueArray37(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray37
ValueArray37	src/gtest/gtest.h	/^class ValueArray37 {$/;"	c	namespace:testing::internal
ValueArray38	src/gtest/gtest.h	/^  ValueArray38(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray38
ValueArray38	src/gtest/gtest.h	/^class ValueArray38 {$/;"	c	namespace:testing::internal
ValueArray39	src/gtest/gtest.h	/^  ValueArray39(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray39
ValueArray39	src/gtest/gtest.h	/^class ValueArray39 {$/;"	c	namespace:testing::internal
ValueArray4	src/gtest/gtest.h	/^  ValueArray4(T1 v1, T2 v2, T3 v3, T4 v4) : v1_(v1), v2_(v2), v3_(v3),$/;"	f	class:testing::internal::ValueArray4
ValueArray4	src/gtest/gtest.h	/^class ValueArray4 {$/;"	c	namespace:testing::internal
ValueArray40	src/gtest/gtest.h	/^  ValueArray40(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray40
ValueArray40	src/gtest/gtest.h	/^class ValueArray40 {$/;"	c	namespace:testing::internal
ValueArray41	src/gtest/gtest.h	/^  ValueArray41(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray41
ValueArray41	src/gtest/gtest.h	/^class ValueArray41 {$/;"	c	namespace:testing::internal
ValueArray42	src/gtest/gtest.h	/^  ValueArray42(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray42
ValueArray42	src/gtest/gtest.h	/^class ValueArray42 {$/;"	c	namespace:testing::internal
ValueArray43	src/gtest/gtest.h	/^  ValueArray43(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray43
ValueArray43	src/gtest/gtest.h	/^class ValueArray43 {$/;"	c	namespace:testing::internal
ValueArray44	src/gtest/gtest.h	/^  ValueArray44(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray44
ValueArray44	src/gtest/gtest.h	/^class ValueArray44 {$/;"	c	namespace:testing::internal
ValueArray45	src/gtest/gtest.h	/^  ValueArray45(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray45
ValueArray45	src/gtest/gtest.h	/^class ValueArray45 {$/;"	c	namespace:testing::internal
ValueArray46	src/gtest/gtest.h	/^  ValueArray46(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray46
ValueArray46	src/gtest/gtest.h	/^class ValueArray46 {$/;"	c	namespace:testing::internal
ValueArray47	src/gtest/gtest.h	/^  ValueArray47(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray47
ValueArray47	src/gtest/gtest.h	/^class ValueArray47 {$/;"	c	namespace:testing::internal
ValueArray48	src/gtest/gtest.h	/^  ValueArray48(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray48
ValueArray48	src/gtest/gtest.h	/^class ValueArray48 {$/;"	c	namespace:testing::internal
ValueArray49	src/gtest/gtest.h	/^  ValueArray49(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray49
ValueArray49	src/gtest/gtest.h	/^class ValueArray49 {$/;"	c	namespace:testing::internal
ValueArray5	src/gtest/gtest.h	/^  ValueArray5(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5) : v1_(v1), v2_(v2), v3_(v3),$/;"	f	class:testing::internal::ValueArray5
ValueArray5	src/gtest/gtest.h	/^class ValueArray5 {$/;"	c	namespace:testing::internal
ValueArray50	src/gtest/gtest.h	/^  ValueArray50(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray50
ValueArray50	src/gtest/gtest.h	/^class ValueArray50 {$/;"	c	namespace:testing::internal
ValueArray6	src/gtest/gtest.h	/^  ValueArray6(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6) : v1_(v1), v2_(v2),$/;"	f	class:testing::internal::ValueArray6
ValueArray6	src/gtest/gtest.h	/^class ValueArray6 {$/;"	c	namespace:testing::internal
ValueArray7	src/gtest/gtest.h	/^  ValueArray7(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7) : v1_(v1),$/;"	f	class:testing::internal::ValueArray7
ValueArray7	src/gtest/gtest.h	/^class ValueArray7 {$/;"	c	namespace:testing::internal
ValueArray8	src/gtest/gtest.h	/^  ValueArray8(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7,$/;"	f	class:testing::internal::ValueArray8
ValueArray8	src/gtest/gtest.h	/^class ValueArray8 {$/;"	c	namespace:testing::internal
ValueArray9	src/gtest/gtest.h	/^  ValueArray9(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8,$/;"	f	class:testing::internal::ValueArray9
ValueArray9	src/gtest/gtest.h	/^class ValueArray9 {$/;"	c	namespace:testing::internal
ValueHolder	src/gtest/gtest.h	/^    explicit ValueHolder(const T& value) : value_(value) {}$/;"	f	class:std::tr1::ThreadLocal::ValueHolder
ValueHolder	src/gtest/gtest.h	/^  class ValueHolder : public ThreadLocalValueHolderBase {$/;"	c	class:std::tr1::ThreadLocal
Values	src/gtest/gtest.h	/^    T11> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	src/gtest/gtest.h	/^    T12> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	src/gtest/gtest.h	/^    T13> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	src/gtest/gtest.h	/^    T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> Values(T1 v1,$/;"	f	namespace:testing
Values	src/gtest/gtest.h	/^    T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> Values(T1 v1, T2 v2,$/;"	f	namespace:testing
Values	src/gtest/gtest.h	/^    T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> Values(T1 v1, T2 v2,$/;"	f	namespace:testing
Values	src/gtest/gtest.h	/^    T14, T15, T16, T17, T18, T19, T20, T21, T22> Values(T1 v1, T2 v2, T3 v3,$/;"	f	namespace:testing
Values	src/gtest/gtest.h	/^    T14, T15, T16, T17, T18, T19, T20, T21> Values(T1 v1, T2 v2, T3 v3, T4 v4,$/;"	f	namespace:testing
Values	src/gtest/gtest.h	/^    T14, T15, T16, T17, T18, T19, T20> Values(T1 v1, T2 v2, T3 v3, T4 v4,$/;"	f	namespace:testing
Values	src/gtest/gtest.h	/^    T14, T15, T16, T17, T18, T19> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5,$/;"	f	namespace:testing
Values	src/gtest/gtest.h	/^    T14, T15, T16, T17, T18> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6,$/;"	f	namespace:testing
Values	src/gtest/gtest.h	/^    T14, T15, T16, T17> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7,$/;"	f	namespace:testing
Values	src/gtest/gtest.h	/^    T14, T15, T16> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7,$/;"	f	namespace:testing
Values	src/gtest/gtest.h	/^    T14, T15> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8,$/;"	f	namespace:testing
Values	src/gtest/gtest.h	/^    T14> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	src/gtest/gtest.h	/^    T26> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	src/gtest/gtest.h	/^    T27> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	src/gtest/gtest.h	/^    T28> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	src/gtest/gtest.h	/^    T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40> Values(T1 v1,$/;"	f	namespace:testing
Values	src/gtest/gtest.h	/^    T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39> Values(T1 v1, T2 v2,$/;"	f	namespace:testing
Values	src/gtest/gtest.h	/^    T29, T30, T31, T32, T33, T34, T35, T36, T37, T38> Values(T1 v1, T2 v2,$/;"	f	namespace:testing
Values	src/gtest/gtest.h	/^    T29, T30, T31, T32, T33, T34, T35, T36, T37> Values(T1 v1, T2 v2, T3 v3,$/;"	f	namespace:testing
Values	src/gtest/gtest.h	/^    T29, T30, T31, T32, T33, T34, T35, T36> Values(T1 v1, T2 v2, T3 v3, T4 v4,$/;"	f	namespace:testing
Values	src/gtest/gtest.h	/^    T29, T30, T31, T32, T33, T34, T35> Values(T1 v1, T2 v2, T3 v3, T4 v4,$/;"	f	namespace:testing
Values	src/gtest/gtest.h	/^    T29, T30, T31, T32, T33, T34> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5,$/;"	f	namespace:testing
Values	src/gtest/gtest.h	/^    T29, T30, T31, T32, T33> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6,$/;"	f	namespace:testing
Values	src/gtest/gtest.h	/^    T29, T30, T31, T32> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7,$/;"	f	namespace:testing
Values	src/gtest/gtest.h	/^    T29, T30, T31> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7,$/;"	f	namespace:testing
Values	src/gtest/gtest.h	/^    T29, T30> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8,$/;"	f	namespace:testing
Values	src/gtest/gtest.h	/^    T29> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	src/gtest/gtest.h	/^    T41> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	src/gtest/gtest.h	/^    T42> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	src/gtest/gtest.h	/^    T43> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	src/gtest/gtest.h	/^    T44, T45, T46, T47, T48, T49, T50> Values(T1 v1, T2 v2, T3 v3, T4 v4,$/;"	f	namespace:testing
Values	src/gtest/gtest.h	/^    T44, T45, T46, T47, T48, T49> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5,$/;"	f	namespace:testing
Values	src/gtest/gtest.h	/^    T44, T45, T46, T47, T48> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6,$/;"	f	namespace:testing
Values	src/gtest/gtest.h	/^    T44, T45, T46, T47> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7,$/;"	f	namespace:testing
Values	src/gtest/gtest.h	/^    T44, T45, T46> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7,$/;"	f	namespace:testing
Values	src/gtest/gtest.h	/^    T44, T45> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8,$/;"	f	namespace:testing
Values	src/gtest/gtest.h	/^    T44> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	src/gtest/gtest.h	/^internal::ValueArray10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Values(T1 v1,$/;"	f	namespace:testing
Values	src/gtest/gtest.h	/^internal::ValueArray1<T1> Values(T1 v1) {$/;"	f	namespace:testing
Values	src/gtest/gtest.h	/^internal::ValueArray2<T1, T2> Values(T1 v1, T2 v2) {$/;"	f	namespace:testing
Values	src/gtest/gtest.h	/^internal::ValueArray3<T1, T2, T3> Values(T1 v1, T2 v2, T3 v3) {$/;"	f	namespace:testing
Values	src/gtest/gtest.h	/^internal::ValueArray4<T1, T2, T3, T4> Values(T1 v1, T2 v2, T3 v3, T4 v4) {$/;"	f	namespace:testing
Values	src/gtest/gtest.h	/^internal::ValueArray5<T1, T2, T3, T4, T5> Values(T1 v1, T2 v2, T3 v3, T4 v4,$/;"	f	namespace:testing
Values	src/gtest/gtest.h	/^internal::ValueArray6<T1, T2, T3, T4, T5, T6> Values(T1 v1, T2 v2, T3 v3,$/;"	f	namespace:testing
Values	src/gtest/gtest.h	/^internal::ValueArray7<T1, T2, T3, T4, T5, T6, T7> Values(T1 v1, T2 v2, T3 v3,$/;"	f	namespace:testing
Values	src/gtest/gtest.h	/^internal::ValueArray8<T1, T2, T3, T4, T5, T6, T7, T8> Values(T1 v1, T2 v2,$/;"	f	namespace:testing
Values	src/gtest/gtest.h	/^internal::ValueArray9<T1, T2, T3, T4, T5, T6, T7, T8, T9> Values(T1 v1, T2 v2,$/;"	f	namespace:testing
ValuesIn	src/gtest/gtest.h	/^ValuesIn(ForwardIterator begin, ForwardIterator end) {$/;"	f	namespace:testing
ValuesIn	src/gtest/gtest.h	/^internal::ParamGenerator<typename Container::value_type> ValuesIn($/;"	f	namespace:testing
ValuesInIteratorRangeGenerator	src/gtest/gtest.h	/^  ValuesInIteratorRangeGenerator(ForwardIterator begin, ForwardIterator end)$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator
ValuesInIteratorRangeGenerator	src/gtest/gtest.h	/^class ValuesInIteratorRangeGenerator : public ParamGeneratorInterface<T> {$/;"	c	namespace:testing::internal
VerifyRegisteredTestNames	src/gtest/gtest-all.cpp	/^const char* TypedTestCasePState::VerifyRegisteredTestNames($/;"	f	class:testing::internal::TypedTestCasePState
WARNINGS	Makefile	/^WARNINGS := -Wall -Wno-sign-compare$/;"	m
WARNS_EXT	Makefile	/^WARNS_EXT := warnings.txt$/;"	m
WRITE	include/caffe/util/db.hpp	/^enum Mode { READ, WRITE, NEW };$/;"	e	enum:caffe::db::Mode
Wait	src/gtest/gtest-all.cpp	/^int ForkingDeathTest::Wait() {$/;"	f	class:testing::internal::ForkingDeathTest
Wait	src/gtest/gtest-all.cpp	/^int WindowsDeathTest::Wait() {$/;"	f	class:testing::internal::WindowsDeathTest
WaitForNotification	src/gtest/gtest.h	/^  void WaitForNotification() {$/;"	f	class:std::tr1::Notification
WhichMemory	matlab/+caffe/private/caffe_.cpp	/^enum WhichMemory { DATA, DIFF };$/;"	g	file:
WideCStringEquals	src/gtest/gtest-all.cpp	/^bool String::WideCStringEquals(const wchar_t * lhs, const wchar_t * rhs) {$/;"	f	class:testing::internal::String
WideStringToUtf8	src/gtest/gtest-all.cpp	/^String WideStringToUtf8(const wchar_t* str, int num_chars) {$/;"	f	namespace:testing::internal
WindowDataLayer	include/caffe/layers/window_data_layer.hpp	/^  explicit WindowDataLayer(const LayerParameter& param)$/;"	f	class:caffe::WindowDataLayer
WindowDataLayer	include/caffe/layers/window_data_layer.hpp	/^class WindowDataLayer : public BasePrefetchingDataLayer<Dtype> {$/;"	c	namespace:caffe
WindowField	include/caffe/layers/window_data_layer.hpp	/^  enum WindowField { IMAGE_INDEX, LABEL, OVERLAP, X1, Y1, X2, Y2, NUM };$/;"	g	class:caffe::WindowDataLayer
WindowsDeathTest	src/gtest/gtest-all.cpp	/^  WindowsDeathTest(const char* a_statement,$/;"	f	class:testing::internal::WindowsDeathTest
WindowsDeathTest	src/gtest/gtest-all.cpp	/^class WindowsDeathTest : public DeathTestImpl {$/;"	c	namespace:testing::internal	file:
WithParamInterface	src/gtest/gtest.h	/^class WithParamInterface {$/;"	c	namespace:testing
WithinChannelBackward	src/caffe/layers/lrn_layer.cpp	/^void LRNLayer<Dtype>::WithinChannelBackward($/;"	f	class:caffe::LRNLayer
WithinChannelForward	src/caffe/layers/lrn_layer.cpp	/^void LRNLayer<Dtype>::WithinChannelForward($/;"	f	class:caffe::LRNLayer
Worker	src/caffe/parallel.cpp	/^  explicit Worker(shared_ptr<Solver<Dtype> > rank0, int device,$/;"	f	class:caffe::Worker
Worker	src/caffe/parallel.cpp	/^class Worker : public InternalThread {$/;"	c	namespace:caffe	file:
WrapInputLayer	examples/cpp_classification/classification.cpp	/^void Classifier::WrapInputLayer(std::vector<cv::Mat>* input_channels) {$/;"	f	class:Classifier
Write	src/gtest/gtest.h	/^inline int Write(int fd, const void* buf, unsigned int count) {$/;"	f	namespace:std::tr1::posix
WriteProtoToBinaryFile	include/caffe/util/io.hpp	/^inline void WriteProtoToBinaryFile($/;"	f	namespace:caffe
WriteProtoToBinaryFile	src/caffe/util/io.cpp	/^void WriteProtoToBinaryFile(const Message& proto, const char* filename) {$/;"	f	namespace:caffe
WriteProtoToTextFile	include/caffe/util/io.hpp	/^inline void WriteProtoToTextFile(const Message& proto, const string& filename) {$/;"	f	namespace:caffe
WriteProtoToTextFile	src/caffe/util/io.cpp	/^void WriteProtoToTextFile(const Message& proto, const char* filename) {$/;"	f	namespace:caffe
WriteToShardStatusFileIfNeeded	src/gtest/gtest-all.cpp	/^void WriteToShardStatusFileIfNeeded() {$/;"	f	namespace:testing::internal
X1	include/caffe/layers/window_data_layer.hpp	/^  enum WindowField { IMAGE_INDEX, LABEL, OVERLAP, X1, Y1, X2, Y2, NUM };$/;"	e	enum:caffe::WindowDataLayer::WindowField
X2	include/caffe/layers/window_data_layer.hpp	/^  enum WindowField { IMAGE_INDEX, LABEL, OVERLAP, X1, Y1, X2, Y2, NUM };$/;"	e	enum:caffe::WindowDataLayer::WindowField
XCODE_CLT_GEQ_6	Makefile	/^		XCODE_CLT_GEQ_6 := $(shell [ $(XCODE_CLT_VER) -gt 5 ] && echo 1)$/;"	m
XCODE_CLT_GEQ_7	Makefile	/^		XCODE_CLT_GEQ_7 := $(shell [ $(XCODE_CLT_VER) -gt 6 ] && echo 1)$/;"	m
XCODE_CLT_VER	Makefile	/^		XCODE_CLT_VER := $(shell pkgutil --pkg-info=com.apple.pkg.CLTools_Executables | grep 'version' | sed 's\/[^0-9]*\\([0-9]\\).*\/\\1\/')$/;"	m
X_acts_	include/caffe/layers/lstm_layer.hpp	/^  Blob<Dtype> X_acts_;$/;"	m	class:caffe::LSTMUnitLayer
XavierFiller	include/caffe/filler.hpp	/^  explicit XavierFiller(const FillerParameter& param)$/;"	f	class:caffe::XavierFiller
XavierFiller	include/caffe/filler.hpp	/^class XavierFiller : public Filler<Dtype> {$/;"	c	namespace:caffe
XavierFillerTest	src/caffe/test/test_filler.cpp	/^  XavierFillerTest()$/;"	f	class:caffe::XavierFillerTest
XavierFillerTest	src/caffe/test/test_filler.cpp	/^class XavierFillerTest : public ::testing::Test {$/;"	c	namespace:caffe	file:
XmlUnitTestResultPrinter	src/gtest/gtest-all.cpp	/^XmlUnitTestResultPrinter::XmlUnitTestResultPrinter(const char* output_file)$/;"	f	class:testing::internal::XmlUnitTestResultPrinter
XmlUnitTestResultPrinter	src/gtest/gtest-all.cpp	/^class XmlUnitTestResultPrinter : public EmptyTestEventListener {$/;"	c	namespace:testing::internal	file:
Y1	include/caffe/layers/window_data_layer.hpp	/^  enum WindowField { IMAGE_INDEX, LABEL, OVERLAP, X1, Y1, X2, Y2, NUM };$/;"	e	enum:caffe::WindowDataLayer::WindowField
Y2	include/caffe/layers/window_data_layer.hpp	/^  enum WindowField { IMAGE_INDEX, LABEL, OVERLAP, X1, Y1, X2, Y2, NUM };$/;"	e	enum:caffe::WindowDataLayer::WindowField
_ALT_TOKEN_REPLACEMENT	scripts/cpp_lint.py	/^_ALT_TOKEN_REPLACEMENT = {$/;"	v
_ALT_TOKEN_REPLACEMENT_PATTERN	scripts/cpp_lint.py	/^_ALT_TOKEN_REPLACEMENT_PATTERN = re.compile($/;"	v
_BLOCK_ASM	scripts/cpp_lint.py	/^_BLOCK_ASM = 3    # The whole block is an inline assembly block$/;"	v
_BlockInfo	scripts/cpp_lint.py	/^class _BlockInfo(object):$/;"	c
_CAFFE_UTIL_IM2COL_HPP_	include/caffe/util/im2col.hpp	/^#define _CAFFE_UTIL_IM2COL_HPP_$/;"	d
_CAFFE_UTIL_INSERT_SPLITS_HPP_	include/caffe/util/insert_splits.hpp	/^#define _CAFFE_UTIL_INSERT_SPLITS_HPP_$/;"	d
_CHECK_MACROS	scripts/cpp_lint.py	/^_CHECK_MACROS = [$/;"	v
_CHECK_REPLACEMENT	scripts/cpp_lint.py	/^_CHECK_REPLACEMENT = dict([(m, {}) for m in _CHECK_MACROS])$/;"	v
_CPP_HEADERS	scripts/cpp_lint.py	/^_CPP_HEADERS = frozenset([$/;"	v
_CPP_SECTION	scripts/cpp_lint.py	/^  _CPP_SECTION = 3$/;"	v	class:_IncludeState
_CPP_SYS_HEADER	scripts/cpp_lint.py	/^_CPP_SYS_HEADER = 2$/;"	v
_C_SECTION	scripts/cpp_lint.py	/^  _C_SECTION = 2$/;"	v	class:_IncludeState
_C_SYS_HEADER	scripts/cpp_lint.py	/^_C_SYS_HEADER = 1$/;"	v
_ClassInfo	scripts/cpp_lint.py	/^class _ClassInfo(_BlockInfo):$/;"	c
_ClassifyInclude	scripts/cpp_lint.py	/^def _ClassifyInclude(fileinfo, include, is_system):$/;"	f
_CollapseStrings	scripts/cpp_lint.py	/^  def _CollapseStrings(elided):$/;"	m	class:CleansedLines
_CppLintState	scripts/cpp_lint.py	/^class _CppLintState(object):$/;"	c
_DEFAULT_FILTERS	scripts/cpp_lint.py	/^_DEFAULT_FILTERS = [$/;"	v
_DropCommonSuffixes	scripts/cpp_lint.py	/^def _DropCommonSuffixes(filename):$/;"	f
_END_ASM	scripts/cpp_lint.py	/^_END_ASM = 2      # Last line of inline assembly block$/;"	v
_ERROR_CATEGORIES	scripts/cpp_lint.py	/^_ERROR_CATEGORIES = [$/;"	v
_Filters	scripts/cpp_lint.py	/^def _Filters():$/;"	f
_FunctionState	scripts/cpp_lint.py	/^class _FunctionState(object):$/;"	c
_GetTextInside	scripts/cpp_lint.py	/^def _GetTextInside(text, start_pattern):$/;"	f
_HAS_EXCEPTIONS	src/gtest/gtest.h	/^#   define _HAS_EXCEPTIONS /;"	d
_HEADERS_CONTAINING_TEMPLATES	scripts/cpp_lint.py	/^_HEADERS_CONTAINING_TEMPLATES = ($/;"	v
_HXX	Makefile	/^PY$(PROJECT)_HXX := include\/$(PROJECT)\/layers\/python_layer.hpp$/;"	m
_INITIAL_SECTION	scripts/cpp_lint.py	/^  _INITIAL_SECTION = 0$/;"	v	class:_IncludeState
_INSIDE_ASM	scripts/cpp_lint.py	/^_INSIDE_ASM = 1   # Inside inline assembly block$/;"	v
_IncludeError	scripts/cpp_lint.py	/^class _IncludeError(Exception):$/;"	c
_IncludeState	scripts/cpp_lint.py	/^class _IncludeState(dict):$/;"	c
_IsTestFilename	scripts/cpp_lint.py	/^def _IsTestFilename(filename):$/;"	f
_LIKELY_MY_HEADER	scripts/cpp_lint.py	/^_LIKELY_MY_HEADER = 3$/;"	v
_MATCH_ASM	scripts/cpp_lint.py	/^_MATCH_ASM = re.compile(r'^\\s*(?:asm|_asm|__asm|__asm__)'$/;"	v
_MY_H_SECTION	scripts/cpp_lint.py	/^  _MY_H_SECTION = 1$/;"	v	class:_IncludeState
_NORMAL_TRIGGER	scripts/cpp_lint.py	/^  _NORMAL_TRIGGER = 250  # for --v=0, 500 for --v=1, etc.$/;"	v	class:_FunctionState
_NO_ASM	scripts/cpp_lint.py	/^_NO_ASM = 0       # Outside of inline assembly block$/;"	v
_NamespaceInfo	scripts/cpp_lint.py	/^class _NamespaceInfo(_BlockInfo):$/;"	c
_NestingState	scripts/cpp_lint.py	/^class _NestingState(object):$/;"	c
_Net_backward	python/caffe/pycaffe.py	/^def _Net_backward(self, diffs=None, start=None, end=None, **kwargs):$/;"	f
_Net_batch	python/caffe/pycaffe.py	/^def _Net_batch(self, blobs):$/;"	f
_Net_blob_loss_weights	python/caffe/pycaffe.py	/^def _Net_blob_loss_weights(self):$/;"	f
_Net_blobs	python/caffe/pycaffe.py	/^def _Net_blobs(self):$/;"	f
_Net_forward	python/caffe/pycaffe.py	/^def _Net_forward(self, blobs=None, start=None, end=None, **kwargs):$/;"	f
_Net_forward_all	python/caffe/pycaffe.py	/^def _Net_forward_all(self, blobs=None, **kwargs):$/;"	f
_Net_forward_backward_all	python/caffe/pycaffe.py	/^def _Net_forward_backward_all(self, blobs=None, diffs=None, **kwargs):$/;"	f
_Net_get_id_name	python/caffe/pycaffe.py	/^def _Net_get_id_name(func, field):$/;"	f
_Net_inputs	python/caffe/pycaffe.py	/^def _Net_inputs(self):$/;"	f
_Net_layer_dict	python/caffe/pycaffe.py	/^def _Net_layer_dict(self):$/;"	f
_Net_outputs	python/caffe/pycaffe.py	/^def _Net_outputs(self):$/;"	f
_Net_params	python/caffe/pycaffe.py	/^def _Net_params(self):$/;"	f
_Net_set_input_arrays	python/caffe/pycaffe.py	/^def _Net_set_input_arrays(self, data, labels):$/;"	f
_OTHER_HEADER	scripts/cpp_lint.py	/^_OTHER_HEADER = 5$/;"	v
_OTHER_H_SECTION	scripts/cpp_lint.py	/^  _OTHER_H_SECTION = 4$/;"	v	class:_IncludeState
_OutputFormat	scripts/cpp_lint.py	/^def _OutputFormat():$/;"	f
_POSSIBLE_MY_HEADER	scripts/cpp_lint.py	/^_POSSIBLE_MY_HEADER = 4$/;"	v
_PreprocessorInfo	scripts/cpp_lint.py	/^class _PreprocessorInfo(object):$/;"	c
_RE_COPYRIGHT	scripts/cpp_lint.py	/^_RE_COPYRIGHT = re.compile(r'Copyright')$/;"	v
_RE_FIRST_COMPONENT	scripts/cpp_lint.py	/^_RE_FIRST_COMPONENT = re.compile(r'^[^-_.]+')$/;"	v
_RE_PATTERN_CLEANSE_LINE_C_COMMENTS	scripts/cpp_lint.py	/^_RE_PATTERN_CLEANSE_LINE_C_COMMENTS = re.compile($/;"	v
_RE_PATTERN_CLEANSE_LINE_DOUBLE_QUOTES	scripts/cpp_lint.py	/^_RE_PATTERN_CLEANSE_LINE_DOUBLE_QUOTES = re.compile(r'"[^"]*"')$/;"	v
_RE_PATTERN_CLEANSE_LINE_ESCAPES	scripts/cpp_lint.py	/^_RE_PATTERN_CLEANSE_LINE_ESCAPES = re.compile($/;"	v
_RE_PATTERN_CLEANSE_LINE_SINGLE_QUOTES	scripts/cpp_lint.py	/^_RE_PATTERN_CLEANSE_LINE_SINGLE_QUOTES = re.compile(r"'.'")$/;"	v
_RE_PATTERN_CONST_REF_PARAM	scripts/cpp_lint.py	/^_RE_PATTERN_CONST_REF_PARAM = ($/;"	v
_RE_PATTERN_EXPLICIT_MAKEPAIR	scripts/cpp_lint.py	/^_RE_PATTERN_EXPLICIT_MAKEPAIR = re.compile(r'\\bmake_pair\\s*<')$/;"	v
_RE_PATTERN_IDENT	scripts/cpp_lint.py	/^_RE_PATTERN_IDENT = r'[_a-zA-Z]\\w*'  # =~ [[:alpha:]][[:alnum:]]*$/;"	v
_RE_PATTERN_INCLUDE	scripts/cpp_lint.py	/^_RE_PATTERN_INCLUDE = re.compile(r'^\\s*#\\s*include\\s*([<"])([^>"]*)[>"].*$')$/;"	v
_RE_PATTERN_INCLUDE_NEW_STYLE	scripts/cpp_lint.py	/^_RE_PATTERN_INCLUDE_NEW_STYLE = re.compile(r'#include +"[^\/]+\\.h"')$/;"	v
_RE_PATTERN_INVALID_INCREMENT	scripts/cpp_lint.py	/^_RE_PATTERN_INVALID_INCREMENT = re.compile($/;"	v
_RE_PATTERN_REF_PARAM	scripts/cpp_lint.py	/^_RE_PATTERN_REF_PARAM = re.compile($/;"	v
_RE_PATTERN_STRING	scripts/cpp_lint.py	/^_RE_PATTERN_STRING = re.compile(r'\\bstring\\b')$/;"	v
_RE_PATTERN_TODO	scripts/cpp_lint.py	/^_RE_PATTERN_TODO = re.compile(r'^\/\/(\\s*)TODO(\\(.+?\\))?:?(\\s|$)?')$/;"	v
_RE_PATTERN_TYPE	scripts/cpp_lint.py	/^_RE_PATTERN_TYPE = ($/;"	v
_RE_SUPPRESSION	scripts/cpp_lint.py	/^_RE_SUPPRESSION = re.compile(r'\\bNOLINT(_NEXT_LINE)?\\b(\\([^)]*\\))?')$/;"	v
_SECTION_NAMES	scripts/cpp_lint.py	/^  _SECTION_NAMES = {$/;"	v	class:_IncludeState
_SO	Makefile	/^MAT$(PROJECT)_SO := matlab\/+$(PROJECT)\/private\/$(PROJECT)_.$(MAT_SO_EXT)$/;"	m
_SO	Makefile	/^PY$(PROJECT)_SO := python\/$(PROJECT)\/_$(PROJECT).so$/;"	m
_SRC	Makefile	/^MAT$(PROJECT)_SRC := matlab\/+$(PROJECT)\/private\/$(PROJECT)_.cpp$/;"	m
_SRC	Makefile	/^PY$(PROJECT)_SRC := python\/$(PROJECT)\/_$(PROJECT).cpp$/;"	m
_SetCountingStyle	scripts/cpp_lint.py	/^def _SetCountingStyle(level):$/;"	f
_SetFilters	scripts/cpp_lint.py	/^def _SetFilters(filters):$/;"	f
_SetOutputFormat	scripts/cpp_lint.py	/^def _SetOutputFormat(output_format):$/;"	f
_SetVerboseLevel	scripts/cpp_lint.py	/^def _SetVerboseLevel(level):$/;"	f
_ShouldPrintError	scripts/cpp_lint.py	/^def _ShouldPrintError(category, confidence, linenum):$/;"	f
_TEST_TRIGGER	scripts/cpp_lint.py	/^  _TEST_TRIGGER = 400    # about 50% more than _NORMAL_TRIGGER.$/;"	v	class:_FunctionState
_TYPE_NAMES	scripts/cpp_lint.py	/^  _TYPE_NAMES = {$/;"	v	class:_IncludeState
_VerboseLevel	scripts/cpp_lint.py	/^def _VerboseLevel():$/;"	f
__check_input	python/caffe/io.py	/^    def __check_input(self, in_):$/;"	m	class:Transformer	file:
__getattr__	python/caffe/net_spec.py	/^            def __getattr__(self, param_name):$/;"	m	class:Parameters.__getattr__.Param	file:
__getattr__	python/caffe/net_spec.py	/^    def __getattr__(self, name):$/;"	m	class:Layers	file:
__getattr__	python/caffe/net_spec.py	/^    def __getattr__(self, name):$/;"	m	class:NetSpec	file:
__getattr__	python/caffe/net_spec.py	/^    def __getattr__(self, name):$/;"	m	class:Parameters	file:
__getitem__	python/caffe/net_spec.py	/^    def __getitem__(self, item):$/;"	m	class:NetSpec	file:
__init__	examples/pycaffe/layers/pascal_multilabel_datalayers.py	/^    def __init__(self, params, result):$/;"	m	class:BatchLoader
__init__	examples/pycaffe/tools.py	/^    def __init__(self, mean=[128, 128, 128]):$/;"	m	class:SimpleTransformer
__init__	examples/pycaffe/tools.py	/^    def __init__(self, testnet_prototxt_path="testnet.prototxt",$/;"	m	class:CaffeSolver
__init__	examples/web_demo/app.py	/^    def __init__(self, model_def_file, pretrained_model_file, mean_file,$/;"	m	class:ImagenetClassifier
__init__	python/caffe/classifier.py	/^    def __init__(self, model_file, pretrained_file, image_dims=None,$/;"	m	class:Classifier
__init__	python/caffe/detector.py	/^    def __init__(self, model_file, pretrained_file, mean=None,$/;"	m	class:Detector
__init__	python/caffe/io.py	/^    def __init__(self, inputs):$/;"	m	class:Transformer
__init__	python/caffe/net_spec.py	/^    def __init__(self):$/;"	m	class:NetSpec
__init__	python/caffe/net_spec.py	/^    def __init__(self, fn, n):$/;"	m	class:Top
__init__	python/caffe/net_spec.py	/^    def __init__(self, type_name, inputs, params):$/;"	m	class:Function
__init__	scripts/cpp_lint.py	/^  def __init__(self):$/;"	m	class:_CppLintState
__init__	scripts/cpp_lint.py	/^  def __init__(self):$/;"	m	class:_FunctionState
__init__	scripts/cpp_lint.py	/^  def __init__(self):$/;"	m	class:_IncludeState
__init__	scripts/cpp_lint.py	/^  def __init__(self):$/;"	m	class:_NestingState
__init__	scripts/cpp_lint.py	/^  def __init__(self, filename):$/;"	m	class:FileInfo
__init__	scripts/cpp_lint.py	/^  def __init__(self, lines):$/;"	m	class:CleansedLines
__init__	scripts/cpp_lint.py	/^  def __init__(self, name, class_or_struct, clean_lines, linenum):$/;"	m	class:_ClassInfo
__init__	scripts/cpp_lint.py	/^  def __init__(self, name, linenum):$/;"	m	class:_NamespaceInfo
__init__	scripts/cpp_lint.py	/^  def __init__(self, seen_open_brace):$/;"	m	class:_BlockInfo
__init__	scripts/cpp_lint.py	/^  def __init__(self, stack_before_if):$/;"	m	class:_PreprocessorInfo
__setattr__	python/caffe/net_spec.py	/^    def __setattr__(self, name, value):$/;"	m	class:NetSpec	file:
__setitem__	python/caffe/net_spec.py	/^    def __setitem__(self, key, value):$/;"	m	class:NetSpec	file:
__version__	python/caffe/__init__.py	/^from ._caffe import __version__$/;"	i
_cpplint_state	scripts/cpp_lint.py	/^_cpplint_state = _CppLintState()$/;"	v
_error_suppressions	scripts/cpp_lint.py	/^_error_suppressions = {}$/;"	v
_get_name	python/caffe/net_spec.py	/^    def _get_name(self, names, autonames):$/;"	m	class:Function
_get_top_name	python/caffe/net_spec.py	/^    def _get_top_name(self, top, names, autonames):$/;"	m	class:Function
_line_length	scripts/cpp_lint.py	/^_line_length = 80$/;"	v
_param_names	python/caffe/net_spec.py	/^_param_names = param_name_dict()$/;"	v
_re_pattern_algorithm_header	scripts/cpp_lint.py	/^_re_pattern_algorithm_header = []$/;"	v
_re_pattern_templates	scripts/cpp_lint.py	/^_re_pattern_templates = []$/;"	v
_regexp_compile_cache	scripts/cpp_lint.py	/^_regexp_compile_cache = {}$/;"	v
_root	scripts/cpp_lint.py	/^_root = None$/;"	v
_to_proto	python/caffe/net_spec.py	/^    def _to_proto(self, layers, names, autonames):$/;"	m	class:Function
_to_proto	python/caffe/net_spec.py	/^    def _to_proto(self, layers, names, autonames):$/;"	m	class:Top
_valid_extensions	scripts/cpp_lint.py	/^_valid_extensions = set(['cc', 'h', 'cpp', 'hpp', 'cu', 'cuh'])$/;"	v
action_request_function_	include/caffe/solver.hpp	/^  ActionCallback action_request_function_;$/;"	m	class:caffe::Solver
activ_desc_	include/caffe/layers/cudnn_relu_layer.hpp	/^  cudnnActivationDescriptor_t activ_desc_;$/;"	m	class:caffe::CuDNNReLULayer
activ_desc_	include/caffe/layers/cudnn_sigmoid_layer.hpp	/^  cudnnActivationDescriptor_t activ_desc_;$/;"	m	class:caffe::CuDNNSigmoidLayer
activ_desc_	include/caffe/layers/cudnn_tanh_layer.hpp	/^  cudnnActivationDescriptor_t activ_desc_;$/;"	m	class:caffe::CuDNNTanHLayer
ad_hoc_test_result	src/gtest/gtest-all.cpp	/^  const TestResult* ad_hoc_test_result() const { return &ad_hoc_test_result_; }$/;"	f	class:testing::internal::UnitTestImpl
ad_hoc_test_result_	src/gtest/gtest-all.cpp	/^  TestResult ad_hoc_test_result_;$/;"	m	class:testing::internal::UnitTestImpl	file:
add_after_backward	include/caffe/net.hpp	/^  void add_after_backward(Callback* value) {$/;"	f	class:caffe::Net
add_after_forward	include/caffe/net.hpp	/^  void add_after_forward(Callback* value) {$/;"	f	class:caffe::Net
add_before_backward	include/caffe/net.hpp	/^  void add_before_backward(Callback* value) {$/;"	f	class:caffe::Net
add_before_forward	include/caffe/net.hpp	/^  void add_before_forward(Callback* value) {$/;"	f	class:caffe::Net
add_callback	include/caffe/solver.hpp	/^  void add_callback(Callback* value) {$/;"	f	class:caffe::Solver
add_from_file	examples/pycaffe/tools.py	/^    def add_from_file(self, filepath):$/;"	m	class:CaffeSolver
added_data_	include/caffe/layers/memory_data_layer.hpp	/^  Blob<Dtype> added_data_;$/;"	m	class:caffe::MemoryDataLayer
added_label_	include/caffe/layers/memory_data_layer.hpp	/^  Blob<Dtype> added_label_;$/;"	m	class:caffe::MemoryDataLayer
after_backward	include/caffe/net.hpp	/^  const vector<Callback*>& after_backward() const { return after_backward_; }$/;"	f	class:caffe::Net
after_backward_	include/caffe/net.hpp	/^  vector<Callback*> after_backward_;$/;"	m	class:caffe::Net
after_forward	include/caffe/net.hpp	/^  const vector<Callback*>& after_forward() const { return after_forward_; }$/;"	f	class:caffe::Net
after_forward_	include/caffe/net.hpp	/^  vector<Callback*> after_forward_;$/;"	m	class:caffe::Net
allowed_file	examples/web_demo/app.py	/^def allowed_file(filename):$/;"	f
alpha_	include/caffe/layers/cudnn_lcn_layer.hpp	/^  Dtype alpha_, beta_, k_;$/;"	m	class:caffe::CuDNNLCNLayer
alpha_	include/caffe/layers/cudnn_lrn_layer.hpp	/^  Dtype alpha_, beta_, k_;$/;"	m	class:caffe::CuDNNLRNLayer
alpha_	include/caffe/layers/lrn_layer.hpp	/^  Dtype alpha_;$/;"	m	class:caffe::LRNLayer
already_hooked_up	src/caffe/util/signal_handler.cpp	/^  static bool already_hooked_up = false;$/;"	m	namespace:__anon1	file:
also_run_disabled_tests_	src/gtest/gtest-all.cpp	/^  bool also_run_disabled_tests_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
anon_lenet	python/caffe/test/test_net_spec.py	/^def anon_lenet(batch_size):$/;"	f
app	examples/web_demo/app.py	/^app = flask.Flask(__name__)$/;"	v
apply	python/caffe/_caffe.cpp	/^struct NdarrayConverterGenerator::apply<Dtype*> {$/;"	s	class:caffe::NdarrayConverterGenerator	file:
apply_buffers	src/caffe/parallel.cpp	/^static void apply_buffers(const vector<Blob<Dtype>*>& blobs,$/;"	f	namespace:caffe
apply_orientation	examples/web_demo/exifutil.py	/^def apply_orientation(im, orientation):$/;"	f
argparse	examples/finetune_flickr_style/assemble_data.py	/^import argparse$/;"	i
argparse	python/classify.py	/^import argparse$/;"	i
argparse	python/detect.py	/^import argparse$/;"	i
argparse	python/train.py	/^    import argparse$/;"	i
argparse	scripts/download_model_binary.py	/^import argparse$/;"	i
argparse	tools/extra/parse_log.py	/^import argparse$/;"	i
argparse	tools/extra/summarize.py	/^import argparse$/;"	i
args	examples/finetune_flickr_style/assemble_data.py	/^    args = parser.parse_args()$/;"	v
args	python/train.py	/^                    args=(solver, snapshot, gpus, timing, uid, rank))$/;"	v
args	python/train.py	/^    args = parser.parse_args()$/;"	v
args_	src/gtest/gtest-all.cpp	/^  std::vector<char*> args_;$/;"	m	class:testing::internal::Arguments	file:
argv	src/gtest/gtest-all.cpp	/^  char* const* argv;  \/\/ Command-line arguments for the child's call to exec$/;"	m	struct:testing::internal::ExecDeathTestArgs	file:
array_	src/gtest/gtest.h	/^  const Element* array_;$/;"	m	class:testing::internal::NativeArray
array_	src/gtest/gtest.h	/^  std::vector<TestPartResult> array_;$/;"	m	class:testing::TestPartResultArray
array_to_blobproto	python/caffe/io.py	/^def array_to_blobproto(arr, diff=None):$/;"	f
array_to_datum	python/caffe/io.py	/^def array_to_datum(arr, label=None):$/;"	f
arraylist_to_blobprotovector_str	python/caffe/io.py	/^def arraylist_to_blobprotovector_str(arraylist):$/;"	f
assign_proto	python/caffe/net_spec.py	/^def assign_proto(proto, name, val):$/;"	f
asum_data	src/caffe/blob.cpp	/^Dtype Blob<Dtype>::asum_data() const {$/;"	f	class:caffe::Blob
asum_data	src/caffe/blob.cpp	/^template <> int Blob<int>::asum_data() const {$/;"	f	class:caffe::Blob
asum_data	src/caffe/blob.cpp	/^template <> unsigned int Blob<unsigned int>::asum_data() const {$/;"	f	class:caffe::Blob
asum_diff	src/caffe/blob.cpp	/^Dtype Blob<Dtype>::asum_diff() const {$/;"	f	class:caffe::Blob
asum_diff	src/caffe/blob.cpp	/^template <> int Blob<int>::asum_diff() const {$/;"	f	class:caffe::Blob
asum_diff	src/caffe/blob.cpp	/^template <> unsigned int Blob<unsigned int>::asum_diff() const {$/;"	f	class:caffe::Blob
async_gpu_push	src/caffe/syncedmem.cpp	/^void SyncedMemory::async_gpu_push(const cudaStream_t& stream) {$/;"	f	class:caffe::SyncedMemory
axis_	include/caffe/layers/argmax_layer.hpp	/^  int axis_;$/;"	m	class:caffe::ArgMaxLayer
axis_	include/caffe/layers/reduction_layer.hpp	/^  int axis_;$/;"	m	class:caffe::ReductionLayer
axis_	include/caffe/layers/scale_layer.hpp	/^  int axis_;$/;"	m	class:caffe::ScaleLayer
axis_	include/caffe/layers/tile_layer.hpp	/^  unsigned int axis_, tiles_, outer_dim_, inner_dim_;$/;"	m	class:caffe::TileLayer
backend	src/caffe/test/test_db.cpp	/^  static DataParameter_DB backend;$/;"	m	struct:caffe::TypeLMDB	file:
backend	src/caffe/test/test_db.cpp	/^  static DataParameter_DB backend;$/;"	m	struct:caffe::TypeLevelDB	file:
backend	src/caffe/test/test_db.cpp	/^DataParameter_DB TypeLMDB::backend = DataParameter_DB_LMDB;$/;"	m	class:caffe::TypeLMDB	file:
backend	src/caffe/test/test_db.cpp	/^DataParameter_DB TypeLevelDB::backend = DataParameter_DB_LEVELDB;$/;"	m	class:caffe::TypeLevelDB	file:
backend_	src/caffe/test/test_data_layer.cpp	/^  DataParameter_DB backend_;$/;"	m	class:caffe::DataLayerTest	file:
backend_	src/caffe/test/test_db.cpp	/^  DataParameter_DB backend_;$/;"	m	class:caffe::DBTest	file:
backward	examples/pycaffe/layers/pascal_multilabel_datalayers.py	/^    def backward(self, top, propagate_down, bottom):$/;"	m	class:PascalMultilabelDataLayerSync
backward	examples/pycaffe/layers/pyloss.py	/^    def backward(self, top, propagate_down, bottom):$/;"	m	class:EuclideanLossLayer
backward	python/caffe/test/test_python_layer.py	/^    def backward(self, top, propagate_down, bottom):$/;"	m	class:ParameterLayer
backward	python/caffe/test/test_python_layer.py	/^    def backward(self, top, propagate_down, bottom):$/;"	m	class:SimpleLayer
backward	python/caffe/test/test_python_layer_with_param_str.py	/^    def backward(self, top, propagate_down, bottom):$/;"	m	class:SimpleParamLayer
backward_buff_	include/caffe/layers/prelu_layer.hpp	/^  Blob<Dtype> backward_buff_;  \/\/ temporary buffer for backward computation$/;"	m	class:caffe::PReLULayer
backward_cpu_bias	src/caffe/layers/base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::backward_cpu_bias(Dtype* bias,$/;"	f	class:caffe::BaseConvolutionLayer
backward_cpu_gemm	src/caffe/layers/base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::backward_cpu_gemm(const Dtype* output,$/;"	f	class:caffe::BaseConvolutionLayer
backward_gpu_bias	src/caffe/layers/base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::backward_gpu_bias(Dtype* bias,$/;"	f	class:caffe::BaseConvolutionLayer
backward_gpu_gemm	src/caffe/layers/base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::backward_gpu_gemm(const Dtype* output,$/;"	f	class:caffe::BaseConvolutionLayer
backward_num_scale_	include/caffe/layers/log_layer.hpp	/^  Dtype backward_num_scale_;$/;"	m	class:caffe::LogLayer
barrier	src/caffe/parallel.cpp	/^boost::barrier* NCCL<Dtype>::barrier() {$/;"	f	class:caffe::NCCL
barrier_	include/caffe/parallel.hpp	/^  boost::barrier* barrier_;$/;"	m	class:caffe::NCCL
barrier_	src/caffe/parallel.cpp	/^  boost::barrier* barrier_;$/;"	m	class:caffe::Worker	file:
base_	src/gtest/gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
base_	src/gtest/gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
base_	src/gtest/gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
base_	src/gtest/gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
base_	src/gtest/gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
base_	src/gtest/gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
base_	src/gtest/gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
base_	src/gtest/gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
base_	src/gtest/gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
base_	src/gtest/gtest.h	/^    const ParamGeneratorInterface<T>* const base_;$/;"	m	class:testing::internal::RangeGenerator::Iterator
base_	src/gtest/gtest.h	/^    const ParamGeneratorInterface<T>* const base_;$/;"	m	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
base_scale_	include/caffe/layers/log_layer.hpp	/^  Dtype base_scale_;$/;"	m	class:caffe::LogLayer
basic_manipulator	src/gtest/gtest.h	/^      ::std::ostream& (*basic_manipulator)(::std::ostream& stream)) {$/;"	f	class:testing::AssertionResult
batch_	include/caffe/util/db_leveldb.hpp	/^  leveldb::WriteBatch batch_;$/;"	m	class:caffe::db::LevelDBTransaction
batch_size	include/caffe/layers/memory_data_layer.hpp	/^  int batch_size() { return batch_size_; }$/;"	f	class:caffe::MemoryDataLayer
batch_size_	include/caffe/layers/memory_data_layer.hpp	/^  int batch_size_, channels_, height_, width_, size_;$/;"	m	class:caffe::MemoryDataLayer
batch_size_	src/caffe/test/test_memory_data_layer.cpp	/^  int batch_size_;$/;"	m	class:caffe::MemoryDataLayerTest	file:
batch_sum_multiplier_	include/caffe/layers/batch_norm_layer.hpp	/^  Blob<Dtype> batch_sum_multiplier_;$/;"	m	class:caffe::BatchNormLayer
batches_	src/caffe/test/test_memory_data_layer.cpp	/^  int batches_;$/;"	m	class:caffe::MemoryDataLayerTest	file:
before_backward	include/caffe/net.hpp	/^  const vector<Callback*>& before_backward() const { return before_backward_; }$/;"	f	class:caffe::Net
before_backward_	include/caffe/net.hpp	/^  vector<Callback*> before_backward_;$/;"	m	class:caffe::Net
before_forward	include/caffe/net.hpp	/^  const vector<Callback*>& before_forward() const { return before_forward_; }$/;"	f	class:caffe::Net
before_forward_	include/caffe/net.hpp	/^  vector<Callback*> before_forward_;$/;"	m	class:caffe::Net
begin	src/gtest/gtest.h	/^  const_iterator begin() const { return array_; }$/;"	f	class:testing::internal::NativeArray
begin	src/gtest/gtest.h	/^  iterator begin() const { return iterator(impl_->Begin()); }$/;"	f	class:testing::internal::ParamGenerator
begin10_	src/gtest/gtest.h	/^    const typename ParamGenerator<T10>::iterator begin10_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin1_	src/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin1_	src/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
begin1_	src/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
begin1_	src/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
begin1_	src/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
begin1_	src/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
begin1_	src/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
begin1_	src/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin1_	src/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin2_	src/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin2_	src/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
begin2_	src/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
begin2_	src/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
begin2_	src/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
begin2_	src/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
begin2_	src/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
begin2_	src/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin2_	src/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin3_	src/gtest/gtest.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin3_	src/gtest/gtest.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
begin3_	src/gtest/gtest.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
begin3_	src/gtest/gtest.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
begin3_	src/gtest/gtest.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
begin3_	src/gtest/gtest.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
begin3_	src/gtest/gtest.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin3_	src/gtest/gtest.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin4_	src/gtest/gtest.h	/^    const typename ParamGenerator<T4>::iterator begin4_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin4_	src/gtest/gtest.h	/^    const typename ParamGenerator<T4>::iterator begin4_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
begin4_	src/gtest/gtest.h	/^    const typename ParamGenerator<T4>::iterator begin4_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
begin4_	src/gtest/gtest.h	/^    const typename ParamGenerator<T4>::iterator begin4_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
begin4_	src/gtest/gtest.h	/^    const typename ParamGenerator<T4>::iterator begin4_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
begin4_	src/gtest/gtest.h	/^    const typename ParamGenerator<T4>::iterator begin4_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin4_	src/gtest/gtest.h	/^    const typename ParamGenerator<T4>::iterator begin4_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin5_	src/gtest/gtest.h	/^    const typename ParamGenerator<T5>::iterator begin5_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin5_	src/gtest/gtest.h	/^    const typename ParamGenerator<T5>::iterator begin5_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
begin5_	src/gtest/gtest.h	/^    const typename ParamGenerator<T5>::iterator begin5_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
begin5_	src/gtest/gtest.h	/^    const typename ParamGenerator<T5>::iterator begin5_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
begin5_	src/gtest/gtest.h	/^    const typename ParamGenerator<T5>::iterator begin5_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin5_	src/gtest/gtest.h	/^    const typename ParamGenerator<T5>::iterator begin5_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin6_	src/gtest/gtest.h	/^    const typename ParamGenerator<T6>::iterator begin6_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin6_	src/gtest/gtest.h	/^    const typename ParamGenerator<T6>::iterator begin6_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
begin6_	src/gtest/gtest.h	/^    const typename ParamGenerator<T6>::iterator begin6_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
begin6_	src/gtest/gtest.h	/^    const typename ParamGenerator<T6>::iterator begin6_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin6_	src/gtest/gtest.h	/^    const typename ParamGenerator<T6>::iterator begin6_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin7_	src/gtest/gtest.h	/^    const typename ParamGenerator<T7>::iterator begin7_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin7_	src/gtest/gtest.h	/^    const typename ParamGenerator<T7>::iterator begin7_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
begin7_	src/gtest/gtest.h	/^    const typename ParamGenerator<T7>::iterator begin7_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin7_	src/gtest/gtest.h	/^    const typename ParamGenerator<T7>::iterator begin7_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin8_	src/gtest/gtest.h	/^    const typename ParamGenerator<T8>::iterator begin8_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin8_	src/gtest/gtest.h	/^    const typename ParamGenerator<T8>::iterator begin8_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin8_	src/gtest/gtest.h	/^    const typename ParamGenerator<T8>::iterator begin8_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin9_	src/gtest/gtest.h	/^    const typename ParamGenerator<T9>::iterator begin9_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin9_	src/gtest/gtest.h	/^    const typename ParamGenerator<T9>::iterator begin9_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin_	src/gtest/gtest.h	/^  const T begin_;$/;"	m	class:testing::internal::RangeGenerator
beta_	include/caffe/layers/cudnn_lcn_layer.hpp	/^  Dtype alpha_, beta_, k_;$/;"	m	class:caffe::CuDNNLCNLayer
beta_	include/caffe/layers/cudnn_lrn_layer.hpp	/^  Dtype alpha_, beta_, k_;$/;"	m	class:caffe::CuDNNLRNLayer
beta_	include/caffe/layers/lrn_layer.hpp	/^  Dtype beta_;$/;"	m	class:caffe::LRNLayer
bg_windows_	include/caffe/layers/window_data_layer.hpp	/^  vector<vector<float> > bg_windows_;$/;"	m	class:caffe::WindowDataLayer
bias_bottom_vec_	include/caffe/layers/scale_layer.hpp	/^  vector<Blob<Dtype>*> bias_bottom_vec_;$/;"	m	class:caffe::ScaleLayer
bias_desc_	include/caffe/layers/cudnn_conv_layer.hpp	/^  cudnnTensorDescriptor_t    bias_desc_;$/;"	m	class:caffe::CuDNNConvolutionLayer
bias_dim_	include/caffe/layers/bias_layer.hpp	/^  int outer_dim_, bias_dim_, inner_dim_, dim_;$/;"	m	class:caffe::BiasLayer
bias_layer_	include/caffe/layers/scale_layer.hpp	/^  shared_ptr<Layer<Dtype> > bias_layer_;$/;"	m	class:caffe::ScaleLayer
bias_multiplier_	include/caffe/layers/base_conv_layer.hpp	/^  Blob<Dtype> bias_multiplier_;$/;"	m	class:caffe::BaseConvolutionLayer
bias_multiplier_	include/caffe/layers/bias_layer.hpp	/^  Blob<Dtype> bias_multiplier_;$/;"	m	class:caffe::BiasLayer
bias_multiplier_	include/caffe/layers/embed_layer.hpp	/^  Blob<Dtype> bias_multiplier_;$/;"	m	class:caffe::EmbedLayer
bias_multiplier_	include/caffe/layers/inner_product_layer.hpp	/^  Blob<Dtype> bias_multiplier_;$/;"	m	class:caffe::InnerProductLayer
bias_offset_	include/caffe/layers/cudnn_conv_layer.hpp	/^  int bottom_offset_, top_offset_, bias_offset_;$/;"	m	class:caffe::CuDNNConvolutionLayer
bias_param_id_	include/caffe/layers/scale_layer.hpp	/^  int bias_param_id_;$/;"	m	class:caffe::ScaleLayer
bias_propagate_down_	include/caffe/layers/scale_layer.hpp	/^  vector<bool> bias_propagate_down_;$/;"	m	class:caffe::ScaleLayer
bias_term_	include/caffe/layers/base_conv_layer.hpp	/^  bool bias_term_;$/;"	m	class:caffe::BaseConvolutionLayer
bias_term_	include/caffe/layers/embed_layer.hpp	/^  bool bias_term_;$/;"	m	class:caffe::EmbedLayer
bias_term_	include/caffe/layers/inner_product_layer.hpp	/^  bool bias_term_;$/;"	m	class:caffe::InnerProductLayer
bits	src/gtest/gtest.h	/^  const Bits &bits() const { return u_.bits_; }$/;"	f	class:testing::internal::FloatingPoint
bits_	src/gtest/gtest.h	/^    Bits bits_;      \/\/ The bits that represent the number.$/;"	m	union:testing::internal::FloatingPoint::FloatingPointUnion
blob_	src/caffe/test/test_blob.cpp	/^  Blob<Dtype>* const blob_;$/;"	m	class:caffe::BlobMathTest	file:
blob_	src/caffe/test/test_blob.cpp	/^  Blob<Dtype>* const blob_;$/;"	m	class:caffe::BlobSimpleTest	file:
blob_	src/caffe/test/test_filler.cpp	/^  Blob<Dtype>* const blob_;$/;"	m	class:caffe::ConstantFillerTest	file:
blob_	src/caffe/test/test_filler.cpp	/^  Blob<Dtype>* const blob_;$/;"	m	class:caffe::GaussianFillerTest	file:
blob_	src/caffe/test/test_filler.cpp	/^  Blob<Dtype>* const blob_;$/;"	m	class:caffe::MSRAFillerTest	file:
blob_	src/caffe/test/test_filler.cpp	/^  Blob<Dtype>* const blob_;$/;"	m	class:caffe::PositiveUnitballFillerTest	file:
blob_	src/caffe/test/test_filler.cpp	/^  Blob<Dtype>* const blob_;$/;"	m	class:caffe::UniformFillerTest	file:
blob_	src/caffe/test/test_filler.cpp	/^  Blob<Dtype>* const blob_;$/;"	m	class:caffe::XavierFillerTest	file:
blob_bottom_	src/caffe/test/test_argmax_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::ArgMaxLayerTest	file:
blob_bottom_	src/caffe/test/test_batch_norm_layer.cpp	/^    Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::BatchNormLayerTest	file:
blob_bottom_	src/caffe/test/test_batch_reindex_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::BatchReindexLayerTest	file:
blob_bottom_	src/caffe/test/test_bias_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::BiasLayerTest	file:
blob_bottom_	src/caffe/test/test_convolution_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::ConvolutionLayerTest	file:
blob_bottom_	src/caffe/test/test_convolution_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::CuDNNConvolutionLayerTest	file:
blob_bottom_	src/caffe/test/test_deconvolution_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::DeconvolutionLayerTest	file:
blob_bottom_	src/caffe/test/test_embed_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::EmbedLayerTest	file:
blob_bottom_	src/caffe/test/test_flatten_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::FlattenLayerTest	file:
blob_bottom_	src/caffe/test/test_im2col_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::Im2colLayerTest	file:
blob_bottom_	src/caffe/test/test_inner_product_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::InnerProductLayerTest	file:
blob_bottom_	src/caffe/test/test_lrn_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::CuDNNLRNLayerTest	file:
blob_bottom_	src/caffe/test/test_lrn_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::LRNLayerTest	file:
blob_bottom_	src/caffe/test/test_lstm_layer.cpp	/^  Blob<Dtype> blob_bottom_;$/;"	m	class:caffe::LSTMLayerTest	file:
blob_bottom_	src/caffe/test/test_math_functions.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::MathFunctionsTest	file:
blob_bottom_	src/caffe/test/test_maxpool_dropout_layers.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::MaxPoolingDropoutTest	file:
blob_bottom_	src/caffe/test/test_mvn_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::MVNLayerTest	file:
blob_bottom_	src/caffe/test/test_neuron_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::CuDNNNeuronLayerTest	file:
blob_bottom_	src/caffe/test/test_neuron_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::NeuronLayerTest	file:
blob_bottom_	src/caffe/test/test_pooling_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::CuDNNPoolingLayerTest	file:
blob_bottom_	src/caffe/test/test_pooling_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::PoolingLayerTest	file:
blob_bottom_	src/caffe/test/test_power_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::PowerLayerTest	file:
blob_bottom_	src/caffe/test/test_reduction_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::ReductionLayerTest	file:
blob_bottom_	src/caffe/test/test_reshape_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::ReshapeLayerTest	file:
blob_bottom_	src/caffe/test/test_rnn_layer.cpp	/^  Blob<Dtype> blob_bottom_;$/;"	m	class:caffe::RNNLayerTest	file:
blob_bottom_	src/caffe/test/test_scale_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::ScaleLayerTest	file:
blob_bottom_	src/caffe/test/test_slice_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::SliceLayerTest	file:
blob_bottom_	src/caffe/test/test_softmax_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::CuDNNSoftmaxLayerTest	file:
blob_bottom_	src/caffe/test/test_softmax_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::SoftmaxLayerTest	file:
blob_bottom_	src/caffe/test/test_split_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::SplitLayerTest	file:
blob_bottom_	src/caffe/test/test_spp_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::SPPLayerTest	file:
blob_bottom_	src/caffe/test/test_stochastic_pooling.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::StochasticPoolingLayerTest	file:
blob_bottom_	src/caffe/test/test_tanh_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::TanHLayerTest	file:
blob_bottom_	src/caffe/test/test_threshold_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::ThresholdLayerTest	file:
blob_bottom_	src/caffe/test/test_tile_layer.cpp	/^  Blob<Dtype>* const blob_bottom_;$/;"	m	class:caffe::TileLayerTest	file:
blob_bottom_0_	src/caffe/test/test_concat_layer.cpp	/^  Blob<Dtype>* const blob_bottom_0_;$/;"	m	class:caffe::ConcatLayerTest	file:
blob_bottom_0_	src/caffe/test/test_crop_layer.cpp	/^  Blob<Dtype>* const blob_bottom_0_;$/;"	m	class:caffe::CropLayerTest	file:
blob_bottom_1_	src/caffe/test/test_concat_layer.cpp	/^  Blob<Dtype>* const blob_bottom_1_;$/;"	m	class:caffe::ConcatLayerTest	file:
blob_bottom_1_	src/caffe/test/test_crop_layer.cpp	/^  Blob<Dtype>* const blob_bottom_1_;$/;"	m	class:caffe::CropLayerTest	file:
blob_bottom_2_	src/caffe/test/test_concat_layer.cpp	/^  Blob<Dtype>* const blob_bottom_2_;$/;"	m	class:caffe::ConcatLayerTest	file:
blob_bottom_2_	src/caffe/test/test_convolution_layer.cpp	/^  Blob<Dtype>* const blob_bottom_2_;$/;"	m	class:caffe::ConvolutionLayerTest	file:
blob_bottom_2_	src/caffe/test/test_convolution_layer.cpp	/^  Blob<Dtype>* const blob_bottom_2_;$/;"	m	class:caffe::CuDNNConvolutionLayerTest	file:
blob_bottom_2_	src/caffe/test/test_deconvolution_layer.cpp	/^  Blob<Dtype>* const blob_bottom_2_;$/;"	m	class:caffe::DeconvolutionLayerTest	file:
blob_bottom_2_	src/caffe/test/test_spp_layer.cpp	/^  Blob<Dtype>* const blob_bottom_2_;$/;"	m	class:caffe::SPPLayerTest	file:
blob_bottom_3_	src/caffe/test/test_spp_layer.cpp	/^  Blob<Dtype>* const blob_bottom_3_;$/;"	m	class:caffe::SPPLayerTest	file:
blob_bottom_a_	src/caffe/test/test_eltwise_layer.cpp	/^  Blob<Dtype>* const blob_bottom_a_;$/;"	m	class:caffe::EltwiseLayerTest	file:
blob_bottom_b_	src/caffe/test/test_eltwise_layer.cpp	/^  Blob<Dtype>* const blob_bottom_b_;$/;"	m	class:caffe::EltwiseLayerTest	file:
blob_bottom_bias_	src/caffe/test/test_bias_layer.cpp	/^  Blob<Dtype>* const blob_bottom_bias_;$/;"	m	class:caffe::BiasLayerTest	file:
blob_bottom_broadcast_0_	src/caffe/test/test_bias_layer.cpp	/^  Blob<Dtype>* const blob_bottom_broadcast_0_;$/;"	m	class:caffe::BiasLayerTest	file:
blob_bottom_broadcast_0_	src/caffe/test/test_scale_layer.cpp	/^  Blob<Dtype>* const blob_bottom_broadcast_0_;$/;"	m	class:caffe::ScaleLayerTest	file:
blob_bottom_broadcast_1_	src/caffe/test/test_bias_layer.cpp	/^  Blob<Dtype>* const blob_bottom_broadcast_1_;$/;"	m	class:caffe::BiasLayerTest	file:
blob_bottom_broadcast_1_	src/caffe/test/test_scale_layer.cpp	/^  Blob<Dtype>* const blob_bottom_broadcast_1_;$/;"	m	class:caffe::ScaleLayerTest	file:
blob_bottom_broadcast_2_	src/caffe/test/test_bias_layer.cpp	/^  Blob<Dtype>* const blob_bottom_broadcast_2_;$/;"	m	class:caffe::BiasLayerTest	file:
blob_bottom_broadcast_2_	src/caffe/test/test_scale_layer.cpp	/^  Blob<Dtype>* const blob_bottom_broadcast_2_;$/;"	m	class:caffe::ScaleLayerTest	file:
blob_bottom_c_	src/caffe/test/test_eltwise_layer.cpp	/^  Blob<Dtype>* const blob_bottom_c_;$/;"	m	class:caffe::EltwiseLayerTest	file:
blob_bottom_cont_	src/caffe/test/test_lstm_layer.cpp	/^  Blob<Dtype> blob_bottom_cont_;$/;"	m	class:caffe::LSTMLayerTest	file:
blob_bottom_cont_	src/caffe/test/test_rnn_layer.cpp	/^  Blob<Dtype> blob_bottom_cont_;$/;"	m	class:caffe::RNNLayerTest	file:
blob_bottom_data_	src/caffe/test/test_accuracy_layer.cpp	/^  Blob<Dtype>* const blob_bottom_data_;$/;"	m	class:caffe::AccuracyLayerTest	file:
blob_bottom_data_	src/caffe/test/test_euclidean_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_data_;$/;"	m	class:caffe::EuclideanLossLayerTest	file:
blob_bottom_data_	src/caffe/test/test_filter_layer.cpp	/^  Blob<Dtype>* const blob_bottom_data_;$/;"	m	class:caffe::FilterLayerTest	file:
blob_bottom_data_	src/caffe/test/test_hinge_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_data_;$/;"	m	class:caffe::HingeLossLayerTest	file:
blob_bottom_data_	src/caffe/test/test_infogain_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_data_;$/;"	m	class:caffe::InfogainLossLayerTest	file:
blob_bottom_data_	src/caffe/test/test_multinomial_logistic_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_data_;$/;"	m	class:caffe::MultinomialLogisticLossLayerTest	file:
blob_bottom_data_	src/caffe/test/test_sigmoid_cross_entropy_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_data_;$/;"	m	class:caffe::SigmoidCrossEntropyLossLayerTest	file:
blob_bottom_data_	src/caffe/test/test_softmax_with_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_data_;$/;"	m	class:caffe::SoftmaxWithLossLayerTest	file:
blob_bottom_data_i_	src/caffe/test/test_contrastive_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_data_i_;$/;"	m	class:caffe::ContrastiveLossLayerTest	file:
blob_bottom_data_j_	src/caffe/test/test_contrastive_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_data_j_;$/;"	m	class:caffe::ContrastiveLossLayerTest	file:
blob_bottom_eltwise_	src/caffe/test/test_bias_layer.cpp	/^  Blob<Dtype>* const blob_bottom_eltwise_;$/;"	m	class:caffe::BiasLayerTest	file:
blob_bottom_eltwise_	src/caffe/test/test_scale_layer.cpp	/^  Blob<Dtype>* const blob_bottom_eltwise_;$/;"	m	class:caffe::ScaleLayerTest	file:
blob_bottom_infogain_	src/caffe/test/test_infogain_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_infogain_;$/;"	m	class:caffe::InfogainLossLayerTest	file:
blob_bottom_label_	src/caffe/test/test_accuracy_layer.cpp	/^  Blob<Dtype>* const blob_bottom_label_;$/;"	m	class:caffe::AccuracyLayerTest	file:
blob_bottom_label_	src/caffe/test/test_euclidean_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_label_;$/;"	m	class:caffe::EuclideanLossLayerTest	file:
blob_bottom_label_	src/caffe/test/test_hinge_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_label_;$/;"	m	class:caffe::HingeLossLayerTest	file:
blob_bottom_label_	src/caffe/test/test_infogain_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_label_;$/;"	m	class:caffe::InfogainLossLayerTest	file:
blob_bottom_label_	src/caffe/test/test_multinomial_logistic_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_label_;$/;"	m	class:caffe::MultinomialLogisticLossLayerTest	file:
blob_bottom_label_	src/caffe/test/test_softmax_with_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_label_;$/;"	m	class:caffe::SoftmaxWithLossLayerTest	file:
blob_bottom_labels_	src/caffe/test/test_filter_layer.cpp	/^  Blob<Dtype>* const blob_bottom_labels_;$/;"	m	class:caffe::FilterLayerTest	file:
blob_bottom_nobatch_	src/caffe/test/test_inner_product_layer.cpp	/^  Blob<Dtype>* const blob_bottom_nobatch_;$/;"	m	class:caffe::InnerProductLayerTest	file:
blob_bottom_permute_	src/caffe/test/test_batch_reindex_layer.cpp	/^  Blob<Dtype>* const blob_bottom_permute_;$/;"	m	class:caffe::BatchReindexLayerTest	file:
blob_bottom_scale_	src/caffe/test/test_scale_layer.cpp	/^  Blob<Dtype>* const blob_bottom_scale_;$/;"	m	class:caffe::ScaleLayerTest	file:
blob_bottom_selector_	src/caffe/test/test_filter_layer.cpp	/^  Blob<Dtype>* const blob_bottom_selector_;$/;"	m	class:caffe::FilterLayerTest	file:
blob_bottom_static_	src/caffe/test/test_lstm_layer.cpp	/^  Blob<Dtype> blob_bottom_static_;$/;"	m	class:caffe::LSTMLayerTest	file:
blob_bottom_static_	src/caffe/test/test_rnn_layer.cpp	/^  Blob<Dtype> blob_bottom_static_;$/;"	m	class:caffe::RNNLayerTest	file:
blob_bottom_targets_	src/caffe/test/test_sigmoid_cross_entropy_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_targets_;$/;"	m	class:caffe::SigmoidCrossEntropyLossLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_accuracy_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::AccuracyLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_argmax_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::ArgMaxLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_batch_norm_layer.cpp	/^    vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::BatchNormLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_batch_reindex_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::BatchReindexLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_bias_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::BiasLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_contrastive_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::ContrastiveLossLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_convolution_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::ConvolutionLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_convolution_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::CuDNNConvolutionLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_crop_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::CropLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_data_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::DataLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_deconvolution_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::DeconvolutionLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_dummy_data_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::DummyDataLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_eltwise_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::EltwiseLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_embed_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::EmbedLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_euclidean_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::EuclideanLossLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_filter_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::FilterLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_flatten_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::FlattenLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_hdf5_output_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::HDF5OutputLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_hdf5data_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::HDF5DataLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_hinge_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::HingeLossLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_im2col_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::Im2colLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_image_data_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::ImageDataLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_infogain_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::InfogainLossLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_inner_product_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::InnerProductLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_lrn_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::CuDNNLRNLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_lrn_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::LRNLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_lstm_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::LSTMLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_maxpool_dropout_layers.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::MaxPoolingDropoutTest	file:
blob_bottom_vec_	src/caffe/test/test_memory_data_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::MemoryDataLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_multinomial_logistic_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::MultinomialLogisticLossLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_mvn_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::MVNLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_neuron_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::CuDNNNeuronLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_neuron_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::NeuronLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_pooling_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::CuDNNPoolingLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_pooling_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::PoolingLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_power_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::PowerLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_reduction_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::ReductionLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_reshape_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::ReshapeLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_rnn_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::RNNLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_scale_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::ScaleLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_sigmoid_cross_entropy_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::SigmoidCrossEntropyLossLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_slice_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::SliceLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_softmax_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::CuDNNSoftmaxLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_softmax_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::SoftmaxLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_softmax_with_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::SoftmaxWithLossLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_split_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::SplitLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_spp_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::SPPLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_stochastic_pooling.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::StochasticPoolingLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_tanh_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::TanHLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_threshold_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::ThresholdLayerTest	file:
blob_bottom_vec_	src/caffe/test/test_tile_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_;$/;"	m	class:caffe::TileLayerTest	file:
blob_bottom_vec_0_	src/caffe/test/test_concat_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_0_, blob_bottom_vec_1_;$/;"	m	class:caffe::ConcatLayerTest	file:
blob_bottom_vec_1_	src/caffe/test/test_concat_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_0_, blob_bottom_vec_1_;$/;"	m	class:caffe::ConcatLayerTest	file:
blob_bottom_vec_2_	src/caffe/test/test_spp_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_2_;$/;"	m	class:caffe::SPPLayerTest	file:
blob_bottom_vec_3_	src/caffe/test/test_spp_layer.cpp	/^  vector<Blob<Dtype>*> blob_bottom_vec_3_;$/;"	m	class:caffe::SPPLayerTest	file:
blob_bottom_y_	src/caffe/test/test_contrastive_loss_layer.cpp	/^  Blob<Dtype>* const blob_bottom_y_;$/;"	m	class:caffe::ContrastiveLossLayerTest	file:
blob_by_name	src/caffe/net.cpp	/^const shared_ptr<Blob<Dtype> > Net<Dtype>::blob_by_name($/;"	f	class:caffe::Net
blob_data_	src/caffe/test/test_hdf5_output_layer.cpp	/^  Blob<Dtype>* const blob_data_;$/;"	m	class:caffe::HDF5OutputLayerTest	file:
blob_get_data	matlab/+caffe/private/caffe_.cpp	/^static void blob_get_data(MEX_ARGS) {$/;"	f	file:
blob_get_diff	matlab/+caffe/private/caffe_.cpp	/^static void blob_get_diff(MEX_ARGS) {$/;"	f	file:
blob_get_shape	matlab/+caffe/private/caffe_.cpp	/^static void blob_get_shape(MEX_ARGS) {$/;"	f	file:
blob_label_	src/caffe/test/test_hdf5_output_layer.cpp	/^  Blob<Dtype>* const blob_label_;$/;"	m	class:caffe::HDF5OutputLayerTest	file:
blob_loss_weights	include/caffe/net.hpp	/^  inline const vector<Dtype>& blob_loss_weights() const {$/;"	f	class:caffe::Net
blob_loss_weights_	include/caffe/net.hpp	/^  vector<Dtype> blob_loss_weights_;$/;"	m	class:caffe::Net
blob_names	include/caffe/net.hpp	/^  inline const vector<string>& blob_names() const { return blob_names_; }$/;"	f	class:caffe::Net
blob_names_	include/caffe/net.hpp	/^  vector<string> blob_names_;$/;"	m	class:caffe::Net
blob_names_index_	include/caffe/net.hpp	/^  map<string, int> blob_names_index_;$/;"	m	class:caffe::Net
blob_need_backward_	include/caffe/net.hpp	/^  vector<bool> blob_need_backward_;$/;"	m	class:caffe::Net
blob_preshaped_	src/caffe/test/test_blob.cpp	/^  Blob<Dtype>* const blob_preshaped_;$/;"	m	class:caffe::BlobSimpleTest	file:
blob_reshape	matlab/+caffe/private/caffe_.cpp	/^static void blob_reshape(MEX_ARGS) {$/;"	f	file:
blob_set_data	matlab/+caffe/private/caffe_.cpp	/^static void blob_set_data(MEX_ARGS) {$/;"	f	file:
blob_set_diff	matlab/+caffe/private/caffe_.cpp	/^static void blob_set_diff(MEX_ARGS) {$/;"	f	file:
blob_to_mx_mat	matlab/+caffe/private/caffe_.cpp	/^static mxArray* blob_to_mx_mat(const Blob<float>* blob,$/;"	f	file:
blob_top_	src/caffe/test/test_accuracy_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::AccuracyLayerTest	file:
blob_top_	src/caffe/test/test_argmax_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::ArgMaxLayerTest	file:
blob_top_	src/caffe/test/test_batch_norm_layer.cpp	/^    Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::BatchNormLayerTest	file:
blob_top_	src/caffe/test/test_batch_reindex_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::BatchReindexLayerTest	file:
blob_top_	src/caffe/test/test_bias_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::BiasLayerTest	file:
blob_top_	src/caffe/test/test_concat_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::ConcatLayerTest	file:
blob_top_	src/caffe/test/test_convolution_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::ConvolutionLayerTest	file:
blob_top_	src/caffe/test/test_convolution_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::CuDNNConvolutionLayerTest	file:
blob_top_	src/caffe/test/test_crop_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::CropLayerTest	file:
blob_top_	src/caffe/test/test_deconvolution_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::DeconvolutionLayerTest	file:
blob_top_	src/caffe/test/test_eltwise_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::EltwiseLayerTest	file:
blob_top_	src/caffe/test/test_embed_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::EmbedLayerTest	file:
blob_top_	src/caffe/test/test_flatten_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::FlattenLayerTest	file:
blob_top_	src/caffe/test/test_im2col_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::Im2colLayerTest	file:
blob_top_	src/caffe/test/test_inner_product_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::InnerProductLayerTest	file:
blob_top_	src/caffe/test/test_lrn_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::CuDNNLRNLayerTest	file:
blob_top_	src/caffe/test/test_lrn_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::LRNLayerTest	file:
blob_top_	src/caffe/test/test_lstm_layer.cpp	/^  Blob<Dtype> blob_top_;$/;"	m	class:caffe::LSTMLayerTest	file:
blob_top_	src/caffe/test/test_math_functions.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::MathFunctionsTest	file:
blob_top_	src/caffe/test/test_maxpool_dropout_layers.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::MaxPoolingDropoutTest	file:
blob_top_	src/caffe/test/test_mvn_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::MVNLayerTest	file:
blob_top_	src/caffe/test/test_neuron_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::CuDNNNeuronLayerTest	file:
blob_top_	src/caffe/test/test_neuron_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::NeuronLayerTest	file:
blob_top_	src/caffe/test/test_pooling_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::CuDNNPoolingLayerTest	file:
blob_top_	src/caffe/test/test_pooling_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::PoolingLayerTest	file:
blob_top_	src/caffe/test/test_power_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::PowerLayerTest	file:
blob_top_	src/caffe/test/test_reduction_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::ReductionLayerTest	file:
blob_top_	src/caffe/test/test_reshape_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::ReshapeLayerTest	file:
blob_top_	src/caffe/test/test_rnn_layer.cpp	/^  Blob<Dtype> blob_top_;$/;"	m	class:caffe::RNNLayerTest	file:
blob_top_	src/caffe/test/test_scale_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::ScaleLayerTest	file:
blob_top_	src/caffe/test/test_softmax_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::CuDNNSoftmaxLayerTest	file:
blob_top_	src/caffe/test/test_softmax_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::SoftmaxLayerTest	file:
blob_top_	src/caffe/test/test_spp_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::SPPLayerTest	file:
blob_top_	src/caffe/test/test_stochastic_pooling.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::StochasticPoolingLayerTest	file:
blob_top_	src/caffe/test/test_tanh_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::TanHLayerTest	file:
blob_top_	src/caffe/test/test_threshold_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::ThresholdLayerTest	file:
blob_top_	src/caffe/test/test_tile_layer.cpp	/^  Blob<Dtype>* const blob_top_;$/;"	m	class:caffe::TileLayerTest	file:
blob_top_0_	src/caffe/test/test_slice_layer.cpp	/^  Blob<Dtype>* const blob_top_0_;$/;"	m	class:caffe::SliceLayerTest	file:
blob_top_1_	src/caffe/test/test_slice_layer.cpp	/^  Blob<Dtype>* const blob_top_1_;$/;"	m	class:caffe::SliceLayerTest	file:
blob_top_2_	src/caffe/test/test_convolution_layer.cpp	/^  Blob<Dtype>* const blob_top_2_;$/;"	m	class:caffe::ConvolutionLayerTest	file:
blob_top_2_	src/caffe/test/test_convolution_layer.cpp	/^  Blob<Dtype>* const blob_top_2_;$/;"	m	class:caffe::CuDNNConvolutionLayerTest	file:
blob_top_2_	src/caffe/test/test_deconvolution_layer.cpp	/^  Blob<Dtype>* const blob_top_2_;$/;"	m	class:caffe::DeconvolutionLayerTest	file:
blob_top_2_	src/caffe/test/test_slice_layer.cpp	/^  Blob<Dtype>* const blob_top_2_;$/;"	m	class:caffe::SliceLayerTest	file:
blob_top_a_	src/caffe/test/test_dummy_data_layer.cpp	/^  Blob<Dtype>* const blob_top_a_;$/;"	m	class:caffe::DummyDataLayerTest	file:
blob_top_a_	src/caffe/test/test_split_layer.cpp	/^  Blob<Dtype>* const blob_top_a_;$/;"	m	class:caffe::SplitLayerTest	file:
blob_top_b_	src/caffe/test/test_dummy_data_layer.cpp	/^  Blob<Dtype>* const blob_top_b_;$/;"	m	class:caffe::DummyDataLayerTest	file:
blob_top_b_	src/caffe/test/test_split_layer.cpp	/^  Blob<Dtype>* const blob_top_b_;$/;"	m	class:caffe::SplitLayerTest	file:
blob_top_c_	src/caffe/test/test_dummy_data_layer.cpp	/^  Blob<Dtype>* const blob_top_c_;$/;"	m	class:caffe::DummyDataLayerTest	file:
blob_top_data_	src/caffe/test/test_data_layer.cpp	/^  Blob<Dtype>* const blob_top_data_;$/;"	m	class:caffe::DataLayerTest	file:
blob_top_data_	src/caffe/test/test_filter_layer.cpp	/^  Blob<Dtype>* const blob_top_data_;$/;"	m	class:caffe::FilterLayerTest	file:
blob_top_data_	src/caffe/test/test_hdf5data_layer.cpp	/^  Blob<Dtype>* const blob_top_data_;$/;"	m	class:caffe::HDF5DataLayerTest	file:
blob_top_data_	src/caffe/test/test_image_data_layer.cpp	/^  Blob<Dtype>* const blob_top_data_;$/;"	m	class:caffe::ImageDataLayerTest	file:
blob_top_label2_	src/caffe/test/test_hdf5data_layer.cpp	/^  Blob<Dtype>* const blob_top_label2_;$/;"	m	class:caffe::HDF5DataLayerTest	file:
blob_top_label_	src/caffe/test/test_data_layer.cpp	/^  Blob<Dtype>* const blob_top_label_;$/;"	m	class:caffe::DataLayerTest	file:
blob_top_label_	src/caffe/test/test_hdf5data_layer.cpp	/^  Blob<Dtype>* const blob_top_label_;$/;"	m	class:caffe::HDF5DataLayerTest	file:
blob_top_label_	src/caffe/test/test_image_data_layer.cpp	/^  Blob<Dtype>* const blob_top_label_;$/;"	m	class:caffe::ImageDataLayerTest	file:
blob_top_labels_	src/caffe/test/test_filter_layer.cpp	/^  Blob<Dtype>* const blob_top_labels_;$/;"	m	class:caffe::FilterLayerTest	file:
blob_top_loss_	src/caffe/test/test_contrastive_loss_layer.cpp	/^  Blob<Dtype>* const blob_top_loss_;$/;"	m	class:caffe::ContrastiveLossLayerTest	file:
blob_top_loss_	src/caffe/test/test_euclidean_loss_layer.cpp	/^  Blob<Dtype>* const blob_top_loss_;$/;"	m	class:caffe::EuclideanLossLayerTest	file:
blob_top_loss_	src/caffe/test/test_hinge_loss_layer.cpp	/^  Blob<Dtype>* const blob_top_loss_;$/;"	m	class:caffe::HingeLossLayerTest	file:
blob_top_loss_	src/caffe/test/test_infogain_loss_layer.cpp	/^  Blob<Dtype>* const blob_top_loss_;$/;"	m	class:caffe::InfogainLossLayerTest	file:
blob_top_loss_	src/caffe/test/test_multinomial_logistic_loss_layer.cpp	/^  Blob<Dtype>* const blob_top_loss_;$/;"	m	class:caffe::MultinomialLogisticLossLayerTest	file:
blob_top_loss_	src/caffe/test/test_sigmoid_cross_entropy_loss_layer.cpp	/^  Blob<Dtype>* const blob_top_loss_;$/;"	m	class:caffe::SigmoidCrossEntropyLossLayerTest	file:
blob_top_loss_	src/caffe/test/test_softmax_with_loss_layer.cpp	/^  Blob<Dtype>* const blob_top_loss_;$/;"	m	class:caffe::SoftmaxWithLossLayerTest	file:
blob_top_mask_	src/caffe/test/test_pooling_layer.cpp	/^  Blob<Dtype>* const blob_top_mask_;$/;"	m	class:caffe::CuDNNPoolingLayerTest	file:
blob_top_mask_	src/caffe/test/test_pooling_layer.cpp	/^  Blob<Dtype>* const blob_top_mask_;$/;"	m	class:caffe::PoolingLayerTest	file:
blob_top_per_class_	src/caffe/test/test_accuracy_layer.cpp	/^  Blob<Dtype>* const blob_top_per_class_;$/;"	m	class:caffe::AccuracyLayerTest	file:
blob_top_per_class_vec_	src/caffe/test/test_accuracy_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_per_class_vec_;$/;"	m	class:caffe::AccuracyLayerTest	file:
blob_top_prob_	src/caffe/test/test_infogain_loss_layer.cpp	/^  Blob<Dtype>* const blob_top_prob_;$/;"	m	class:caffe::InfogainLossLayerTest	file:
blob_top_vec_	src/caffe/test/test_accuracy_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::AccuracyLayerTest	file:
blob_top_vec_	src/caffe/test/test_argmax_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::ArgMaxLayerTest	file:
blob_top_vec_	src/caffe/test/test_batch_norm_layer.cpp	/^    vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::BatchNormLayerTest	file:
blob_top_vec_	src/caffe/test/test_batch_reindex_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::BatchReindexLayerTest	file:
blob_top_vec_	src/caffe/test/test_bias_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::BiasLayerTest	file:
blob_top_vec_	src/caffe/test/test_concat_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::ConcatLayerTest	file:
blob_top_vec_	src/caffe/test/test_contrastive_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::ContrastiveLossLayerTest	file:
blob_top_vec_	src/caffe/test/test_convolution_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::ConvolutionLayerTest	file:
blob_top_vec_	src/caffe/test/test_convolution_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::CuDNNConvolutionLayerTest	file:
blob_top_vec_	src/caffe/test/test_crop_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::CropLayerTest	file:
blob_top_vec_	src/caffe/test/test_data_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::DataLayerTest	file:
blob_top_vec_	src/caffe/test/test_deconvolution_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::DeconvolutionLayerTest	file:
blob_top_vec_	src/caffe/test/test_dummy_data_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::DummyDataLayerTest	file:
blob_top_vec_	src/caffe/test/test_eltwise_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::EltwiseLayerTest	file:
blob_top_vec_	src/caffe/test/test_embed_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::EmbedLayerTest	file:
blob_top_vec_	src/caffe/test/test_euclidean_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::EuclideanLossLayerTest	file:
blob_top_vec_	src/caffe/test/test_filter_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::FilterLayerTest	file:
blob_top_vec_	src/caffe/test/test_flatten_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::FlattenLayerTest	file:
blob_top_vec_	src/caffe/test/test_hdf5_output_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::HDF5OutputLayerTest	file:
blob_top_vec_	src/caffe/test/test_hdf5data_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::HDF5DataLayerTest	file:
blob_top_vec_	src/caffe/test/test_hinge_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::HingeLossLayerTest	file:
blob_top_vec_	src/caffe/test/test_im2col_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::Im2colLayerTest	file:
blob_top_vec_	src/caffe/test/test_image_data_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::ImageDataLayerTest	file:
blob_top_vec_	src/caffe/test/test_infogain_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::InfogainLossLayerTest	file:
blob_top_vec_	src/caffe/test/test_inner_product_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::InnerProductLayerTest	file:
blob_top_vec_	src/caffe/test/test_lrn_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::CuDNNLRNLayerTest	file:
blob_top_vec_	src/caffe/test/test_lrn_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::LRNLayerTest	file:
blob_top_vec_	src/caffe/test/test_lstm_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::LSTMLayerTest	file:
blob_top_vec_	src/caffe/test/test_maxpool_dropout_layers.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::MaxPoolingDropoutTest	file:
blob_top_vec_	src/caffe/test/test_memory_data_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::MemoryDataLayerTest	file:
blob_top_vec_	src/caffe/test/test_multinomial_logistic_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::MultinomialLogisticLossLayerTest	file:
blob_top_vec_	src/caffe/test/test_mvn_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::MVNLayerTest	file:
blob_top_vec_	src/caffe/test/test_neuron_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::CuDNNNeuronLayerTest	file:
blob_top_vec_	src/caffe/test/test_neuron_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::NeuronLayerTest	file:
blob_top_vec_	src/caffe/test/test_pooling_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::CuDNNPoolingLayerTest	file:
blob_top_vec_	src/caffe/test/test_pooling_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::PoolingLayerTest	file:
blob_top_vec_	src/caffe/test/test_power_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::PowerLayerTest	file:
blob_top_vec_	src/caffe/test/test_reduction_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::ReductionLayerTest	file:
blob_top_vec_	src/caffe/test/test_reshape_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::ReshapeLayerTest	file:
blob_top_vec_	src/caffe/test/test_rnn_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::RNNLayerTest	file:
blob_top_vec_	src/caffe/test/test_scale_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::ScaleLayerTest	file:
blob_top_vec_	src/caffe/test/test_sigmoid_cross_entropy_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::SigmoidCrossEntropyLossLayerTest	file:
blob_top_vec_	src/caffe/test/test_softmax_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::CuDNNSoftmaxLayerTest	file:
blob_top_vec_	src/caffe/test/test_softmax_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::SoftmaxLayerTest	file:
blob_top_vec_	src/caffe/test/test_softmax_with_loss_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::SoftmaxWithLossLayerTest	file:
blob_top_vec_	src/caffe/test/test_split_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::SplitLayerTest	file:
blob_top_vec_	src/caffe/test/test_spp_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::SPPLayerTest	file:
blob_top_vec_	src/caffe/test/test_stochastic_pooling.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::StochasticPoolingLayerTest	file:
blob_top_vec_	src/caffe/test/test_tanh_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::TanHLayerTest	file:
blob_top_vec_	src/caffe/test/test_threshold_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::ThresholdLayerTest	file:
blob_top_vec_	src/caffe/test/test_tile_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_;$/;"	m	class:caffe::TileLayerTest	file:
blob_top_vec_0_	src/caffe/test/test_slice_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_0_, blob_top_vec_1_;$/;"	m	class:caffe::SliceLayerTest	file:
blob_top_vec_1_	src/caffe/test/test_slice_layer.cpp	/^  vector<Blob<Dtype>*> blob_top_vec_0_, blob_top_vec_1_;$/;"	m	class:caffe::SliceLayerTest	file:
blobproto_to_array	python/caffe/io.py	/^def blobproto_to_array(blob, return_diff=False):$/;"	f
blobprotovector_str_to_arraylist	python/caffe/io.py	/^def blobprotovector_str_to_arraylist(str):$/;"	f
blobs	include/caffe/layer.hpp	/^  vector<shared_ptr<Blob<Dtype> > >& blobs() {$/;"	f	class:caffe::Layer
blobs	include/caffe/net.hpp	/^  inline const vector<shared_ptr<Blob<Dtype> > >& blobs() const {$/;"	f	class:caffe::Net
blobs_	include/caffe/layer.hpp	/^  vector<shared_ptr<Blob<Dtype> > > blobs_;$/;"	m	class:caffe::Layer
blobs_	include/caffe/net.hpp	/^  vector<shared_ptr<Blob<Dtype> > > blobs_;$/;"	m	class:caffe::Net
bool_constant	src/gtest/gtest.h	/^struct bool_constant {$/;"	s	namespace:std::tr1
boost	include/caffe/internal_thread.hpp	/^namespace boost { class thread; }$/;"	n
boost	include/caffe/layer.hpp	/^namespace boost { class mutex; }$/;"	n
bottom_desc_	include/caffe/layers/cudnn_lcn_layer.hpp	/^  cudnnTensorDescriptor_t bottom_desc_, top_desc_;$/;"	m	class:caffe::CuDNNLCNLayer
bottom_desc_	include/caffe/layers/cudnn_lrn_layer.hpp	/^  cudnnTensorDescriptor_t bottom_desc_, top_desc_;$/;"	m	class:caffe::CuDNNLRNLayer
bottom_desc_	include/caffe/layers/cudnn_pooling_layer.hpp	/^  cudnnTensorDescriptor_t bottom_desc_, top_desc_;$/;"	m	class:caffe::CuDNNPoolingLayer
bottom_desc_	include/caffe/layers/cudnn_relu_layer.hpp	/^  cudnnTensorDescriptor_t bottom_desc_;$/;"	m	class:caffe::CuDNNReLULayer
bottom_desc_	include/caffe/layers/cudnn_sigmoid_layer.hpp	/^  cudnnTensorDescriptor_t bottom_desc_;$/;"	m	class:caffe::CuDNNSigmoidLayer
bottom_desc_	include/caffe/layers/cudnn_softmax_layer.hpp	/^  cudnnTensorDescriptor_t bottom_desc_;$/;"	m	class:caffe::CuDNNSoftmaxLayer
bottom_desc_	include/caffe/layers/cudnn_tanh_layer.hpp	/^  cudnnTensorDescriptor_t bottom_desc_;$/;"	m	class:caffe::CuDNNTanHLayer
bottom_descs_	include/caffe/layers/cudnn_conv_layer.hpp	/^  vector<cudnnTensorDescriptor_t> bottom_descs_, top_descs_;$/;"	m	class:caffe::CuDNNConvolutionLayer
bottom_dim_	include/caffe/layers/base_conv_layer.hpp	/^  int bottom_dim_;$/;"	m	class:caffe::BaseConvolutionLayer
bottom_dim_	include/caffe/layers/im2col_layer.hpp	/^  int bottom_dim_;$/;"	m	class:caffe::Im2colLayer
bottom_h_	include/caffe/layers/spp_layer.hpp	/^  int bottom_h_, bottom_w_;$/;"	m	class:caffe::SPPLayer
bottom_id_vecs_	include/caffe/net.hpp	/^  vector<vector<int> > bottom_id_vecs_;$/;"	m	class:caffe::Net
bottom_ids	include/caffe/net.hpp	/^  inline const vector<int> & bottom_ids(int i) const {$/;"	f	class:caffe::Net
bottom_memory_	include/caffe/layers/prelu_layer.hpp	/^  Blob<Dtype> bottom_memory_;  \/\/ memory for in-place computation$/;"	m	class:caffe::PReLULayer
bottom_need_backward	include/caffe/net.hpp	/^  inline const vector<vector<bool> >& bottom_need_backward() const {$/;"	f	class:caffe::Net
bottom_need_backward_	include/caffe/net.hpp	/^  vector<vector<bool> > bottom_need_backward_;$/;"	m	class:caffe::Net
bottom_offset_	include/caffe/layers/cudnn_conv_layer.hpp	/^  int bottom_offset_, top_offset_, bias_offset_;$/;"	m	class:caffe::CuDNNConvolutionLayer
bottom_shape_	include/caffe/layers/base_conv_layer.hpp	/^  const vector<int>* bottom_shape_;$/;"	m	class:caffe::BaseConvolutionLayer
bottom_vecs	include/caffe/net.hpp	/^  inline const vector<vector<Blob<Dtype>*> >& bottom_vecs() const {$/;"	f	class:caffe::Net
bottom_vecs_	include/caffe/net.hpp	/^  vector<vector<Blob<Dtype>*> > bottom_vecs_;$/;"	m	class:caffe::Net
bottom_w_	include/caffe/layers/spp_layer.hpp	/^  int bottom_h_, bottom_w_;$/;"	m	class:caffe::SPPLayer
break_on_failure_	src/gtest/gtest-all.cpp	/^  bool break_on_failure_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
bwd_data_algo_	include/caffe/layers/cudnn_conv_layer.hpp	/^  cudnnConvolutionBwdDataAlgo_t *bwd_data_algo_;$/;"	m	class:caffe::CuDNNConvolutionLayer
bwd_filter_algo_	include/caffe/layers/cudnn_conv_layer.hpp	/^  cudnnConvolutionBwdFilterAlgo_t *bwd_filter_algo_;$/;"	m	class:caffe::CuDNNConvolutionLayer
cPickle	examples/web_demo/app.py	/^import cPickle$/;"	i
c_random_function_list	scripts/cpp_lint.py	/^c_random_function_list = ($/;"	v
c_str	src/gtest/gtest.h	/^  const char* c_str() const { return c_str_; }$/;"	f	class:testing::internal::String
c_str	src/gtest/gtest.h	/^  const char* c_str() const { return pathname_.c_str(); }$/;"	f	class:testing::internal::FilePath
c_str_	src/gtest/gtest.h	/^  const char* c_str_;$/;"	m	class:testing::internal::String
cache_images_	include/caffe/layers/window_data_layer.hpp	/^  bool cache_images_;$/;"	m	class:caffe::WindowDataLayer
caffe	examples/pycaffe/layers/pascal_multilabel_datalayers.py	/^import caffe$/;"	i
caffe	examples/pycaffe/layers/pyloss.py	/^import caffe$/;"	i
caffe	examples/web_demo/app.py	/^import caffe$/;"	i
caffe	include/caffe/blob.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/common.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/data_transformer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/filler.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/internal_thread.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layer_factory.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/absval_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/accuracy_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/argmax_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/base_conv_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/base_data_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/batch_norm_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/batch_reindex_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/bias_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/bnll_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/concat_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/contrastive_loss_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/conv_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/crop_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/cudnn_conv_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/cudnn_lcn_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/cudnn_lrn_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/cudnn_pooling_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/cudnn_relu_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/cudnn_sigmoid_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/cudnn_softmax_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/cudnn_tanh_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/data_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/deconv_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/dropout_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/dummy_data_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/eltwise_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/elu_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/embed_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/euclidean_loss_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/exp_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/filter_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/flatten_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/hdf5_data_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/hdf5_output_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/hinge_loss_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/im2col_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/image_data_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/infogain_loss_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/inner_product_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/input_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/log_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/loss_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/lrn_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/lstm_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/memory_data_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/multinomial_logistic_loss_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/mvn_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/neuron_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/parameter_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/pooling_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/power_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/prelu_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/python_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/recurrent_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/reduction_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/relu_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/reshape_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/rnn_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/scale_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/sigmoid_cross_entropy_loss_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/sigmoid_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/silence_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/slice_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/softmax_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/softmax_loss_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/split_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/spp_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/tanh_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/threshold_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/tile_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/layers/window_data_layer.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/net.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/parallel.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/sgd_solvers.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/solver.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/solver_factory.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/syncedmem.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/test/test_caffe_main.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/test/test_gradient_check_util.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/util/benchmark.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/util/blocking_queue.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/util/cudnn.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/util/db.hpp	/^namespace caffe { namespace db {$/;"	n
caffe	include/caffe/util/db_leveldb.hpp	/^namespace caffe { namespace db {$/;"	n
caffe	include/caffe/util/db_lmdb.hpp	/^namespace caffe { namespace db {$/;"	n
caffe	include/caffe/util/device_alternate.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/util/format.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/util/hdf5.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/util/im2col.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/util/insert_splits.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/util/io.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/util/math_functions.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/util/nccl.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/util/rng.hpp	/^namespace caffe {$/;"	n
caffe	include/caffe/util/signal_handler.h	/^namespace caffe {$/;"	n
caffe	include/caffe/util/upgrade_proto.hpp	/^namespace caffe {$/;"	n
caffe	python/caffe/_caffe.cpp	/^namespace caffe {$/;"	n	file:
caffe	python/caffe/classifier.py	/^import caffe$/;"	i
caffe	python/caffe/detector.py	/^import caffe$/;"	i
caffe	python/caffe/pycaffe.py	/^import caffe.io$/;"	i
caffe	python/caffe/test/test_coord_map.py	/^import caffe$/;"	i
caffe	python/caffe/test/test_draw.py	/^import caffe.draw$/;"	i
caffe	python/caffe/test/test_io.py	/^import caffe$/;"	i
caffe	python/caffe/test/test_layer_type_list.py	/^import caffe$/;"	i
caffe	python/caffe/test/test_nccl.py	/^import caffe$/;"	i
caffe	python/caffe/test/test_net.py	/^import caffe$/;"	i
caffe	python/caffe/test/test_net_spec.py	/^import caffe$/;"	i
caffe	python/caffe/test/test_python_layer.py	/^import caffe$/;"	i
caffe	python/caffe/test/test_python_layer_with_param_str.py	/^import caffe$/;"	i
caffe	python/caffe/test/test_solver.py	/^import caffe$/;"	i
caffe	python/classify.py	/^import caffe$/;"	i
caffe	python/detect.py	/^import caffe$/;"	i
caffe	python/draw_net.py	/^import caffe$/;"	i
caffe	python/draw_net.py	/^import caffe.draw$/;"	i
caffe	python/train.py	/^import caffe$/;"	i
caffe	src/caffe/blob.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/common.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/data_transformer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/internal_thread.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layer_factory.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/absval_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/accuracy_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/argmax_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/base_conv_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/base_data_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/batch_norm_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/batch_reindex_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/bias_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/bnll_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/concat_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/contrastive_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/conv_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/crop_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/cudnn_conv_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/cudnn_lcn_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/cudnn_lrn_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/cudnn_pooling_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/cudnn_relu_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/cudnn_sigmoid_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/cudnn_softmax_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/cudnn_tanh_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/data_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/deconv_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/dropout_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/dummy_data_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/eltwise_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/elu_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/embed_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/euclidean_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/exp_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/filter_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/flatten_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/hdf5_data_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/hdf5_output_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/hinge_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/im2col_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/image_data_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/infogain_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/inner_product_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/input_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/log_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/lrn_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/lstm_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/lstm_unit_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/memory_data_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/multinomial_logistic_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/mvn_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/neuron_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/parameter_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/pooling_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/power_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/prelu_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/recurrent_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/reduction_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/relu_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/reshape_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/rnn_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/scale_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/sigmoid_cross_entropy_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/sigmoid_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/silence_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/slice_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/softmax_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/softmax_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/split_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/spp_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/tanh_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/threshold_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/tile_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/layers/window_data_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/net.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/parallel.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/solver.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/solvers/adadelta_solver.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/solvers/adagrad_solver.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/solvers/adam_solver.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/solvers/nesterov_solver.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/solvers/rmsprop_solver.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/solvers/sgd_solver.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/syncedmem.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_accuracy_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_argmax_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_batch_norm_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_batch_reindex_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_benchmark.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_bias_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_blob.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_caffe_main.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_common.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_concat_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_contrastive_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_convolution_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_crop_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_data_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_data_transformer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_db.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_deconvolution_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_dummy_data_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_eltwise_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_embed_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_euclidean_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_filler.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_filter_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_flatten_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_gradient_based_solver.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_hdf5_output_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_hdf5data_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_hinge_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_im2col_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_image_data_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_infogain_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_inner_product_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_internal_thread.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_io.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_layer_factory.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_lrn_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_lstm_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_math_functions.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_maxpool_dropout_layers.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_memory_data_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_multinomial_logistic_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_mvn_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_net.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_neuron_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_platform.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_pooling_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_power_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_protobuf.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_random_number_generator.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_reduction_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_reshape_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_rnn_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_scale_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_sigmoid_cross_entropy_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_slice_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_softmax_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_softmax_with_loss_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_solver.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_solver_factory.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_split_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_spp_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_stochastic_pooling.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_syncedmem.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_tanh_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_threshold_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_tile_layer.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_upgrade_proto.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/test/test_util_blas.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/util/benchmark.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/util/blocking_queue.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/util/cudnn.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/util/db.cpp	/^namespace caffe { namespace db {$/;"	n	file:
caffe	src/caffe/util/db_leveldb.cpp	/^namespace caffe { namespace db {$/;"	n	file:
caffe	src/caffe/util/db_lmdb.cpp	/^namespace caffe { namespace db {$/;"	n	file:
caffe	src/caffe/util/hdf5.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/util/im2col.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/util/insert_splits.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/util/io.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/util/math_functions.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/util/signal_handler.cpp	/^namespace caffe {$/;"	n	file:
caffe	src/caffe/util/upgrade_proto.cpp	/^namespace caffe {$/;"	n	file:
caffe_abs	src/caffe/util/math_functions.cpp	/^void caffe_abs<double>(const int n, const double* a, double* y) {$/;"	f	namespace:caffe
caffe_abs	src/caffe/util/math_functions.cpp	/^void caffe_abs<float>(const int n, const float* a, float* y) {$/;"	f	namespace:caffe
caffe_add	src/caffe/util/math_functions.cpp	/^void caffe_add<double>(const int n, const double* a, const double* b,$/;"	f	namespace:caffe
caffe_add	src/caffe/util/math_functions.cpp	/^void caffe_add<float>(const int n, const float* a, const float* b,$/;"	f	namespace:caffe
caffe_add_scalar	src/caffe/util/math_functions.cpp	/^void caffe_add_scalar(const int N, const double alpha, double* Y) {$/;"	f	namespace:caffe
caffe_add_scalar	src/caffe/util/math_functions.cpp	/^void caffe_add_scalar(const int N, const float alpha, float* Y) {$/;"	f	namespace:caffe
caffe_alt_function_list	scripts/cpp_lint.py	/^caffe_alt_function_list = ($/;"	v
caffe_axpy	src/caffe/util/math_functions.cpp	/^void caffe_axpy<double>(const int N, const double alpha, const double* X,$/;"	f	namespace:caffe
caffe_axpy	src/caffe/util/math_functions.cpp	/^void caffe_axpy<float>(const int N, const float alpha, const float* X,$/;"	f	namespace:caffe
caffe_conv	src/caffe/test/test_convolution_layer.cpp	/^void caffe_conv(const Blob<Dtype>* in, ConvolutionParameter* conv_param,$/;"	f	namespace:caffe
caffe_copy	src/caffe/util/math_functions.cpp	/^void caffe_copy(const int N, const Dtype* X, Dtype* Y) {$/;"	f	namespace:caffe
caffe_cpu_asum	src/caffe/util/math_functions.cpp	/^double caffe_cpu_asum<double>(const int n, const double* x) {$/;"	f	namespace:caffe
caffe_cpu_asum	src/caffe/util/math_functions.cpp	/^float caffe_cpu_asum<float>(const int n, const float* x) {$/;"	f	namespace:caffe
caffe_cpu_axpby	src/caffe/util/math_functions.cpp	/^void caffe_cpu_axpby<double>(const int N, const double alpha, const double* X,$/;"	f	namespace:caffe
caffe_cpu_axpby	src/caffe/util/math_functions.cpp	/^void caffe_cpu_axpby<float>(const int N, const float alpha, const float* X,$/;"	f	namespace:caffe
caffe_cpu_dot	src/caffe/util/math_functions.cpp	/^Dtype caffe_cpu_dot(const int n, const Dtype* x, const Dtype* y) {$/;"	f	namespace:caffe
caffe_cpu_gemm	src/caffe/util/math_functions.cpp	/^void caffe_cpu_gemm<double>(const CBLAS_TRANSPOSE TransA,$/;"	f	namespace:caffe
caffe_cpu_gemm	src/caffe/util/math_functions.cpp	/^void caffe_cpu_gemm<float>(const CBLAS_TRANSPOSE TransA,$/;"	f	namespace:caffe
caffe_cpu_gemv	src/caffe/util/math_functions.cpp	/^void caffe_cpu_gemv<double>(const CBLAS_TRANSPOSE TransA, const int M,$/;"	f	namespace:caffe
caffe_cpu_gemv	src/caffe/util/math_functions.cpp	/^void caffe_cpu_gemv<float>(const CBLAS_TRANSPOSE TransA, const int M,$/;"	f	namespace:caffe
caffe_cpu_scale	src/caffe/util/math_functions.cpp	/^void caffe_cpu_scale<double>(const int n, const double alpha, const double *x,$/;"	f	namespace:caffe
caffe_cpu_scale	src/caffe/util/math_functions.cpp	/^void caffe_cpu_scale<float>(const int n, const float alpha, const float *x,$/;"	f	namespace:caffe
caffe_cpu_strided_dot	src/caffe/util/math_functions.cpp	/^double caffe_cpu_strided_dot<double>(const int n, const double* x,$/;"	f	namespace:caffe
caffe_cpu_strided_dot	src/caffe/util/math_functions.cpp	/^float caffe_cpu_strided_dot<float>(const int n, const float* x, const int incx,$/;"	f	namespace:caffe
caffe_dirname	examples/finetune_flickr_style/assemble_data.py	/^caffe_dirname = os.path.abspath(os.path.join(example_dirname, '..\/..'))$/;"	v
caffe_div	src/caffe/util/math_functions.cpp	/^void caffe_div<double>(const int n, const double* a, const double* b,$/;"	f	namespace:caffe
caffe_div	src/caffe/util/math_functions.cpp	/^void caffe_div<float>(const int n, const float* a, const float* b,$/;"	f	namespace:caffe
caffe_exp	src/caffe/util/math_functions.cpp	/^void caffe_exp<double>(const int n, const double* a, double* y) {$/;"	f	namespace:caffe
caffe_exp	src/caffe/util/math_functions.cpp	/^void caffe_exp<float>(const int n, const float* a, float* y) {$/;"	f	namespace:caffe
caffe_gpu_memset	include/caffe/util/math_functions.hpp	/^inline void caffe_gpu_memset(const size_t N, const int alpha, void* X) {$/;"	f	namespace:caffe
caffe_log	src/caffe/util/math_functions.cpp	/^void caffe_log<double>(const int n, const double* a, double* y) {$/;"	f	namespace:caffe
caffe_log	src/caffe/util/math_functions.cpp	/^void caffe_log<float>(const int n, const float* a, float* y) {$/;"	f	namespace:caffe
caffe_memset	include/caffe/util/math_functions.hpp	/^inline void caffe_memset(const size_t N, const int alpha, void* X) {$/;"	f	namespace:caffe
caffe_mul	src/caffe/util/math_functions.cpp	/^void caffe_mul<double>(const int n, const double* a, const double* b,$/;"	f	namespace:caffe
caffe_mul	src/caffe/util/math_functions.cpp	/^void caffe_mul<float>(const int n, const float* a, const float* b,$/;"	f	namespace:caffe
caffe_nextafter	src/caffe/util/math_functions.cpp	/^Dtype caffe_nextafter(const Dtype b) {$/;"	f	namespace:caffe
caffe_pb2	examples/pycaffe/caffenet.py	/^from caffe.proto import caffe_pb2$/;"	i
caffe_pb2	python/caffe/draw.py	/^from caffe.proto import caffe_pb2$/;"	i
caffe_pb2	python/caffe/io.py	/^    from caffe.proto import caffe_pb2$/;"	i
caffe_pb2	python/caffe/net_spec.py	/^from .proto import caffe_pb2$/;"	i
caffe_pb2	python/caffe/test/test_draw.py	/^from caffe.proto import caffe_pb2$/;"	i
caffe_pb2	python/draw_net.py	/^from caffe.proto import caffe_pb2$/;"	i
caffe_pb2	tools/extra/summarize.py	/^from caffe.proto import caffe_pb2$/;"	i
caffe_powx	src/caffe/util/math_functions.cpp	/^void caffe_powx<double>(const int n, const double* a, const double b,$/;"	f	namespace:caffe
caffe_powx	src/caffe/util/math_functions.cpp	/^void caffe_powx<float>(const int n, const float* a, const float b,$/;"	f	namespace:caffe
caffe_proto_fn	scripts/split_caffe_proto.py	/^caffe_proto_fn = os.path.join($/;"	v
caffe_rng	include/caffe/util/rng.hpp	/^inline rng_t* caffe_rng() {$/;"	f	namespace:caffe
caffe_rng_bernoulli	src/caffe/util/math_functions.cpp	/^void caffe_rng_bernoulli(const int n, const Dtype p, int* r) {$/;"	f	namespace:caffe
caffe_rng_bernoulli	src/caffe/util/math_functions.cpp	/^void caffe_rng_bernoulli(const int n, const Dtype p, unsigned int* r) {$/;"	f	namespace:caffe
caffe_rng_gaussian	src/caffe/util/math_functions.cpp	/^void caffe_rng_gaussian(const int n, const Dtype a,$/;"	f	namespace:caffe
caffe_rng_rand	src/caffe/util/math_functions.cpp	/^unsigned int caffe_rng_rand() {$/;"	f	namespace:caffe
caffe_rng_uniform	src/caffe/util/math_functions.cpp	/^void caffe_rng_uniform(const int n, const Dtype a, const Dtype b, Dtype* r) {$/;"	f	namespace:caffe
caffe_scal	src/caffe/util/math_functions.cpp	/^void caffe_scal<double>(const int N, const double alpha, double *X) {$/;"	f	namespace:caffe
caffe_scal	src/caffe/util/math_functions.cpp	/^void caffe_scal<float>(const int N, const float alpha, float *X) {$/;"	f	namespace:caffe
caffe_set	src/caffe/util/math_functions.cpp	/^void caffe_set(const int N, const Dtype alpha, Dtype* Y) {$/;"	f	namespace:caffe
caffe_sign	include/caffe/util/math_functions.hpp	/^inline int8_t caffe_sign(Dtype val) {$/;"	f	namespace:caffe
caffe_sqr	src/caffe/util/math_functions.cpp	/^void caffe_sqr<double>(const int n, const double* a, double* y) {$/;"	f	namespace:caffe
caffe_sqr	src/caffe/util/math_functions.cpp	/^void caffe_sqr<float>(const int n, const float* a, float* y) {$/;"	f	namespace:caffe
caffe_sqrt	src/caffe/util/math_functions.cpp	/^void caffe_sqrt<double>(const int n, const double* a, double* y) {$/;"	f	namespace:caffe
caffe_sqrt	src/caffe/util/math_functions.cpp	/^void caffe_sqrt<float>(const int n, const float* a, float* y) {$/;"	f	namespace:caffe
caffe_sub	src/caffe/util/math_functions.cpp	/^void caffe_sub<double>(const int n, const double* a, const double* b,$/;"	f	namespace:caffe
caffe_sub	src/caffe/util/math_functions.cpp	/^void caffe_sub<float>(const int n, const float* a, const float* b,$/;"	f	namespace:caffe
caffenet	examples/pycaffe/caffenet.py	/^def caffenet(lmdb, batch_size=256, include_acc=False):$/;"	f
callbacks	include/caffe/solver.hpp	/^  const vector<Callback*>& callbacks() const { return callbacks_; }$/;"	f	class:caffe::Solver
callbacks_	include/caffe/solver.hpp	/^  vector<Callback*> callbacks_;$/;"	m	class:caffe::Solver
caller_frame_	src/gtest/gtest-all.cpp	/^  void* caller_frame_;$/;"	m	class:testing::internal::OsStackTraceGetter	file:
capacity_	include/caffe/blob.hpp	/^  int capacity_;$/;"	m	class:caffe::Blob
capture	src/gtest/gtest.h	/^  void capture(T* ptr) {$/;"	f	class:testing::internal::linked_ptr
catch_exceptions	src/gtest/gtest-all.cpp	/^  bool catch_exceptions() const { return catch_exceptions_; }$/;"	f	class:testing::internal::UnitTestImpl
catch_exceptions_	src/gtest/gtest-all.cpp	/^  bool catch_exceptions_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
catch_exceptions_	src/gtest/gtest-all.cpp	/^  bool catch_exceptions_;$/;"	m	class:testing::internal::UnitTestImpl	file:
cblas_daxpby	include/caffe/util/mkl_alternate.hpp	/^inline void cblas_daxpby(const int N, const double alpha, const double* X,$/;"	f
cblas_saxpby	include/caffe/util/mkl_alternate.hpp	/^inline void cblas_saxpby(const int N, const float alpha, const float* X,$/;"	f
channel_axis_	include/caffe/layers/base_conv_layer.hpp	/^  int channel_axis_;$/;"	m	class:caffe::BaseConvolutionLayer
channel_axis_	include/caffe/layers/im2col_layer.hpp	/^  int channel_axis_;$/;"	m	class:caffe::Im2colLayer
channel_shared_	include/caffe/layers/prelu_layer.hpp	/^  bool channel_shared_;$/;"	m	class:caffe::PReLULayer
channels	include/caffe/blob.hpp	/^  inline int channels() const { return LegacyShape(1); }$/;"	f	class:caffe::Blob
channels	include/caffe/layers/memory_data_layer.hpp	/^  int channels() { return channels_; }$/;"	f	class:caffe::MemoryDataLayer
channels_	include/caffe/layers/base_conv_layer.hpp	/^  int channels_;$/;"	m	class:caffe::BaseConvolutionLayer
channels_	include/caffe/layers/batch_norm_layer.hpp	/^  int channels_;$/;"	m	class:caffe::BatchNormLayer
channels_	include/caffe/layers/im2col_layer.hpp	/^  int channels_;$/;"	m	class:caffe::Im2colLayer
channels_	include/caffe/layers/lrn_layer.hpp	/^  int channels_;$/;"	m	class:caffe::LRNLayer
channels_	include/caffe/layers/memory_data_layer.hpp	/^  int batch_size_, channels_, height_, width_, size_;$/;"	m	class:caffe::MemoryDataLayer
channels_	include/caffe/layers/pooling_layer.hpp	/^  int channels_;$/;"	m	class:caffe::PoolingLayer
channels_	include/caffe/layers/spp_layer.hpp	/^  int channels_;$/;"	m	class:caffe::SPPLayer
channels_	src/caffe/test/test_gradient_based_solver.cpp	/^  int num_, channels_, height_, width_;$/;"	m	class:caffe::GradientBasedSolverTest	file:
channels_	src/caffe/test/test_hdf5_output_layer.cpp	/^  int channels_;$/;"	m	class:caffe::HDF5OutputLayerTest	file:
channels_	src/caffe/test/test_memory_data_layer.cpp	/^  int channels_;$/;"	m	class:caffe::MemoryDataLayerTest	file:
check_batch_reindex	src/caffe/layers/batch_reindex_layer.cpp	/^void BatchReindexLayer<Dtype>::check_batch_reindex(int initial_num,$/;"	f	class:caffe::BatchReindexLayer
check_device	src/caffe/syncedmem.cpp	/^void SyncedMemory::check_device() {$/;"	f	class:caffe::SyncedMemory
check_net	python/caffe/test/test_net.py	/^    def check_net(self, net, blobs):$/;"	m	class:TestLevels
check_net	python/caffe/test/test_net.py	/^    def check_net(self, net, blobs):$/;"	m	class:TestStages
check_net	python/caffe/test/test_net.py	/^    def check_net(self, net, outputs):$/;"	m	class:TestAllInOne
check_params	examples/pycaffe/layers/pascal_multilabel_datalayers.py	/^def check_params(params):$/;"	f
check_params	scripts/cpp_lint.py	/^        check_params = False$/;"	v	class:CheckForNonConstReference.or
check_params	scripts/cpp_lint.py	/^      check_params = True  # just opened global\/class\/namespace block$/;"	v	class:CheckForNonConstReference.or
child_handle_	src/gtest/gtest-all.cpp	/^  AutoHandle child_handle_;$/;"	m	class:testing::internal::WindowsDeathTest	file:
child_pid_	src/gtest/gtest-all.cpp	/^  pid_t child_pid_;$/;"	m	class:testing::internal::ForkingDeathTest	file:
choose_color_by_layertype	python/caffe/draw.py	/^def choose_color_by_layertype(layertype):$/;"	f
classification_demo	matlab/demo/classification_demo.m	/^function [scores, maxlabel] = classification_demo(im, use_gpu)$/;"	f
classify_image	examples/web_demo/app.py	/^    def classify_image(self, image):$/;"	m	class:ImagenetClassifier
classify_upload	examples/web_demo/app.py	/^def classify_upload():$/;"	f
classify_url	examples/web_demo/app.py	/^def classify_url():$/;"	f
close_fd	src/gtest/gtest-all.cpp	/^  int close_fd;       \/\/ File descriptor to close; the read end of a pipe$/;"	m	struct:testing::internal::ExecDeathTestArgs	file:
cluster_seedgen	src/caffe/common.cpp	/^int64_t cluster_seedgen(void) {$/;"	f	namespace:caffe
cmd	matlab/+caffe/private/caffe_.cpp	/^  string cmd;$/;"	m	struct:handler_registry	file:
cmx	tools/extra/plot_training_log.py.example	/^import matplotlib.cm as cmx$/;"	i
codecs	scripts/cpp_lint.py	/^import codecs$/;"	i
coeff_	include/caffe/layers/reduction_layer.hpp	/^  Dtype coeff_;$/;"	m	class:caffe::ReductionLayer
coeffs_	include/caffe/layers/eltwise_layer.hpp	/^  vector<Dtype> coeffs_;$/;"	m	class:caffe::EltwiseLayer
col2im_cpu	src/caffe/util/im2col.cpp	/^void col2im_cpu(const Dtype* data_col, const int channels,$/;"	f	namespace:caffe
col2im_nd_cpu	src/caffe/util/im2col.cpp	/^void col2im_nd_cpu(const Dtype* data_col, const int num_spatial_axes,$/;"	f	namespace:caffe
col_buffer_	include/caffe/layers/base_conv_layer.hpp	/^  Blob<Dtype> col_buffer_;$/;"	m	class:caffe::BaseConvolutionLayer
col_buffer_shape_	include/caffe/layers/base_conv_layer.hpp	/^  vector<int> col_buffer_shape_;$/;"	m	class:caffe::BaseConvolutionLayer
col_offset_	include/caffe/layers/base_conv_layer.hpp	/^  int col_offset_;$/;"	m	class:caffe::BaseConvolutionLayer
collect_bottoms	python/caffe/coord_map.py	/^    def collect_bottoms(top):$/;"	f	function:coord_map_from_to
color_	src/gtest/gtest-all.cpp	/^  String color_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
colors	tools/extra/plot_training_log.py.example	/^import matplotlib.colors as colors$/;"	i
comm_	include/caffe/parallel.hpp	/^  ncclComm_t comm_;$/;"	m	class:caffe::NCCL
compose	python/caffe/coord_map.py	/^def compose(base_map, next_map):$/;"	f
compute_output_shape	src/caffe/layers/conv_layer.cpp	/^void ConvolutionLayer<Dtype>::compute_output_shape() {$/;"	f	class:caffe::ConvolutionLayer
compute_output_shape	src/caffe/layers/deconv_layer.cpp	/^void DeconvolutionLayer<Dtype>::compute_output_shape() {$/;"	f	class:caffe::DeconvolutionLayer
concat_axis_	include/caffe/layers/concat_layer.hpp	/^  int concat_axis_;$/;"	m	class:caffe::ConcatLayer
concat_bottom_vec_	include/caffe/layers/spp_layer.hpp	/^  vector<Blob<Dtype>*> concat_bottom_vec_;$/;"	m	class:caffe::SPPLayer
concat_input_size_	include/caffe/layers/concat_layer.hpp	/^  int concat_input_size_;$/;"	m	class:caffe::ConcatLayer
concat_layer_	include/caffe/layers/spp_layer.hpp	/^  shared_ptr<ConcatLayer<Dtype> > concat_layer_;$/;"	m	class:caffe::SPPLayer
condition_	src/caffe/util/blocking_queue.cpp	/^  boost::condition_variable condition_;$/;"	m	class:caffe::BlockingQueue::sync	file:
configure_crop	python/caffe/detector.py	/^    def configure_crop(self, context_pad):$/;"	m	class:Detector
const_iterator	src/gtest/gtest.h	/^  typedef const Element* const_iterator;$/;"	t	class:testing::internal::NativeArray
constant_count_	include/caffe/layers/reshape_layer.hpp	/^  int constant_count_;$/;"	m	class:caffe::ReshapeLayer
constructor_sanity_check	include/caffe/sgd_solvers.hpp	/^  void constructor_sanity_check() {$/;"	f	class:caffe::AdaGradSolver
constructor_sanity_check	include/caffe/sgd_solvers.hpp	/^  void constructor_sanity_check() {$/;"	f	class:caffe::RMSPropSolver
cont_input_blob_	include/caffe/layers/recurrent_layer.hpp	/^  Blob<Dtype>* cont_input_blob_;$/;"	m	class:caffe::RecurrentLayer
container_	src/gtest/gtest.h	/^  const ContainerType container_;$/;"	m	class:testing::internal::ValuesInIteratorRangeGenerator
content	scripts/copy_notebook.py	/^content = json.load(open(filename))$/;"	v
conv_col2im_cpu	include/caffe/layers/base_conv_layer.hpp	/^  inline void conv_col2im_cpu(const Dtype* col_buff, Dtype* data) {$/;"	f	class:caffe::BaseConvolutionLayer
conv_col2im_gpu	include/caffe/layers/base_conv_layer.hpp	/^  inline void conv_col2im_gpu(const Dtype* col_buff, Dtype* data) {$/;"	f	class:caffe::BaseConvolutionLayer
conv_descs_	include/caffe/layers/cudnn_conv_layer.hpp	/^  vector<cudnnConvolutionDescriptor_t> conv_descs_;$/;"	m	class:caffe::CuDNNConvolutionLayer
conv_im2col_cpu	include/caffe/layers/base_conv_layer.hpp	/^  inline void conv_im2col_cpu(const Dtype* data, Dtype* col_buff) {$/;"	f	class:caffe::BaseConvolutionLayer
conv_im2col_gpu	include/caffe/layers/base_conv_layer.hpp	/^  inline void conv_im2col_gpu(const Dtype* data, Dtype* col_buff) {$/;"	f	class:caffe::BaseConvolutionLayer
conv_in_channels_	include/caffe/layers/base_conv_layer.hpp	/^  int conv_in_channels_;$/;"	m	class:caffe::BaseConvolutionLayer
conv_input_shape_	include/caffe/layers/base_conv_layer.hpp	/^  Blob<int> conv_input_shape_;$/;"	m	class:caffe::BaseConvolutionLayer
conv_out_channels_	include/caffe/layers/base_conv_layer.hpp	/^  int conv_out_channels_;$/;"	m	class:caffe::BaseConvolutionLayer
conv_out_spatial_dim_	include/caffe/layers/base_conv_layer.hpp	/^  int conv_out_spatial_dim_;$/;"	m	class:caffe::BaseConvolutionLayer
conv_params	python/caffe/coord_map.py	/^def conv_params(fn):$/;"	f
conv_relu	examples/pycaffe/caffenet.py	/^def conv_relu(bottom, ks, nout, stride=1, pad=0, group=1):$/;"	f
convert_dataset	examples/cifar10/convert_cifar_data.cpp	/^void convert_dataset(const string& input_folder, const string& output_folder,$/;"	f
convert_dataset	examples/mnist/convert_mnist_data.cpp	/^void convert_dataset(const char* image_filename, const char* label_filename,$/;"	f
convert_dataset	examples/siamese/convert_mnist_siamese_data.cpp	/^void convert_dataset(const char* image_filename, const char* label_filename,$/;"	f
coord_map	python/caffe/coord_map.py	/^def coord_map(fn):$/;"	f
coord_map_from_to	python/caffe/coord_map.py	/^def coord_map_from_to(top_from, top_to):$/;"	f
coord_map_from_to	python/caffe/test/test_coord_map.py	/^from caffe.coord_map import coord_map_from_to, crop$/;"	i
coord_net_spec	python/caffe/test/test_coord_map.py	/^def coord_net_spec(ks=3, stride=1, pad=0, pool=2, dstride=2, dpad=0):$/;"	f
copy	scripts/cpp_lint.py	/^import copy$/;"	i
copy	src/caffe/parallel.cpp	/^  copy,$/;"	e	enum:caffe::Op	file:
copy	src/gtest/gtest.h	/^  template <typename U> void copy(linked_ptr<U> const* ptr) {$/;"	f	class:testing::internal::linked_ptr
copy_axes_	include/caffe/layers/reshape_layer.hpp	/^  vector<int> copy_axes_;$/;"	m	class:caffe::ReshapeLayer
count	include/caffe/blob.hpp	/^  inline int count() const { return count_; }$/;"	f	class:caffe::Blob
count	include/caffe/blob.hpp	/^  inline int count(int start_axis) const {$/;"	f	class:caffe::Blob
count	include/caffe/blob.hpp	/^  inline int count(int start_axis, int end_axis) const {$/;"	f	class:caffe::Blob
count_	include/caffe/blob.hpp	/^  int count_;$/;"	m	class:caffe::Blob
count_	include/caffe/layers/concat_layer.hpp	/^  int count_;$/;"	m	class:caffe::ConcatLayer
count_	include/caffe/layers/slice_layer.hpp	/^  int count_;$/;"	m	class:caffe::SliceLayer
count_	include/caffe/layers/split_layer.hpp	/^  int count_;$/;"	m	class:caffe::SplitLayer
cpu_data	src/caffe/blob.cpp	/^const Dtype* Blob<Dtype>::cpu_data() const {$/;"	f	class:caffe::Blob
cpu_data	src/caffe/syncedmem.cpp	/^const void* SyncedMemory::cpu_data() {$/;"	f	class:caffe::SyncedMemory
cpu_diff	src/caffe/blob.cpp	/^const Dtype* Blob<Dtype>::cpu_diff() const {$/;"	f	class:caffe::Blob
cpu_malloc_use_cuda_	include/caffe/syncedmem.hpp	/^  bool cpu_malloc_use_cuda_;$/;"	m	class:caffe::SyncedMemory
cpu_ptr_	include/caffe/syncedmem.hpp	/^  void* cpu_ptr_;$/;"	m	class:caffe::SyncedMemory
createActivationDescriptor	include/caffe/util/cudnn.hpp	/^inline void createActivationDescriptor(cudnnActivationDescriptor_t* activ_desc,$/;"	f	namespace:caffe::cudnn
createConvolutionDesc	include/caffe/util/cudnn.hpp	/^inline void createConvolutionDesc(cudnnConvolutionDescriptor_t* conv) {$/;"	f	namespace:caffe::cudnn
createFilterDesc	include/caffe/util/cudnn.hpp	/^inline void createFilterDesc(cudnnFilterDescriptor_t* desc,$/;"	f	namespace:caffe::cudnn
createPoolingDesc	include/caffe/util/cudnn.hpp	/^inline void createPoolingDesc(cudnnPoolingDescriptor_t* pool_desc,$/;"	f	namespace:caffe::cudnn
createTensor4dDesc	include/caffe/util/cudnn.hpp	/^inline void createTensor4dDesc(cudnnTensorDescriptor_t* desc) {$/;"	f	namespace:caffe::cudnn
create_field_index	tools/extra/plot_training_log.py.example	/^def create_field_index():$/;"	f
create_handle_vec	matlab/+caffe/private/caffe_.cpp	/^static mxArray* create_handle_vec(int ptr_num) {$/;"	f	file:
crop	python/caffe/coord_map.py	/^def crop(top_from, top_to):$/;"	f
crop	python/caffe/detector.py	/^    def crop(self, im, window):$/;"	m	class:Detector
crop	python/caffe/test/test_coord_map.py	/^from caffe.coord_map import coord_map_from_to, crop$/;"	i
crop_copy	src/caffe/layers/crop_layer.cpp	/^void CropLayer<Dtype>::crop_copy(const vector<Blob<Dtype>*>& bottom,$/;"	f	class:caffe::CropLayer
crop_params	python/caffe/coord_map.py	/^def crop_params(fn):$/;"	f
csv	tools/extra/parse_log.py	/^import csv$/;"	i
csv_filename	examples/finetune_flickr_style/assemble_data.py	/^    csv_filename = os.path.join(example_dirname, 'flickr_style.csv.gz')$/;"	v
cublasGetErrorString	src/caffe/common.cpp	/^const char* cublasGetErrorString(cublasStatus_t error) {$/;"	f	namespace:caffe
cublas_handle	include/caffe/common.hpp	/^  inline static cublasHandle_t cublas_handle() { return Get().cublas_handle_; }$/;"	f	class:caffe::Caffe
cublas_handle_	include/caffe/common.hpp	/^  cublasHandle_t cublas_handle_;$/;"	m	class:caffe::Caffe
cudnn	include/caffe/util/cudnn.hpp	/^namespace cudnn {$/;"	n	namespace:caffe
cudnn	src/caffe/util/cudnn.cpp	/^namespace cudnn {$/;"	n	namespace:caffe	file:
cudnnGetErrorString	include/caffe/util/cudnn.hpp	/^inline const char* cudnnGetErrorString(cudnnStatus_t status) {$/;"	f
curandGetErrorString	src/caffe/common.cpp	/^const char* curandGetErrorString(curandStatus_t error) {$/;"	f	namespace:caffe
curand_generator	include/caffe/common.hpp	/^  inline static curandGenerator_t curand_generator() {$/;"	f	class:caffe::Caffe
curand_generator_	include/caffe/common.hpp	/^  curandGenerator_t curand_generator_;$/;"	m	class:caffe::Caffe
current10_	src/gtest/gtest.h	/^    typename ParamGenerator<T10>::iterator current10_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current1_	src/gtest/gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current1_	src/gtest/gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
current1_	src/gtest/gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
current1_	src/gtest/gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
current1_	src/gtest/gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
current1_	src/gtest/gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
current1_	src/gtest/gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current1_	src/gtest/gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current1_	src/gtest/gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current2_	src/gtest/gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current2_	src/gtest/gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
current2_	src/gtest/gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
current2_	src/gtest/gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
current2_	src/gtest/gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
current2_	src/gtest/gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
current2_	src/gtest/gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current2_	src/gtest/gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current2_	src/gtest/gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current3_	src/gtest/gtest.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current3_	src/gtest/gtest.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
current3_	src/gtest/gtest.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
current3_	src/gtest/gtest.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
current3_	src/gtest/gtest.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
current3_	src/gtest/gtest.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current3_	src/gtest/gtest.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current3_	src/gtest/gtest.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current4_	src/gtest/gtest.h	/^    typename ParamGenerator<T4>::iterator current4_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current4_	src/gtest/gtest.h	/^    typename ParamGenerator<T4>::iterator current4_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
current4_	src/gtest/gtest.h	/^    typename ParamGenerator<T4>::iterator current4_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
current4_	src/gtest/gtest.h	/^    typename ParamGenerator<T4>::iterator current4_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
current4_	src/gtest/gtest.h	/^    typename ParamGenerator<T4>::iterator current4_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current4_	src/gtest/gtest.h	/^    typename ParamGenerator<T4>::iterator current4_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current4_	src/gtest/gtest.h	/^    typename ParamGenerator<T4>::iterator current4_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current5_	src/gtest/gtest.h	/^    typename ParamGenerator<T5>::iterator current5_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current5_	src/gtest/gtest.h	/^    typename ParamGenerator<T5>::iterator current5_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
current5_	src/gtest/gtest.h	/^    typename ParamGenerator<T5>::iterator current5_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
current5_	src/gtest/gtest.h	/^    typename ParamGenerator<T5>::iterator current5_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current5_	src/gtest/gtest.h	/^    typename ParamGenerator<T5>::iterator current5_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current5_	src/gtest/gtest.h	/^    typename ParamGenerator<T5>::iterator current5_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current6_	src/gtest/gtest.h	/^    typename ParamGenerator<T6>::iterator current6_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current6_	src/gtest/gtest.h	/^    typename ParamGenerator<T6>::iterator current6_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
current6_	src/gtest/gtest.h	/^    typename ParamGenerator<T6>::iterator current6_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current6_	src/gtest/gtest.h	/^    typename ParamGenerator<T6>::iterator current6_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current6_	src/gtest/gtest.h	/^    typename ParamGenerator<T6>::iterator current6_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current7_	src/gtest/gtest.h	/^    typename ParamGenerator<T7>::iterator current7_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current7_	src/gtest/gtest.h	/^    typename ParamGenerator<T7>::iterator current7_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current7_	src/gtest/gtest.h	/^    typename ParamGenerator<T7>::iterator current7_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current7_	src/gtest/gtest.h	/^    typename ParamGenerator<T7>::iterator current7_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current8_	src/gtest/gtest.h	/^    typename ParamGenerator<T8>::iterator current8_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current8_	src/gtest/gtest.h	/^    typename ParamGenerator<T8>::iterator current8_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current8_	src/gtest/gtest.h	/^    typename ParamGenerator<T8>::iterator current8_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current9_	src/gtest/gtest.h	/^    typename ParamGenerator<T9>::iterator current9_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current9_	src/gtest/gtest.h	/^    typename ParamGenerator<T9>::iterator current9_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current_file_	include/caffe/layers/hdf5_data_layer.hpp	/^  unsigned int current_file_;$/;"	m	class:caffe::HDF5DataLayer
current_row_	include/caffe/layers/hdf5_data_layer.hpp	/^  hsize_t current_row_;$/;"	m	class:caffe::HDF5DataLayer
current_step_	include/caffe/solver.hpp	/^  int current_step_;$/;"	m	class:caffe::Solver
current_test_case	src/gtest/gtest-all.cpp	/^  const TestCase* current_test_case() const { return current_test_case_; }$/;"	f	class:testing::internal::UnitTestImpl
current_test_case	src/gtest/gtest-all.cpp	/^const TestCase* UnitTest::current_test_case() const {$/;"	f	class:testing::UnitTest
current_test_case_	src/gtest/gtest-all.cpp	/^  TestCase* current_test_case_;$/;"	m	class:testing::internal::UnitTestImpl	file:
current_test_info	src/gtest/gtest-all.cpp	/^  TestInfo* current_test_info() { return current_test_info_; }$/;"	f	class:testing::internal::UnitTestImpl
current_test_info	src/gtest/gtest-all.cpp	/^  const TestInfo* current_test_info() const { return current_test_info_; }$/;"	f	class:testing::internal::UnitTestImpl
current_test_info	src/gtest/gtest-all.cpp	/^const TestInfo* UnitTest::current_test_info() const {$/;"	f	class:testing::UnitTest
current_test_info_	src/gtest/gtest-all.cpp	/^  TestInfo* current_test_info_;$/;"	m	class:testing::internal::UnitTestImpl	file:
current_test_result	src/gtest/gtest-all.cpp	/^TestResult* UnitTestImpl::current_test_result() {$/;"	f	class:testing::internal::UnitTestImpl
current_value_	src/gtest/gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current_value_	src/gtest/gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
current_value_	src/gtest/gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
current_value_	src/gtest/gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
current_value_	src/gtest/gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
current_value_	src/gtest/gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
current_value_	src/gtest/gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current_value_	src/gtest/gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current_value_	src/gtest/gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
cursor_	include/caffe/layers/data_layer.hpp	/^  shared_ptr<db::Cursor> cursor_;$/;"	m	class:caffe::DataLayer
cv	include/caffe/common.hpp	/^namespace cv { class Mat; }$/;"	n
cv2	tools/extra/resize_and_crop_images.py	/^import cv2$/;"	i
data	include/caffe/blob.hpp	/^  inline const shared_ptr<SyncedMemory>& data() const {$/;"	f	class:caffe::Blob
data	include/caffe/parallel.hpp	/^  inline Dtype* data() const {$/;"	f	class:caffe::Params
data	src/caffe/test/test_data/generate_sample_data.py	/^data = data.astype('float32')$/;"	v
data	src/caffe/test/test_data/generate_sample_data.py	/^data = data.reshape(num_rows, num_cols, height, width)$/;"	v
data	src/caffe/test/test_data/generate_sample_data.py	/^data = np.arange(total_size)$/;"	v
data	src/caffe/test/test_data/generate_sample_data.py	/^data = np.random.randn(num_rows, num_cols, height, width)$/;"	v
dataType	include/caffe/util/cudnn.hpp	/^template<> class dataType<double> {$/;"	c	namespace:caffe::cudnn
dataType	include/caffe/util/cudnn.hpp	/^template<> class dataType<float>  {$/;"	c	namespace:caffe::cudnn
dataType	include/caffe/util/nccl.hpp	/^template<> class dataType<double> {$/;"	c	namespace:caffe::nccl
dataType	include/caffe/util/nccl.hpp	/^template<> class dataType<float> {$/;"	c	namespace:caffe::nccl
data_	include/caffe/blob.hpp	/^  shared_ptr<SyncedMemory> data_;$/;"	m	class:caffe::Blob
data_	include/caffe/layers/base_data_layer.hpp	/^  Blob<Dtype> data_, label_;$/;"	m	class:caffe::Batch
data_	include/caffe/layers/memory_data_layer.hpp	/^  Dtype* data_;$/;"	m	class:caffe::MemoryDataLayer
data_	include/caffe/parallel.hpp	/^  Dtype* data_;                 \/\/ Network parameters$/;"	m	class:caffe::Params
data_	src/caffe/test/test_memory_data_layer.cpp	/^  Blob<Dtype>* const data_;$/;"	m	class:caffe::MemoryDataLayerTest	file:
data_	src/caffe/test/test_random_number_generator.cpp	/^  shared_ptr<SyncedMemory> data_;$/;"	m	class:caffe::RandomNumberGeneratorTest	file:
data_	src/gtest/gtest.h	/^  AssertHelperData* const data_;$/;"	m	class:testing::internal::AssertHelper
data_2_	src/caffe/test/test_random_number_generator.cpp	/^  shared_ptr<SyncedMemory> data_2_;$/;"	m	class:caffe::RandomNumberGeneratorTest	file:
data_at	include/caffe/blob.hpp	/^  inline Dtype data_at(const int n, const int c, const int h,$/;"	f	class:caffe::Blob
data_at	include/caffe/blob.hpp	/^  inline Dtype data_at(const vector<int>& index) const {$/;"	f	class:caffe::Blob
data_blob_	include/caffe/layers/hdf5_output_layer.hpp	/^  Blob<Dtype> data_blob_;$/;"	m	class:caffe::HDF5OutputLayer
data_blob_	src/caffe/test/test_memory_data_layer.cpp	/^  Blob<Dtype>* const data_blob_;$/;"	m	class:caffe::MemoryDataLayerTest	file:
data_mean_	include/caffe/data_transformer.hpp	/^  Blob<Dtype> data_mean_;$/;"	m	class:caffe::DataTransformer
data_mean_	include/caffe/layers/window_data_layer.hpp	/^  Blob<Dtype> data_mean_;$/;"	m	class:caffe::WindowDataLayer
data_permutation_	include/caffe/layers/hdf5_data_layer.hpp	/^  std::vector<unsigned int> data_permutation_;$/;"	m	class:caffe::HDF5DataLayer
data_transformer_	include/caffe/layers/base_data_layer.hpp	/^  shared_ptr<DataTransformer<Dtype> > data_transformer_;$/;"	m	class:caffe::BaseDataLayer
datetime	examples/web_demo/app.py	/^import datetime$/;"	i
datetime	tools/extra/extract_seconds.py	/^import datetime$/;"	i
datum_to_array	python/caffe/io.py	/^def datum_to_array(datum):$/;"	f
db	include/caffe/util/db.hpp	/^namespace caffe { namespace db {$/;"	n	namespace:caffe
db	include/caffe/util/db_leveldb.hpp	/^namespace caffe { namespace db {$/;"	n	namespace:caffe
db	include/caffe/util/db_lmdb.hpp	/^namespace caffe { namespace db {$/;"	n	namespace:caffe
db	src/caffe/util/db.cpp	/^namespace caffe { namespace db {$/;"	n	namespace:caffe	file:
db	src/caffe/util/db_leveldb.cpp	/^namespace caffe { namespace db {$/;"	n	namespace:caffe	file:
db	src/caffe/util/db_lmdb.cpp	/^namespace caffe { namespace db {$/;"	n	namespace:caffe	file:
db_	include/caffe/layers/data_layer.hpp	/^  shared_ptr<db::DB> db_;$/;"	m	class:caffe::DataLayer
db_	include/caffe/util/db_leveldb.hpp	/^  leveldb::DB* db_;$/;"	m	class:caffe::db::LevelDB
db_	include/caffe/util/db_leveldb.hpp	/^  leveldb::DB* db_;$/;"	m	class:caffe::db::LevelDBTransaction
death_test_count	src/gtest/gtest.h	/^  int death_test_count() const { return death_test_count_; }$/;"	f	class:testing::TestResult
death_test_count_	src/gtest/gtest.h	/^  int death_test_count_;$/;"	m	class:testing::TestResult
death_test_factory	src/gtest/gtest-all.cpp	/^  internal::DeathTestFactory* death_test_factory() {$/;"	f	class:testing::internal::UnitTestImpl
death_test_factory_	src/gtest/gtest-all.cpp	/^  internal::scoped_ptr<internal::DeathTestFactory> death_test_factory_;$/;"	m	class:testing::internal::UnitTestImpl	file:
death_test_style_	src/gtest/gtest-all.cpp	/^  String death_test_style_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
death_test_use_fork_	src/gtest/gtest-all.cpp	/^  bool death_test_use_fork_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
debug_info_	include/caffe/net.hpp	/^  bool debug_info_;$/;"	m	class:caffe::Net
default_	src/gtest/gtest.h	/^  const T default_;  \/\/ The default value for each thread.$/;"	m	class:std::tr1::ThreadLocal
default_args	examples/web_demo/app.py	/^    default_args = {$/;"	v	class:ImagenetClassifier
default_global_test_part_result_reporter_	src/gtest/gtest-all.cpp	/^  DefaultGlobalTestPartResultReporter default_global_test_part_result_reporter_;$/;"	m	class:testing::internal::UnitTestImpl	file:
default_per_thread_test_part_result_reporter_	src/gtest/gtest-all.cpp	/^      default_per_thread_test_part_result_reporter_;$/;"	m	class:testing::internal::UnitTestImpl	file:
default_result_printer	src/gtest/gtest.h	/^  TestEventListener* default_result_printer() const {$/;"	f	class:testing::TestEventListeners
default_result_printer_	src/gtest/gtest.h	/^  TestEventListener* default_result_printer_;$/;"	m	class:testing::TestEventListeners
default_xml_generator	src/gtest/gtest.h	/^  TestEventListener* default_xml_generator() const {$/;"	f	class:testing::TestEventListeners
default_xml_generator_	src/gtest/gtest.h	/^  TestEventListener* default_xml_generator_;$/;"	m	class:testing::TestEventListeners
defined_test_names_	src/gtest/gtest.h	/^  ::std::set<const char*> defined_test_names_;$/;"	m	class:testing::internal::TypedTestCasePState
delete_net	matlab/+caffe/private/caffe_.cpp	/^static void delete_net(MEX_ARGS) {$/;"	f	file:
delete_solver	matlab/+caffe/private/caffe_.cpp	/^static void delete_solver(MEX_ARGS) {$/;"	f	file:
delta_	src/caffe/test/test_gradient_based_solver.cpp	/^  Dtype delta_;  \/\/ Stability constant for RMSProp, AdaGrad, AdaDelta and Adam$/;"	m	class:caffe::GradientBasedSolverTest	file:
depart	src/gtest/gtest.h	/^  bool depart() {$/;"	f	class:testing::internal::linked_ptr_internal
depart	src/gtest/gtest.h	/^  void depart() {$/;"	f	class:testing::internal::linked_ptr
deprocess	examples/pycaffe/tools.py	/^    def deprocess(self, im):$/;"	m	class:SimpleTransformer
deprocess	python/caffe/io.py	/^    def deprocess(self, in_, data):$/;"	m	class:Transformer
description	examples/finetune_flickr_style/assemble_data.py	/^        description='Download a subset of Flickr Style to a directory')$/;"	v
dest_strides_	include/caffe/layers/crop_layer.hpp	/^  Blob<int> dest_strides_;$/;"	m	class:caffe::CropLayer
detect_selective_search	python/caffe/detector.py	/^    def detect_selective_search(self, image_fnames):$/;"	m	class:Detector
detect_windows	python/caffe/detector.py	/^    def detect_windows(self, images_windows):$/;"	m	class:Detector
device	include/caffe/test/test_caffe_main.hpp	/^  static const Caffe::Brew device = Caffe::CPU;$/;"	m	struct:caffe::CPUDevice
device	include/caffe/test/test_caffe_main.hpp	/^  static const Caffe::Brew device = Caffe::GPU;$/;"	m	struct:caffe::GPUDevice
device_	include/caffe/syncedmem.hpp	/^  int device_;$/;"	m	class:caffe::SyncedMemory
device_	src/caffe/parallel.cpp	/^  int device_;$/;"	m	class:caffe::Worker	file:
device_query	tools/caffe.cpp	/^RegisterBrewFunction(device_query);$/;"	v
device_query	tools/caffe.cpp	/^int device_query() {$/;"	f
df	examples/finetune_flickr_style/assemble_data.py	/^        df = df.iloc[:args.images]$/;"	v
df	examples/finetune_flickr_style/assemble_data.py	/^        df = df.loc[df['label'] < args.labels]$/;"	v
df	examples/finetune_flickr_style/assemble_data.py	/^    df = df.iloc[np.random.permutation(df.shape[0])]$/;"	v
df	examples/finetune_flickr_style/assemble_data.py	/^    df = df[results]$/;"	v
df	examples/finetune_flickr_style/assemble_data.py	/^    df = pd.read_csv(csv_filename, index_col=0, compression='gzip')$/;"	v
diff	include/caffe/blob.hpp	/^  inline const shared_ptr<SyncedMemory>& diff() const {$/;"	f	class:caffe::Blob
diff	include/caffe/parallel.hpp	/^  inline Dtype* diff() const {$/;"	f	class:caffe::Params
diff_	include/caffe/blob.hpp	/^  shared_ptr<SyncedMemory> diff_;$/;"	m	class:caffe::Blob
diff_	include/caffe/layers/contrastive_loss_layer.hpp	/^  Blob<Dtype> diff_;  \/\/ cached for backward pass$/;"	m	class:caffe::ContrastiveLossLayer
diff_	include/caffe/layers/euclidean_loss_layer.hpp	/^  Blob<Dtype> diff_;$/;"	m	class:caffe::EuclideanLossLayer
diff_	include/caffe/parallel.hpp	/^  Dtype* diff_;                 \/\/ Gradient$/;"	m	class:caffe::Params
diff_at	include/caffe/blob.hpp	/^  inline Dtype diff_at(const int n, const int c, const int h,$/;"	f	class:caffe::Blob
diff_at	include/caffe/blob.hpp	/^  inline Dtype diff_at(const vector<int>& index) const {$/;"	f	class:caffe::Blob
diff_scale_	include/caffe/layers/power_layer.hpp	/^  Dtype diff_scale_;$/;"	m	class:caffe::PowerLayer
diff_sq_	include/caffe/layers/contrastive_loss_layer.hpp	/^  Blob<Dtype> diff_sq_;  \/\/ tmp storage for gpu forward pass$/;"	m	class:caffe::ContrastiveLossLayer
difference_type	src/gtest/gtest.h	/^  typedef ptrdiff_t difference_type;$/;"	t	class:testing::internal::ParamIterator
dilation_	include/caffe/layers/base_conv_layer.hpp	/^  Blob<int> dilation_;$/;"	m	class:caffe::BaseConvolutionLayer
dilation_	include/caffe/layers/im2col_layer.hpp	/^  Blob<int> dilation_;$/;"	m	class:caffe::Im2colLayer
dim_	include/caffe/layers/bias_layer.hpp	/^  int outer_dim_, bias_dim_, inner_dim_, dim_;$/;"	m	class:caffe::BiasLayer
dim_	include/caffe/layers/reduction_layer.hpp	/^  int dim_;$/;"	m	class:caffe::ReductionLayer
disabled_test_count	src/gtest/gtest-all.cpp	/^int TestCase::disabled_test_count() const {$/;"	f	class:testing::TestCase
disabled_test_count	src/gtest/gtest-all.cpp	/^int UnitTest::disabled_test_count() const {$/;"	f	class:testing::UnitTest
disabled_test_count	src/gtest/gtest-all.cpp	/^int UnitTestImpl::disabled_test_count() const {$/;"	f	class:testing::internal::UnitTestImpl
dist_sq_	include/caffe/layers/contrastive_loss_layer.hpp	/^  Blob<Dtype> dist_sq_;  \/\/ cached for backward pass$/;"	m	class:caffe::ContrastiveLossLayer
division	python/caffe/coord_map.py	/^from __future__ import division$/;"	i
download_image	examples/finetune_flickr_style/assemble_data.py	/^def download_image(args_tuple):$/;"	f
draw	python/caffe/test/test_draw.py	/^import caffe.draw$/;"	i
draw	python/draw_net.py	/^import caffe.draw$/;"	i
draw_net	python/caffe/draw.py	/^def draw_net(caffe_net, rankdir, ext='png', phase=None):$/;"	f
draw_net_to_file	python/caffe/draw.py	/^def draw_net_to_file(caffe_net, filename, rankdir='LR', phase=None):$/;"	f
dtype	src/caffe/test/test_data/generate_sample_data.py	/^        dtype='uint8',$/;"	v
dummy_	src/gtest/gtest.h	/^  static bool dummy_;$/;"	m	class:testing::internal::TypeIdHelper
dummy_	src/gtest/gtest.h	/^bool TypeIdHelper<T>::dummy_ = false;$/;"	m	class:testing::internal::TypeIdHelper
elapsed_microseconds_	include/caffe/util/benchmark.hpp	/^  float elapsed_microseconds_;$/;"	m	class:caffe::Timer
elapsed_milliseconds_	include/caffe/util/benchmark.hpp	/^  float elapsed_milliseconds_;$/;"	m	class:caffe::Timer
elapsed_time	src/gtest/gtest-all.cpp	/^  TimeInMillis elapsed_time() const { return elapsed_time_; }$/;"	f	class:testing::internal::UnitTestImpl
elapsed_time	src/gtest/gtest-all.cpp	/^internal::TimeInMillis UnitTest::elapsed_time() const {$/;"	f	class:testing::UnitTest
elapsed_time	src/gtest/gtest.h	/^  TimeInMillis elapsed_time() const { return elapsed_time_; }$/;"	f	class:testing::TestCase
elapsed_time	src/gtest/gtest.h	/^  TimeInMillis elapsed_time() const { return elapsed_time_; }$/;"	f	class:testing::TestResult
elapsed_time_	src/gtest/gtest-all.cpp	/^  TimeInMillis elapsed_time_;$/;"	m	class:testing::internal::UnitTestImpl	file:
elapsed_time_	src/gtest/gtest.h	/^  TimeInMillis elapsed_time_;$/;"	m	class:testing::TestCase
elapsed_time_	src/gtest/gtest.h	/^  TimeInMillis elapsed_time_;$/;"	m	class:testing::TestResult
element_type	src/gtest/gtest.h	/^  typedef T element_type;$/;"	t	class:testing::internal::linked_ptr
embed_image_html	examples/web_demo/app.py	/^def embed_image_html(image):$/;"	f
empty	src/gtest/gtest.h	/^  bool empty() const { return (c_str() != NULL) && (length() == 0); }$/;"	f	class:testing::internal::String
end	src/gtest/gtest.h	/^  const_iterator end() const { return array_ + size_; }$/;"	f	class:testing::internal::NativeArray
end	src/gtest/gtest.h	/^  iterator end() const { return iterator(impl_->End()); }$/;"	f	class:testing::internal::ParamGenerator
end10_	src/gtest/gtest.h	/^    const typename ParamGenerator<T10>::iterator end10_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end1_	src/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end1_	src/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
end1_	src/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
end1_	src/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
end1_	src/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
end1_	src/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
end1_	src/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
end1_	src/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end1_	src/gtest/gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end2_	src/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end2_	src/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
end2_	src/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
end2_	src/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
end2_	src/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
end2_	src/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
end2_	src/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
end2_	src/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end2_	src/gtest/gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end3_	src/gtest/gtest.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end3_	src/gtest/gtest.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
end3_	src/gtest/gtest.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
end3_	src/gtest/gtest.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
end3_	src/gtest/gtest.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
end3_	src/gtest/gtest.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
end3_	src/gtest/gtest.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end3_	src/gtest/gtest.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end4_	src/gtest/gtest.h	/^    const typename ParamGenerator<T4>::iterator end4_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end4_	src/gtest/gtest.h	/^    const typename ParamGenerator<T4>::iterator end4_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
end4_	src/gtest/gtest.h	/^    const typename ParamGenerator<T4>::iterator end4_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
end4_	src/gtest/gtest.h	/^    const typename ParamGenerator<T4>::iterator end4_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
end4_	src/gtest/gtest.h	/^    const typename ParamGenerator<T4>::iterator end4_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
end4_	src/gtest/gtest.h	/^    const typename ParamGenerator<T4>::iterator end4_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end4_	src/gtest/gtest.h	/^    const typename ParamGenerator<T4>::iterator end4_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end5_	src/gtest/gtest.h	/^    const typename ParamGenerator<T5>::iterator end5_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end5_	src/gtest/gtest.h	/^    const typename ParamGenerator<T5>::iterator end5_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
end5_	src/gtest/gtest.h	/^    const typename ParamGenerator<T5>::iterator end5_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
end5_	src/gtest/gtest.h	/^    const typename ParamGenerator<T5>::iterator end5_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
end5_	src/gtest/gtest.h	/^    const typename ParamGenerator<T5>::iterator end5_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end5_	src/gtest/gtest.h	/^    const typename ParamGenerator<T5>::iterator end5_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end6_	src/gtest/gtest.h	/^    const typename ParamGenerator<T6>::iterator end6_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end6_	src/gtest/gtest.h	/^    const typename ParamGenerator<T6>::iterator end6_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
end6_	src/gtest/gtest.h	/^    const typename ParamGenerator<T6>::iterator end6_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
end6_	src/gtest/gtest.h	/^    const typename ParamGenerator<T6>::iterator end6_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end6_	src/gtest/gtest.h	/^    const typename ParamGenerator<T6>::iterator end6_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end7_	src/gtest/gtest.h	/^    const typename ParamGenerator<T7>::iterator end7_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end7_	src/gtest/gtest.h	/^    const typename ParamGenerator<T7>::iterator end7_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
end7_	src/gtest/gtest.h	/^    const typename ParamGenerator<T7>::iterator end7_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end7_	src/gtest/gtest.h	/^    const typename ParamGenerator<T7>::iterator end7_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end8_	src/gtest/gtest.h	/^    const typename ParamGenerator<T8>::iterator end8_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end8_	src/gtest/gtest.h	/^    const typename ParamGenerator<T8>::iterator end8_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end8_	src/gtest/gtest.h	/^    const typename ParamGenerator<T8>::iterator end8_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end9_	src/gtest/gtest.h	/^    const typename ParamGenerator<T9>::iterator end9_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end9_	src/gtest/gtest.h	/^    const typename ParamGenerator<T9>::iterator end9_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end_	src/gtest/gtest.h	/^  const T end_;$/;"	m	class:testing::internal::RangeGenerator
end_index_	src/gtest/gtest.h	/^  const int end_index_;$/;"	m	class:testing::internal::RangeGenerator
entry	src/caffe/internal_thread.cpp	/^void InternalThread::entry(int device, Caffe::Brew mode, int rand_seed,$/;"	f	class:caffe::InternalThread
environ	src/gtest/gtest-all.cpp	/^extern "C" char** environ;$/;"	m	namespace:testing::internal	file:
environments	src/gtest/gtest-all.cpp	/^  std::vector<Environment*>& environments() { return environments_; }$/;"	f	class:testing::internal::UnitTestImpl
environments_	src/gtest/gtest-all.cpp	/^  std::vector<Environment*> environments_;$/;"	m	class:testing::internal::UnitTestImpl	file:
eps_	include/caffe/layers/batch_norm_layer.hpp	/^  Dtype eps_;$/;"	m	class:caffe::BatchNormLayer
eps_	include/caffe/layers/mvn_layer.hpp	/^  Dtype eps_;$/;"	m	class:caffe::MVNLayer
epsilon_	src/caffe/test/test_blob.cpp	/^  Dtype epsilon_;$/;"	m	class:caffe::BlobMathTest	file:
epsilon_	src/caffe/test/test_lrn_layer.cpp	/^  Dtype epsilon_;$/;"	m	class:caffe::CuDNNLRNLayerTest	file:
epsilon_	src/caffe/test/test_lrn_layer.cpp	/^  Dtype epsilon_;$/;"	m	class:caffe::LRNLayerTest	file:
errno	scripts/split_caffe_proto.py	/^import errno$/;"	i
event_handle_	src/gtest/gtest-all.cpp	/^  AutoHandle event_handle_;$/;"	m	class:testing::internal::WindowsDeathTest	file:
example_dirname	examples/finetune_flickr_style/assemble_data.py	/^example_dirname = os.path.abspath(os.path.dirname(__file__))$/;"	v
exception_net_file	python/caffe/test/test_python_layer.py	/^def exception_net_file():$/;"	f
exifutil	examples/web_demo/app.py	/^import exifutil$/;"	i
exit_code_	src/gtest/gtest.h	/^  const int exit_code_;$/;"	m	class:testing::ExitedWithCode
exponent_bits	src/gtest/gtest.h	/^  Bits exponent_bits() const { return kExponentBitMask & u_.bits_; }$/;"	f	class:testing::internal::FloatingPoint
expose_hidden_	include/caffe/layers/recurrent_layer.hpp	/^  bool expose_hidden_;$/;"	m	class:caffe::RecurrentLayer
extract_datetime_from_line	tools/extra/extract_seconds.py	/^def extract_datetime_from_line(line, year):$/;"	f
extract_seconds	tools/extra/extract_seconds.py	/^def extract_seconds(input_file, output_file):$/;"	f
extract_seconds	tools/extra/parse_log.py	/^import extract_seconds$/;"	i
f0	src/gtest/gtest.h	/^  explicit tuple(GTEST_BY_REF_(T0) f0, GTEST_BY_REF_(T1) f1,$/;"	m	class:std::tr1::tuple
f0_	src/gtest/gtest.h	/^  T0 f0_;$/;"	m	class:std::tr1::tuple
f1	src/gtest/gtest.h	/^  explicit tuple(GTEST_BY_REF_(T0) f0, GTEST_BY_REF_(T1) f1,$/;"	m	class:std::tr1::tuple
f1_	src/gtest/gtest.h	/^  T1 f1_;$/;"	m	class:std::tr1::tuple
f2	src/gtest/gtest.h	/^      GTEST_BY_REF_(T2) f2, GTEST_BY_REF_(T3) f3, GTEST_BY_REF_(T4) f4,$/;"	m	class:std::tr1::tuple
f2_	src/gtest/gtest.h	/^  T2 f2_;$/;"	m	class:std::tr1::tuple
f3	src/gtest/gtest.h	/^      GTEST_BY_REF_(T2) f2, GTEST_BY_REF_(T3) f3, GTEST_BY_REF_(T4) f4,$/;"	m	class:std::tr1::tuple
f3_	src/gtest/gtest.h	/^  T3 f3_;$/;"	m	class:std::tr1::tuple
f4	src/gtest/gtest.h	/^      GTEST_BY_REF_(T2) f2, GTEST_BY_REF_(T3) f3, GTEST_BY_REF_(T4) f4,$/;"	m	class:std::tr1::tuple
f4_	src/gtest/gtest.h	/^  T4 f4_;$/;"	m	class:std::tr1::tuple
f5	src/gtest/gtest.h	/^      GTEST_BY_REF_(T5) f5, GTEST_BY_REF_(T6) f6, GTEST_BY_REF_(T7) f7,$/;"	m	class:std::tr1::tuple
f5_	src/gtest/gtest.h	/^  T5 f5_;$/;"	m	class:std::tr1::tuple
f6	src/gtest/gtest.h	/^      GTEST_BY_REF_(T5) f5, GTEST_BY_REF_(T6) f6, GTEST_BY_REF_(T7) f7,$/;"	m	class:std::tr1::tuple
f6_	src/gtest/gtest.h	/^  T6 f6_;$/;"	m	class:std::tr1::tuple
f7	src/gtest/gtest.h	/^      GTEST_BY_REF_(T5) f5, GTEST_BY_REF_(T6) f6, GTEST_BY_REF_(T7) f7,$/;"	m	class:std::tr1::tuple
f7_	src/gtest/gtest.h	/^  T7 f7_;$/;"	m	class:std::tr1::tuple
f8	src/gtest/gtest.h	/^      GTEST_BY_REF_(T8) f8, GTEST_BY_REF_(T9) f9) : f0_(f0), f1_(f1), f2_(f2),$/;"	m	class:std::tr1::tuple
f8_	src/gtest/gtest.h	/^  T8 f8_;$/;"	m	class:std::tr1::tuple
f9_	src/gtest/gtest.h	/^      f3_(f3), f4_(f4), f5_(f5), f6_(f6), f7_(f7), f8_(f8), f9_(f9) {}$/;"	f	class:std::tr1::tuple
f9_	src/gtest/gtest.h	/^      f9_(t.f9_) {}$/;"	f	class:std::tr1::tuple
f9_	src/gtest/gtest.h	/^  T9 f9_;$/;"	m	class:std::tr1::tuple
factory_	src/gtest/gtest.h	/^  internal::TestFactoryBase* const factory_;  \/\/ The factory that creates$/;"	m	class:testing::TestInfo::internal
failed	src/gtest/gtest.h	/^  bool failed() const { return type_ != kSuccess; }$/;"	f	class:testing::TestPartResult
failed_test_case_count	src/gtest/gtest-all.cpp	/^int UnitTest::failed_test_case_count() const {$/;"	f	class:testing::UnitTest
failed_test_case_count	src/gtest/gtest-all.cpp	/^int UnitTestImpl::failed_test_case_count() const {$/;"	f	class:testing::internal::UnitTestImpl
failed_test_count	src/gtest/gtest-all.cpp	/^int TestCase::failed_test_count() const {$/;"	f	class:testing::TestCase
failed_test_count	src/gtest/gtest-all.cpp	/^int UnitTest::failed_test_count() const { return impl()->failed_test_count(); }$/;"	f	class:testing::UnitTest
failed_test_count	src/gtest/gtest-all.cpp	/^int UnitTestImpl::failed_test_count() const {$/;"	f	class:testing::internal::UnitTestImpl
failure_message	src/gtest/gtest.h	/^  const char* failure_message() const { return message(); }$/;"	f	class:testing::AssertionResult
false_type	src/gtest/gtest.h	/^typedef bool_constant<false> false_type;$/;"	t	namespace:std::tr1
fatally_failed	src/gtest/gtest.h	/^  bool fatally_failed() const { return type_ == kFatalFailure; }$/;"	f	class:testing::TestPartResult
fc_relu	examples/pycaffe/caffenet.py	/^def fc_relu(bottom, nout):$/;"	f
fd_	src/gtest/gtest-all.cpp	/^  const int fd_;  \/\/ A stream to capture.$/;"	m	class:testing::internal::CapturedStream	file:
feature_extraction_pipeline	tools/extract_features.cpp	/^int feature_extraction_pipeline(int argc, char** argv) {$/;"	f
fg_windows_	include/caffe/layers/window_data_layer.hpp	/^  vector<vector<float> > fg_windows_;$/;"	m	class:caffe::WindowDataLayer
file	src/gtest/gtest-all.cpp	/^  const char* file;$/;"	m	struct:testing::internal::TraceInfo	file:
file	src/gtest/gtest.h	/^    const char*        const file;$/;"	m	struct:testing::internal::AssertHelper::AssertHelperData
file	src/gtest/gtest.h	/^  String file() const { return file_; }$/;"	f	class:testing::internal::InternalRunDeathTestFlag
file_	src/gtest/gtest-all.cpp	/^  const char* const file_;$/;"	m	class:testing::internal::ExecDeathTest	file:
file_	src/gtest/gtest-all.cpp	/^  const char* const file_;$/;"	m	class:testing::internal::WindowsDeathTest	file:
file_	src/gtest/gtest.h	/^  String file_;$/;"	m	class:testing::internal::InternalRunDeathTestFlag
file_id_	include/caffe/layers/hdf5_output_layer.hpp	/^  hid_t file_id_;$/;"	m	class:caffe::HDF5OutputLayer
file_name	include/caffe/layers/hdf5_output_layer.hpp	/^  inline std::string file_name() const { return file_name_; }$/;"	f	class:caffe::HDF5OutputLayer
file_name	src/gtest/gtest.h	/^  const char* file_name() const { return file_name_.c_str(); }$/;"	f	class:testing::TestPartResult
file_name_	include/caffe/layers/hdf5_output_layer.hpp	/^  std::string file_name_;$/;"	m	class:caffe::HDF5OutputLayer
file_name_	src/gtest/gtest.h	/^  internal::String file_name_;$/;"	m	class:testing::TestPartResult
file_opened_	include/caffe/layers/hdf5_output_layer.hpp	/^  bool file_opened_;$/;"	m	class:caffe::HDF5OutputLayer
file_permutation_	include/caffe/layers/hdf5_data_layer.hpp	/^  std::vector<unsigned int> file_permutation_;$/;"	m	class:caffe::HDF5DataLayer
filename	examples/finetune_flickr_style/assemble_data.py	/^        filename = os.path.join(training_dirname, '{}.txt'.format(split))$/;"	v
filename	scripts/copy_notebook.py	/^filename = sys.argv[1]$/;"	v
filename	src/caffe/test/test_hdf5data_layer.cpp	/^  string* filename;$/;"	m	class:caffe::HDF5DataLayerTest	file:
filename_	src/caffe/test/test_data_layer.cpp	/^  shared_ptr<string> filename_;$/;"	m	class:caffe::DataLayerTest	file:
filename_	src/caffe/test/test_image_data_layer.cpp	/^  string filename_;$/;"	m	class:caffe::ImageDataLayerTest	file:
filename_	src/gtest/gtest-all.cpp	/^  ::std::string filename_;$/;"	m	class:testing::internal::CapturedStream	file:
filename_reshape_	src/caffe/test/test_image_data_layer.cpp	/^  string filename_reshape_;$/;"	m	class:caffe::ImageDataLayerTest	file:
filename_space_	src/caffe/test/test_image_data_layer.cpp	/^  string filename_space_;$/;"	m	class:caffe::ImageDataLayerTest	file:
filler_	src/caffe/test/test_filler.cpp	/^  shared_ptr<ConstantFiller<Dtype> > filler_;$/;"	m	class:caffe::ConstantFillerTest	file:
filler_	src/caffe/test/test_filler.cpp	/^  shared_ptr<GaussianFiller<Dtype> > filler_;$/;"	m	class:caffe::GaussianFillerTest	file:
filler_	src/caffe/test/test_filler.cpp	/^  shared_ptr<MSRAFiller<Dtype> > filler_;$/;"	m	class:caffe::MSRAFillerTest	file:
filler_	src/caffe/test/test_filler.cpp	/^  shared_ptr<PositiveUnitballFiller<Dtype> > filler_;$/;"	m	class:caffe::PositiveUnitballFillerTest	file:
filler_	src/caffe/test/test_filler.cpp	/^  shared_ptr<UniformFiller<Dtype> > filler_;$/;"	m	class:caffe::UniformFillerTest	file:
filler_	src/caffe/test/test_filler.cpp	/^  shared_ptr<XavierFiller<Dtype> > filler_;$/;"	m	class:caffe::XavierFillerTest	file:
filler_param_	include/caffe/filler.hpp	/^  FillerParameter filler_param_;$/;"	m	class:caffe::Filler
filler_param_	src/caffe/test/test_filler.cpp	/^  FillerParameter filler_param_;$/;"	m	class:caffe::ConstantFillerTest	file:
filler_param_	src/caffe/test/test_filler.cpp	/^  FillerParameter filler_param_;$/;"	m	class:caffe::GaussianFillerTest	file:
filler_param_	src/caffe/test/test_filler.cpp	/^  FillerParameter filler_param_;$/;"	m	class:caffe::MSRAFillerTest	file:
filler_param_	src/caffe/test/test_filler.cpp	/^  FillerParameter filler_param_;$/;"	m	class:caffe::PositiveUnitballFillerTest	file:
filler_param_	src/caffe/test/test_filler.cpp	/^  FillerParameter filler_param_;$/;"	m	class:caffe::UniformFillerTest	file:
filler_param_	src/caffe/test/test_filler.cpp	/^  FillerParameter filler_param_;$/;"	m	class:caffe::XavierFillerTest	file:
fillers_	include/caffe/layers/dummy_data_layer.hpp	/^  vector<shared_ptr<Filler<Dtype> > > fillers_;$/;"	m	class:caffe::DummyDataLayer
filter_	src/gtest/gtest-all.cpp	/^  String filter_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
filter_desc_	include/caffe/layers/cudnn_conv_layer.hpp	/^  cudnnFilterDescriptor_t      filter_desc_;$/;"	m	class:caffe::CuDNNConvolutionLayer
finished_	src/gtest/gtest.h	/^  bool finished_;  \/\/ true iff we know that the thread function has finished.$/;"	m	class:std::tr1::ThreadWithParam
first_reshape_	include/caffe/layers/filter_layer.hpp	/^  bool first_reshape_;$/;"	m	class:caffe::FilterLayer
fix_initial_nan_learning_rate	tools/extra/parse_log.py	/^def fix_initial_nan_learning_rate(dict_list):$/;"	f
fixture_class_id_	src/gtest/gtest.h	/^  const internal::TypeId fixture_class_id_;   \/\/ ID of the test fixture class$/;"	m	class:testing::TestInfo
flask	examples/web_demo/app.py	/^import flask$/;"	i
flatten_layers_	include/caffe/layers/spp_layer.hpp	/^  vector<FlattenLayer<Dtype>*> flatten_layers_;$/;"	m	class:caffe::SPPLayer
flatten_outputs_	include/caffe/layers/spp_layer.hpp	/^  vector<Blob<Dtype>*> flatten_outputs_;$/;"	m	class:caffe::SPPLayer
flatten_top_vecs_	include/caffe/layers/spp_layer.hpp	/^  vector<vector<Blob<Dtype>*>*> flatten_top_vecs_;$/;"	m	class:caffe::SPPLayer
fn	scripts/split_caffe_proto.py	/^        fn = os.path.join($/;"	v
for	scripts/cpp_lint.py	/^import math  # for log$/;"	i
force_nd_im2col_	include/caffe/layers/base_conv_layer.hpp	/^  bool force_nd_im2col_;$/;"	m	class:caffe::BaseConvolutionLayer
force_nd_im2col_	include/caffe/layers/im2col_layer.hpp	/^  bool force_nd_im2col_;$/;"	m	class:caffe::Im2colLayer
format_int	include/caffe/util/format.hpp	/^inline std::string format_int(int n, int numberOfLeadingZeros = 0 ) {$/;"	f	namespace:caffe
format_param	tools/extra/summarize.py	/^def format_param(param):$/;"	f
forward	examples/pycaffe/layers/pascal_multilabel_datalayers.py	/^    def forward(self, bottom, top):$/;"	m	class:PascalMultilabelDataLayerSync
forward	examples/pycaffe/layers/pyloss.py	/^    def forward(self, bottom, top):$/;"	m	class:EuclideanLossLayer
forward	python/caffe/test/test_python_layer.py	/^    def forward(self, bottom, top):$/;"	m	class:ParameterLayer
forward	python/caffe/test/test_python_layer.py	/^    def forward(self, bottom, top):$/;"	m	class:PhaseLayer
forward	python/caffe/test/test_python_layer.py	/^    def forward(self, bottom, top):$/;"	m	class:SimpleLayer
forward	python/caffe/test/test_python_layer_with_param_str.py	/^    def forward(self, bottom, top):$/;"	m	class:SimpleParamLayer
forward_cpu_bias	src/caffe/layers/base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::forward_cpu_bias(Dtype* output,$/;"	f	class:caffe::BaseConvolutionLayer
forward_cpu_gemm	src/caffe/layers/base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::forward_cpu_gemm(const Dtype* input,$/;"	f	class:caffe::BaseConvolutionLayer
forward_gpu_bias	src/caffe/layers/base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::forward_gpu_bias(Dtype* output,$/;"	f	class:caffe::BaseConvolutionLayer
forward_gpu_gemm	src/caffe/layers/base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::forward_gpu_gemm(const Dtype* input,$/;"	f	class:caffe::BaseConvolutionLayer
forwarding_enabled	src/gtest/gtest-all.cpp	/^  bool forwarding_enabled() const { return forwarding_enabled_; }$/;"	f	class:testing::internal::TestEventRepeater
forwarding_enabled_	src/gtest/gtest-all.cpp	/^  bool forwarding_enabled_;$/;"	m	class:testing::internal::TestEventRepeater	file:
fraction_bits	src/gtest/gtest.h	/^  Bits fraction_bits() const { return kFractionBitMask & u_.bits_; }$/;"	f	class:testing::internal::FloatingPoint
full_pattern_	src/gtest/gtest.h	/^  const char* full_pattern_;  \/\/ For FullMatch();$/;"	m	class:std::tr1::RE
full_regex_	src/gtest/gtest.h	/^  regex_t full_regex_;     \/\/ For FullMatch().$/;"	m	class:std::tr1::RE
func	matlab/+caffe/private/caffe_.cpp	/^  void (*func)(MEX_ARGS);$/;"	m	struct:handler_registry	file:
func	tools/caffe.cpp	/^  __Registerer_##func() { \\$/;"	f	class:__anon7::func
func	tools/caffe.cpp	/^__Registerer_##func g_registerer_##func; \\$/;"	m	namespace:__anon7	file:
func	tools/caffe.cpp	/^class __Registerer_##func { \\$/;"	c	namespace:__anon7	file:
func_	src/gtest/gtest.h	/^  const UserThreadFunc func_;  \/\/ User-supplied thread function.$/;"	m	class:std::tr1::ThreadWithParam
fwd_algo_	include/caffe/layers/cudnn_conv_layer.hpp	/^  cudnnConvolutionFwdAlgo_t *fwd_algo_;$/;"	m	class:caffe::CuDNNConvolutionLayer
g10_	src/gtest/gtest.h	/^  const Generator10 g10_;$/;"	m	class:testing::internal::CartesianProductHolder10
g10_	src/gtest/gtest.h	/^  const ParamGenerator<T10> g10_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g1_	src/gtest/gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder10
g1_	src/gtest/gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder2
g1_	src/gtest/gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder3
g1_	src/gtest/gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder4
g1_	src/gtest/gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder5
g1_	src/gtest/gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder6
g1_	src/gtest/gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder7
g1_	src/gtest/gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder8
g1_	src/gtest/gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder9
g1_	src/gtest/gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g1_	src/gtest/gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator2
g1_	src/gtest/gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator3
g1_	src/gtest/gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator4
g1_	src/gtest/gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator5
g1_	src/gtest/gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator6
g1_	src/gtest/gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator7
g1_	src/gtest/gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g1_	src/gtest/gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g2_	src/gtest/gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder10
g2_	src/gtest/gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder2
g2_	src/gtest/gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder3
g2_	src/gtest/gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder4
g2_	src/gtest/gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder5
g2_	src/gtest/gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder6
g2_	src/gtest/gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder7
g2_	src/gtest/gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder8
g2_	src/gtest/gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder9
g2_	src/gtest/gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g2_	src/gtest/gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator2
g2_	src/gtest/gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator3
g2_	src/gtest/gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator4
g2_	src/gtest/gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator5
g2_	src/gtest/gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator6
g2_	src/gtest/gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator7
g2_	src/gtest/gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g2_	src/gtest/gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g3_	src/gtest/gtest.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder10
g3_	src/gtest/gtest.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder3
g3_	src/gtest/gtest.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder4
g3_	src/gtest/gtest.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder5
g3_	src/gtest/gtest.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder6
g3_	src/gtest/gtest.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder7
g3_	src/gtest/gtest.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder8
g3_	src/gtest/gtest.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder9
g3_	src/gtest/gtest.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g3_	src/gtest/gtest.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator3
g3_	src/gtest/gtest.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator4
g3_	src/gtest/gtest.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator5
g3_	src/gtest/gtest.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator6
g3_	src/gtest/gtest.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator7
g3_	src/gtest/gtest.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g3_	src/gtest/gtest.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g4_	src/gtest/gtest.h	/^  const Generator4 g4_;$/;"	m	class:testing::internal::CartesianProductHolder10
g4_	src/gtest/gtest.h	/^  const Generator4 g4_;$/;"	m	class:testing::internal::CartesianProductHolder4
g4_	src/gtest/gtest.h	/^  const Generator4 g4_;$/;"	m	class:testing::internal::CartesianProductHolder5
g4_	src/gtest/gtest.h	/^  const Generator4 g4_;$/;"	m	class:testing::internal::CartesianProductHolder6
g4_	src/gtest/gtest.h	/^  const Generator4 g4_;$/;"	m	class:testing::internal::CartesianProductHolder7
g4_	src/gtest/gtest.h	/^  const Generator4 g4_;$/;"	m	class:testing::internal::CartesianProductHolder8
g4_	src/gtest/gtest.h	/^  const Generator4 g4_;$/;"	m	class:testing::internal::CartesianProductHolder9
g4_	src/gtest/gtest.h	/^  const ParamGenerator<T4> g4_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g4_	src/gtest/gtest.h	/^  const ParamGenerator<T4> g4_;$/;"	m	class:testing::internal::CartesianProductGenerator4
g4_	src/gtest/gtest.h	/^  const ParamGenerator<T4> g4_;$/;"	m	class:testing::internal::CartesianProductGenerator5
g4_	src/gtest/gtest.h	/^  const ParamGenerator<T4> g4_;$/;"	m	class:testing::internal::CartesianProductGenerator6
g4_	src/gtest/gtest.h	/^  const ParamGenerator<T4> g4_;$/;"	m	class:testing::internal::CartesianProductGenerator7
g4_	src/gtest/gtest.h	/^  const ParamGenerator<T4> g4_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g4_	src/gtest/gtest.h	/^  const ParamGenerator<T4> g4_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g5_	src/gtest/gtest.h	/^  const Generator5 g5_;$/;"	m	class:testing::internal::CartesianProductHolder10
g5_	src/gtest/gtest.h	/^  const Generator5 g5_;$/;"	m	class:testing::internal::CartesianProductHolder5
g5_	src/gtest/gtest.h	/^  const Generator5 g5_;$/;"	m	class:testing::internal::CartesianProductHolder6
g5_	src/gtest/gtest.h	/^  const Generator5 g5_;$/;"	m	class:testing::internal::CartesianProductHolder7
g5_	src/gtest/gtest.h	/^  const Generator5 g5_;$/;"	m	class:testing::internal::CartesianProductHolder8
g5_	src/gtest/gtest.h	/^  const Generator5 g5_;$/;"	m	class:testing::internal::CartesianProductHolder9
g5_	src/gtest/gtest.h	/^  const ParamGenerator<T5> g5_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g5_	src/gtest/gtest.h	/^  const ParamGenerator<T5> g5_;$/;"	m	class:testing::internal::CartesianProductGenerator5
g5_	src/gtest/gtest.h	/^  const ParamGenerator<T5> g5_;$/;"	m	class:testing::internal::CartesianProductGenerator6
g5_	src/gtest/gtest.h	/^  const ParamGenerator<T5> g5_;$/;"	m	class:testing::internal::CartesianProductGenerator7
g5_	src/gtest/gtest.h	/^  const ParamGenerator<T5> g5_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g5_	src/gtest/gtest.h	/^  const ParamGenerator<T5> g5_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g6_	src/gtest/gtest.h	/^  const Generator6 g6_;$/;"	m	class:testing::internal::CartesianProductHolder10
g6_	src/gtest/gtest.h	/^  const Generator6 g6_;$/;"	m	class:testing::internal::CartesianProductHolder6
g6_	src/gtest/gtest.h	/^  const Generator6 g6_;$/;"	m	class:testing::internal::CartesianProductHolder7
g6_	src/gtest/gtest.h	/^  const Generator6 g6_;$/;"	m	class:testing::internal::CartesianProductHolder8
g6_	src/gtest/gtest.h	/^  const Generator6 g6_;$/;"	m	class:testing::internal::CartesianProductHolder9
g6_	src/gtest/gtest.h	/^  const ParamGenerator<T6> g6_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g6_	src/gtest/gtest.h	/^  const ParamGenerator<T6> g6_;$/;"	m	class:testing::internal::CartesianProductGenerator6
g6_	src/gtest/gtest.h	/^  const ParamGenerator<T6> g6_;$/;"	m	class:testing::internal::CartesianProductGenerator7
g6_	src/gtest/gtest.h	/^  const ParamGenerator<T6> g6_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g6_	src/gtest/gtest.h	/^  const ParamGenerator<T6> g6_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g7_	src/gtest/gtest.h	/^  const Generator7 g7_;$/;"	m	class:testing::internal::CartesianProductHolder10
g7_	src/gtest/gtest.h	/^  const Generator7 g7_;$/;"	m	class:testing::internal::CartesianProductHolder7
g7_	src/gtest/gtest.h	/^  const Generator7 g7_;$/;"	m	class:testing::internal::CartesianProductHolder8
g7_	src/gtest/gtest.h	/^  const Generator7 g7_;$/;"	m	class:testing::internal::CartesianProductHolder9
g7_	src/gtest/gtest.h	/^  const ParamGenerator<T7> g7_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g7_	src/gtest/gtest.h	/^  const ParamGenerator<T7> g7_;$/;"	m	class:testing::internal::CartesianProductGenerator7
g7_	src/gtest/gtest.h	/^  const ParamGenerator<T7> g7_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g7_	src/gtest/gtest.h	/^  const ParamGenerator<T7> g7_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g8_	src/gtest/gtest.h	/^  const Generator8 g8_;$/;"	m	class:testing::internal::CartesianProductHolder10
g8_	src/gtest/gtest.h	/^  const Generator8 g8_;$/;"	m	class:testing::internal::CartesianProductHolder8
g8_	src/gtest/gtest.h	/^  const Generator8 g8_;$/;"	m	class:testing::internal::CartesianProductHolder9
g8_	src/gtest/gtest.h	/^  const ParamGenerator<T8> g8_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g8_	src/gtest/gtest.h	/^  const ParamGenerator<T8> g8_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g8_	src/gtest/gtest.h	/^  const ParamGenerator<T8> g8_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g9_	src/gtest/gtest.h	/^  const Generator9 g9_;$/;"	m	class:testing::internal::CartesianProductHolder10
g9_	src/gtest/gtest.h	/^  const Generator9 g9_;$/;"	m	class:testing::internal::CartesianProductHolder9
g9_	src/gtest/gtest.h	/^  const ParamGenerator<T9> g9_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g9_	src/gtest/gtest.h	/^  const ParamGenerator<T9> g9_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g_argvs	src/gtest/gtest-all.cpp	/^::std::vector<String> g_argvs;$/;"	m	namespace:testing::internal	file:
g_brew_map	tools/caffe.cpp	/^BrewMap g_brew_map;$/;"	v
g_captured_stderr	src/gtest/gtest-all.cpp	/^static CapturedStream* g_captured_stderr = NULL;$/;"	m	namespace:testing::internal	file:
g_captured_stdout	src/gtest/gtest-all.cpp	/^static CapturedStream* g_captured_stdout = NULL;$/;"	m	namespace:testing::internal	file:
g_executable_path	src/gtest/gtest-all.cpp	/^String g_executable_path;$/;"	m	namespace:testing::internal	file:
g_help_flag	src/gtest/gtest-all.cpp	/^bool g_help_flag = false;$/;"	m	namespace:testing::internal	file:
g_init_gtest_count	src/gtest/gtest-all.cpp	/^int g_init_gtest_count = 0;$/;"	m	namespace:testing::internal	file:
generator	src/caffe/common.cpp	/^void* Caffe::RNG::generator() {$/;"	f	class:caffe::Caffe::RNG
generator_	include/caffe/common.hpp	/^    shared_ptr<Generator> generator_;$/;"	m	class:caffe::Caffe::RNG
get	src/gtest/gtest.h	/^  T* get() const { return ptr_; }$/;"	f	struct:std::tr1::tuple_element
get	src/gtest/gtest.h	/^  T* get() const { return value_; }$/;"	f	class:testing::internal::linked_ptr
get	src/gtest/gtest.h	/^  const T& get() const { return *pointer(); }$/;"	f	class:std::tr1::ThreadLocal
get	src/gtest/gtest.h	/^  const T& get() const { return value_; }$/;"	f	class:std::tr1::ThreadLocal
getDevice	src/caffe/parallel.cpp	/^static int getDevice() {$/;"	f	namespace:caffe
getFilenames	python/caffe/test/test_draw.py	/^def getFilenames():$/;"	f
get_chart_type_description	tools/extra/plot_training_log.py.example	/^def get_chart_type_description(chart_type):$/;"	f
get_chart_type_description_separator	tools/extra/plot_training_log.py.example	/^def get_chart_type_description_separator():$/;"	f
get_data_file	tools/extra/plot_training_log.py.example	/^def get_data_file(chart_type, path_to_log):$/;"	f
get_data_file_type	tools/extra/plot_training_log.py.example	/^def get_data_file_type(chart_type):$/;"	f
get_data_from_tag	examples/pycaffe/layers/pascal_multilabel_datalayers.py	/^    def get_data_from_tag(node, tag):$/;"	f	function:load_pascal_annotation
get_data_label	tools/extra/plot_training_log.py.example	/^def get_data_label(path_to_log):$/;"	f
get_edge_label	python/caffe/draw.py	/^def get_edge_label(layer):$/;"	f
get_field_descriptions	tools/extra/plot_training_log.py.example	/^def get_field_descriptions(chart_type):$/;"	f
get_field_indices	tools/extra/plot_training_log.py.example	/^def get_field_indices(x_axis_field, y_axis_field):$/;"	f
get_gpus	tools/caffe.cpp	/^static void get_gpus(vector<int>* gpus) {$/;"	f	file:
get_id_name	python/caffe/pycaffe.py	/^    def get_id_name(self):$/;"	f	function:_Net_get_id_name
get_init_key	matlab/+caffe/private/caffe_.cpp	/^static void get_init_key(MEX_ARGS) {$/;"	f	file:
get_layer_label	python/caffe/draw.py	/^def get_layer_label(layer, rankdir):$/;"	f
get_legend_loc	tools/extra/plot_training_log.py.example	/^def get_legend_loc(chart_type):$/;"	f
get_log_created_year	tools/extra/extract_seconds.py	/^def get_log_created_year(input_file):$/;"	f
get_log_file_suffix	tools/extra/plot_training_log.py.example	/^def get_log_file_suffix():$/;"	f
get_log_parsing_script	tools/extra/plot_training_log.py.example	/^def get_log_parsing_script():$/;"	f
get_net	matlab/+caffe/get_net.m	/^function net = get_net(varargin)$/;"	f
get_net	matlab/+caffe/private/caffe_.cpp	/^static void get_net(MEX_ARGS) {$/;"	f	file:
get_normalizer	src/caffe/layers/infogain_loss_layer.cpp	/^Dtype InfogainLossLayer<Dtype>::get_normalizer($/;"	f	class:caffe::InfogainLossLayer
get_normalizer	src/caffe/layers/sigmoid_cross_entropy_loss_layer.cpp	/^Dtype SigmoidCrossEntropyLossLayer<Dtype>::get_normalizer($/;"	f	class:caffe::SigmoidCrossEntropyLossLayer
get_normalizer	src/caffe/layers/softmax_loss_layer.cpp	/^Dtype SoftmaxWithLossLayer<Dtype>::get_normalizer($/;"	f	class:caffe::SoftmaxWithLossLayer
get_phase_from_flags	tools/caffe.cpp	/^caffe::Phase get_phase_from_flags(caffe::Phase default_value) {$/;"	f
get_pooling_types_dict	python/caffe/draw.py	/^def get_pooling_types_dict():$/;"	f
get_pydot_graph	python/caffe/draw.py	/^def get_pydot_graph(caffe_net, rankdir, label_edges=True, phase=None):$/;"	f
get_pytype	python/caffe/_caffe.cpp	/^    const PyTypeObject* get_pytype() {$/;"	f	struct:caffe::NdarrayConverterGenerator::apply::type
get_solver	matlab/+caffe/get_solver.m	/^function solver = get_solver(solver_file)$/;"	f
get_solver	matlab/+caffe/private/caffe_.cpp	/^static void get_solver(MEX_ARGS) {$/;"	f	file:
get_solver	python/caffe/__init__.py	/^from ._caffe import init_log, log, set_mode_cpu, set_mode_gpu, set_device, Layer, get_solver, layer_type_list, set_random_seed, solver_count, set_solver_count, solver_rank, set_solver_rank, set_multiprocess, has_nccl$/;"	i
get_stages_from_flags	tools/caffe.cpp	/^vector<string> get_stages_from_flags() {$/;"	f
get_start_time	tools/extra/extract_seconds.py	/^def get_start_time(line_iterable, year):$/;"	f
get_supported_chart_types	tools/extra/plot_training_log.py.example	/^def get_supported_chart_types():$/;"	f
getopt	scripts/cpp_lint.py	/^import getopt$/;"	i
gflags	tools/extra/resize_and_crop_images.py	/^import gflags$/;"	i
glob	python/classify.py	/^import glob$/;"	i
global_pooling_	include/caffe/layers/pooling_layer.hpp	/^  bool global_pooling_;$/;"	m	class:caffe::PoolingLayer
global_test_part_result_reporter_mutex_	src/gtest/gtest-all.cpp	/^  internal::Mutex global_test_part_result_reporter_mutex_;$/;"	m	class:testing::internal::UnitTestImpl	file:
global_test_part_result_repoter_	src/gtest/gtest-all.cpp	/^  TestPartResultReporterInterface* global_test_part_result_repoter_;$/;"	m	class:testing::internal::UnitTestImpl	file:
got_sighup	src/caffe/util/signal_handler.cpp	/^  static volatile sig_atomic_t got_sighup = false;$/;"	m	namespace:__anon1	file:
got_sigint	src/caffe/util/signal_handler.cpp	/^  static volatile sig_atomic_t got_sigint = false;$/;"	m	namespace:__anon1	file:
gpu_data	src/caffe/blob.cpp	/^const Dtype* Blob<Dtype>::gpu_data() const {$/;"	f	class:caffe::Blob
gpu_data	src/caffe/syncedmem.cpp	/^const void* SyncedMemory::gpu_data() {$/;"	f	class:caffe::SyncedMemory
gpu_diff	src/caffe/blob.cpp	/^const Dtype* Blob<Dtype>::gpu_diff() const {$/;"	f	class:caffe::Blob
gpu_ptr_	include/caffe/syncedmem.hpp	/^  void* gpu_ptr_;$/;"	m	class:caffe::SyncedMemory
gpu_shape	src/caffe/blob.cpp	/^const int* Blob<Dtype>::gpu_shape() const {$/;"	f	class:caffe::Blob
group_	include/caffe/layers/base_conv_layer.hpp	/^  int group_;$/;"	m	class:caffe::BaseConvolutionLayer
gtest_flag_saver_	src/gtest/gtest.h	/^  const internal::GTestFlagSaver* const gtest_flag_saver_;$/;"	m	class:testing::Test::internal
gtest_internal	src/gtest/gtest.h	/^namespace gtest_internal {$/;"	n	namespace:std::tr1
gtest_trace_stack	src/gtest/gtest-all.cpp	/^  const std::vector<TraceInfo>& gtest_trace_stack() const {$/;"	f	class:testing::internal::UnitTestImpl
gtest_trace_stack	src/gtest/gtest-all.cpp	/^  std::vector<TraceInfo>& gtest_trace_stack() {$/;"	f	class:testing::internal::UnitTestImpl
gtest_trace_stack_	src/gtest/gtest-all.cpp	/^  internal::ThreadLocal<std::vector<TraceInfo> > gtest_trace_stack_;$/;"	m	class:testing::internal::UnitTestImpl	file:
h5py	src/caffe/test/test_data/generate_sample_data.py	/^import h5py$/;"	i
handle_	include/caffe/layers/cudnn_conv_layer.hpp	/^  cudnnHandle_t* handle_;$/;"	m	class:caffe::CuDNNConvolutionLayer
handle_	include/caffe/layers/cudnn_lcn_layer.hpp	/^  cudnnHandle_t             handle_;$/;"	m	class:caffe::CuDNNLCNLayer
handle_	include/caffe/layers/cudnn_lrn_layer.hpp	/^  cudnnHandle_t             handle_;$/;"	m	class:caffe::CuDNNLRNLayer
handle_	include/caffe/layers/cudnn_pooling_layer.hpp	/^  cudnnHandle_t             handle_;$/;"	m	class:caffe::CuDNNPoolingLayer
handle_	include/caffe/layers/cudnn_relu_layer.hpp	/^  cudnnHandle_t             handle_;$/;"	m	class:caffe::CuDNNReLULayer
handle_	include/caffe/layers/cudnn_sigmoid_layer.hpp	/^  cudnnHandle_t             handle_;$/;"	m	class:caffe::CuDNNSigmoidLayer
handle_	include/caffe/layers/cudnn_softmax_layer.hpp	/^  cudnnHandle_t             handle_;$/;"	m	class:caffe::CuDNNSoftmaxLayer
handle_	include/caffe/layers/cudnn_tanh_layer.hpp	/^  cudnnHandle_t             handle_;$/;"	m	class:caffe::CuDNNTanHLayer
handle_	src/gtest/gtest-all.cpp	/^  HANDLE handle_;$/;"	m	class:testing::internal::AutoHandle	file:
handle_signal	src/caffe/util/signal_handler.cpp	/^  void handle_signal(int signal) {$/;"	f	namespace:__anon1
handle_to_ptr	matlab/+caffe/private/caffe_.cpp	/^static T* handle_to_ptr(const mxArray* mx_handle) {$/;"	f	file:
handler_registry	matlab/+caffe/private/caffe_.cpp	/^struct handler_registry {$/;"	s	file:
handlers	matlab/+caffe/private/caffe_.cpp	/^static handler_registry handlers[] = {$/;"	v	file:
handles_setup_	include/caffe/layers/cudnn_conv_layer.hpp	/^  bool handles_setup_;$/;"	m	class:caffe::CuDNNConvolutionLayer
handles_setup_	include/caffe/layers/cudnn_lcn_layer.hpp	/^  bool handles_setup_;$/;"	m	class:caffe::CuDNNLCNLayer
handles_setup_	include/caffe/layers/cudnn_lrn_layer.hpp	/^  bool handles_setup_;$/;"	m	class:caffe::CuDNNLRNLayer
handles_setup_	include/caffe/layers/cudnn_pooling_layer.hpp	/^  bool handles_setup_;$/;"	m	class:caffe::CuDNNPoolingLayer
handles_setup_	include/caffe/layers/cudnn_relu_layer.hpp	/^  bool handles_setup_;$/;"	m	class:caffe::CuDNNReLULayer
handles_setup_	include/caffe/layers/cudnn_sigmoid_layer.hpp	/^  bool handles_setup_;$/;"	m	class:caffe::CuDNNSigmoidLayer
handles_setup_	include/caffe/layers/cudnn_softmax_layer.hpp	/^  bool handles_setup_;$/;"	m	class:caffe::CuDNNSoftmaxLayer
handles_setup_	include/caffe/layers/cudnn_tanh_layer.hpp	/^  bool handles_setup_;$/;"	m	class:caffe::CuDNNTanHLayer
has_axis_	include/caffe/layers/argmax_layer.hpp	/^  bool has_axis_;$/;"	m	class:caffe::ArgMaxLayer
has_blob	src/caffe/net.cpp	/^bool Net<Dtype>::has_blob(const string& blob_name) const {$/;"	f	class:caffe::Net
has_ignore_label_	include/caffe/layers/accuracy_layer.hpp	/^  bool has_ignore_label_;$/;"	m	class:caffe::AccuracyLayer
has_ignore_label_	include/caffe/layers/infogain_loss_layer.hpp	/^  bool has_ignore_label_;$/;"	m	class:caffe::InfogainLossLayer
has_ignore_label_	include/caffe/layers/sigmoid_cross_entropy_loss_layer.hpp	/^  bool has_ignore_label_;$/;"	m	class:caffe::SigmoidCrossEntropyLossLayer
has_ignore_label_	include/caffe/layers/softmax_loss_layer.hpp	/^  bool has_ignore_label_;$/;"	m	class:caffe::SoftmaxWithLossLayer
has_layer	src/caffe/net.cpp	/^bool Net<Dtype>::has_layer(const string& layer_name) const {$/;"	f	class:caffe::Net
has_mean_file_	include/caffe/layers/window_data_layer.hpp	/^  bool has_mean_file_;$/;"	m	class:caffe::WindowDataLayer
has_mean_values_	include/caffe/layers/window_data_layer.hpp	/^  bool has_mean_values_;$/;"	m	class:caffe::WindowDataLayer
has_nccl	python/caffe/__init__.py	/^from ._caffe import init_log, log, set_mode_cpu, set_mode_gpu, set_device, Layer, get_solver, layer_type_list, set_random_seed, solver_count, set_solver_count, solver_rank, set_solver_rank, set_multiprocess, has_nccl$/;"	i
has_new_data_	include/caffe/layers/memory_data_layer.hpp	/^  bool has_new_data_;$/;"	m	class:caffe::MemoryDataLayer
has_new_fatal_failure	src/gtest/gtest.h	/^  bool has_new_fatal_failure() const { return has_new_fatal_failure_; }$/;"	f	class:testing::internal::HasNewFatalFailureHelper
has_new_fatal_failure_	src/gtest/gtest.h	/^  bool has_new_fatal_failure_;$/;"	m	class:testing::internal::HasNewFatalFailureHelper
has_params_decay	include/caffe/net.hpp	/^  inline const vector<bool>& has_params_decay() const {$/;"	f	class:caffe::Net
has_params_decay_	include/caffe/net.hpp	/^  vector<bool> has_params_decay_;$/;"	m	class:caffe::Net
has_params_lr	include/caffe/net.hpp	/^  inline const vector<bool>& has_params_lr() const { return has_params_lr_; }$/;"	f	class:caffe::Net
has_params_lr_	include/caffe/net.hpp	/^  vector<bool> has_params_lr_;$/;"	m	class:caffe::Net
has_run_at_least_once	include/caffe/util/benchmark.hpp	/^  inline bool has_run_at_least_once() { return has_run_at_least_once_; }$/;"	f	class:caffe::Timer
has_run_at_least_once_	include/caffe/util/benchmark.hpp	/^  bool has_run_at_least_once_;$/;"	m	class:caffe::Timer
hashlib	examples/finetune_flickr_style/assemble_data.py	/^import hashlib$/;"	i
hashlib	scripts/download_model_binary.py	/^import hashlib$/;"	i
hdf5_get_name_by_idx	src/caffe/util/hdf5.cpp	/^string hdf5_get_name_by_idx(hid_t loc_id, int idx) {$/;"	f	namespace:caffe
hdf5_get_num_links	src/caffe/util/hdf5.cpp	/^int hdf5_get_num_links(hid_t loc_id) {$/;"	f	namespace:caffe
hdf5_load_int	src/caffe/util/hdf5.cpp	/^int hdf5_load_int(hid_t loc_id, const string& dataset_name) {$/;"	f	namespace:caffe
hdf5_load_nd_dataset	src/caffe/util/hdf5.cpp	/^void hdf5_load_nd_dataset<double>(hid_t file_id, const char* dataset_name_,$/;"	f	namespace:caffe
hdf5_load_nd_dataset	src/caffe/util/hdf5.cpp	/^void hdf5_load_nd_dataset<float>(hid_t file_id, const char* dataset_name_,$/;"	f	namespace:caffe
hdf5_load_nd_dataset_helper	src/caffe/util/hdf5.cpp	/^void hdf5_load_nd_dataset_helper($/;"	f	namespace:caffe
hdf5_load_string	src/caffe/util/hdf5.cpp	/^string hdf5_load_string(hid_t loc_id, const string& dataset_name) {$/;"	f	namespace:caffe
hdf5_save_int	src/caffe/util/hdf5.cpp	/^void hdf5_save_int(hid_t loc_id, const string& dataset_name, int i) {$/;"	f	namespace:caffe
hdf5_save_nd_dataset	src/caffe/util/hdf5.cpp	/^void hdf5_save_nd_dataset<double>($/;"	f	namespace:caffe
hdf5_save_nd_dataset	src/caffe/util/hdf5.cpp	/^void hdf5_save_nd_dataset<float>($/;"	f	namespace:caffe
hdf5_save_string	src/caffe/util/hdf5.cpp	/^void hdf5_save_string(hid_t loc_id, const string& dataset_name,$/;"	f	namespace:caffe
hdf_blobs_	include/caffe/layers/hdf5_data_layer.hpp	/^  std::vector<shared_ptr<Blob<Dtype> > > hdf_blobs_;$/;"	m	class:caffe::HDF5DataLayer
hdf_filenames_	include/caffe/layers/hdf5_data_layer.hpp	/^  std::vector<std::string> hdf_filenames_;$/;"	m	class:caffe::HDF5DataLayer
head	include/caffe/syncedmem.hpp	/^  SyncedHead head() { return head_; }$/;"	f	class:caffe::SyncedMemory
head_	include/caffe/syncedmem.hpp	/^  SyncedHead head_;$/;"	m	class:caffe::SyncedMemory
height	include/caffe/blob.hpp	/^  inline int height() const { return LegacyShape(2); }$/;"	f	class:caffe::Blob
height	include/caffe/layers/memory_data_layer.hpp	/^  int height() { return height_; }$/;"	f	class:caffe::MemoryDataLayer
height	src/caffe/test/test_data/generate_sample_data.py	/^height = 10$/;"	v
height	src/caffe/test/test_data/generate_sample_data.py	/^height = 6$/;"	v
height_	include/caffe/layers/lrn_layer.hpp	/^  int height_;$/;"	m	class:caffe::LRNLayer
height_	include/caffe/layers/memory_data_layer.hpp	/^  int batch_size_, channels_, height_, width_, size_;$/;"	m	class:caffe::MemoryDataLayer
height_	include/caffe/layers/pooling_layer.hpp	/^  int height_, width_;$/;"	m	class:caffe::PoolingLayer
height_	src/caffe/test/test_gradient_based_solver.cpp	/^  int num_, channels_, height_, width_;$/;"	m	class:caffe::GradientBasedSolverTest	file:
height_	src/caffe/test/test_hdf5_output_layer.cpp	/^  int height_;$/;"	m	class:caffe::HDF5OutputLayerTest	file:
height_	src/caffe/test/test_memory_data_layer.cpp	/^  int height_;$/;"	m	class:caffe::MemoryDataLayerTest	file:
help	examples/finetune_flickr_style/assemble_data.py	/^        help="if set to a positive value, only sample images from the first number of labels."$/;"	v
help	examples/finetune_flickr_style/assemble_data.py	/^        help="num workers used to download images. -x uses (all - x) cores [-1 default]."$/;"	v
help	examples/finetune_flickr_style/assemble_data.py	/^        help="number of images to use (-1 for all [default])",$/;"	v
help	examples/finetune_flickr_style/assemble_data.py	/^        help="random seed")$/;"	v
help	python/train.py	/^                        help="List of device ids.")$/;"	v
hidden_dim_	include/caffe/layers/lstm_layer.hpp	/^  int hidden_dim_;$/;"	m	class:caffe::LSTMUnitLayer
history	include/caffe/sgd_solvers.hpp	/^  const vector<shared_ptr<Blob<Dtype> > >& history() { return history_; }$/;"	f	class:caffe::SGDSolver
history_	include/caffe/sgd_solvers.hpp	/^  vector<shared_ptr<Blob<Dtype> > > history_, update_, temp_;$/;"	m	class:caffe::SGDSolver
host_name_	src/gtest/gtest-all.cpp	/^  const string host_name_;$/;"	m	class:testing::internal::StreamingListener	file:
httpserver	examples/web_demo/app.py	/^import tornado.httpserver$/;"	i
ignore_label_	include/caffe/layers/accuracy_layer.hpp	/^  int ignore_label_;$/;"	m	class:caffe::AccuracyLayer
ignore_label_	include/caffe/layers/infogain_loss_layer.hpp	/^  int ignore_label_;$/;"	m	class:caffe::InfogainLossLayer
ignore_label_	include/caffe/layers/sigmoid_cross_entropy_loss_layer.hpp	/^  int ignore_label_;$/;"	m	class:caffe::SigmoidCrossEntropyLossLayer
ignore_label_	include/caffe/layers/softmax_loss_layer.hpp	/^  int ignore_label_;$/;"	m	class:caffe::SoftmaxWithLossLayer
im2col_cpu	src/caffe/util/im2col.cpp	/^void im2col_cpu(const Dtype* data_im, const int channels,$/;"	f	namespace:caffe
im2col_nd_core_cpu	src/caffe/util/im2col.cpp	/^inline void im2col_nd_core_cpu(const Dtype* data_input, const bool im2col,$/;"	f	namespace:caffe
im2col_nd_cpu	src/caffe/util/im2col.cpp	/^void im2col_nd_cpu(const Dtype* data_im, const int num_spatial_axes,$/;"	f	namespace:caffe
image_database_	include/caffe/layers/window_data_layer.hpp	/^  vector<std::pair<std::string, vector<int> > > image_database_;$/;"	m	class:caffe::WindowDataLayer
image_database_cache_	include/caffe/layers/window_data_layer.hpp	/^  vector<std::pair<std::string, Datum > > image_database_cache_;$/;"	m	class:caffe::WindowDataLayer
images_dirname	examples/finetune_flickr_style/assemble_data.py	/^    images_dirname = os.path.join(training_dirname, 'images')$/;"	v
impl	src/gtest/gtest.h	/^  const internal::UnitTestImpl* impl() const { return impl_; }$/;"	f	class:testing::UnitTest
impl	src/gtest/gtest.h	/^  internal::UnitTestImpl* impl() { return impl_; }$/;"	f	class:testing::UnitTest
impl_	src/gtest/gtest.h	/^  internal::UnitTestImpl* impl_;$/;"	m	class:testing::UnitTest
impl_	src/gtest/gtest.h	/^  linked_ptr<const ParamGeneratorInterface<T> > impl_;$/;"	m	class:testing::internal::ParamGenerator
impl_	src/gtest/gtest.h	/^  scoped_ptr<ParamIteratorInterface<T> > impl_;$/;"	m	class:testing::internal::ParamIterator
increment_death_test_count	src/gtest/gtest.h	/^  int increment_death_test_count() { return ++death_test_count_; }$/;"	f	class:testing::TestResult
increment_death_test_count	src/gtest/gtest.h	/^  int increment_death_test_count() {$/;"	f	class:testing::TestInfo
index	examples/web_demo/app.py	/^def index():$/;"	f
index	src/gtest/gtest.h	/^  int index() const { return index_; }$/;"	f	class:testing::internal::InternalRunDeathTestFlag
index_	src/gtest/gtest.h	/^    int index_;$/;"	m	class:testing::internal::RangeGenerator::Iterator
index_	src/gtest/gtest.h	/^  int index_;$/;"	m	class:testing::internal::InternalRunDeathTestFlag
indices_to_forward_	include/caffe/layers/filter_layer.hpp	/^  vector<int> indices_to_forward_;$/;"	m	class:caffe::FilterLayer
inferred_axis_	include/caffe/layers/reshape_layer.hpp	/^  int inferred_axis_;$/;"	m	class:caffe::ReshapeLayer
infogain_	include/caffe/layers/infogain_loss_layer.hpp	/^  Blob<Dtype> infogain_;$/;"	m	class:caffe::InfogainLossLayer
infogain_axis_	include/caffe/layers/infogain_loss_layer.hpp	/^  int infogain_axis_, outer_num_, inner_num_, num_labels_;$/;"	m	class:caffe::InfogainLossLayer
init_key	matlab/+caffe/private/caffe_.cpp	/^static double init_key = static_cast<double>(caffe_rng_rand());$/;"	v	file:
init_log	python/caffe/__init__.py	/^from ._caffe import init_log, log, set_mode_cpu, set_mode_gpu, set_device, Layer, get_solver, layer_type_list, set_random_seed, solver_count, set_solver_count, solver_rank, set_solver_rank, set_multiprocess, has_nccl$/;"	i
initted	include/caffe/util/benchmark.hpp	/^  inline bool initted() { return initted_; }$/;"	f	class:caffe::Timer
initted_	include/caffe/util/benchmark.hpp	/^  bool initted_;$/;"	m	class:caffe::Timer
inner_	src/caffe/test/test_infogain_loss_layer.cpp	/^  int inner_, outer_, num_labels_;$/;"	m	class:caffe::InfogainLossLayerTest	file:
inner_dim_	include/caffe/layers/bias_layer.hpp	/^  int outer_dim_, bias_dim_, inner_dim_, dim_;$/;"	m	class:caffe::BiasLayer
inner_dim_	include/caffe/layers/scale_layer.hpp	/^  int outer_dim_, scale_dim_, inner_dim_;$/;"	m	class:caffe::ScaleLayer
inner_dim_	include/caffe/layers/tile_layer.hpp	/^  unsigned int axis_, tiles_, outer_dim_, inner_dim_;$/;"	m	class:caffe::TileLayer
inner_num_	include/caffe/layers/accuracy_layer.hpp	/^  int label_axis_, outer_num_, inner_num_;$/;"	m	class:caffe::AccuracyLayer
inner_num_	include/caffe/layers/infogain_loss_layer.hpp	/^  int infogain_axis_, outer_num_, inner_num_, num_labels_;$/;"	m	class:caffe::InfogainLossLayer
inner_num_	include/caffe/layers/sigmoid_cross_entropy_loss_layer.hpp	/^  int outer_num_, inner_num_;$/;"	m	class:caffe::SigmoidCrossEntropyLossLayer
inner_num_	include/caffe/layers/softmax_layer.hpp	/^  int inner_num_;$/;"	m	class:caffe::SoftmaxLayer
inner_num_	include/caffe/layers/softmax_loss_layer.hpp	/^  int softmax_axis_, outer_num_, inner_num_;$/;"	m	class:caffe::SoftmaxWithLossLayer
inner_scale_	include/caffe/layers/exp_layer.hpp	/^  Dtype inner_scale_, outer_scale_;$/;"	m	class:caffe::ExpLayer
input_blob_indices	include/caffe/net.hpp	/^  inline const vector<int>& input_blob_indices() const {$/;"	f	class:caffe::Net
input_blobs	include/caffe/net.hpp	/^  inline const vector<Blob<Dtype>*>& input_blobs() const {$/;"	f	class:caffe::Net
input_file_	src/caffe/test/test_gradient_based_solver.cpp	/^  string* input_file_;$/;"	m	class:caffe::GradientBasedSolverTest	file:
input_file_name_	src/caffe/test/test_hdf5_output_layer.cpp	/^  string input_file_name_;$/;"	m	class:caffe::HDF5OutputLayerTest	file:
input_geometry_	examples/cpp_classification/classification.cpp	/^  cv::Size input_geometry_;$/;"	m	class:Classifier	file:
input_scale_	include/caffe/layers/log_layer.hpp	/^  Dtype input_scale_, input_shift_;$/;"	m	class:caffe::LogLayer
input_shape	include/caffe/layers/base_conv_layer.hpp	/^  inline int input_shape(int i) {$/;"	f	class:caffe::BaseConvolutionLayer
input_shift_	include/caffe/layers/log_layer.hpp	/^  Dtype input_scale_, input_shift_;$/;"	m	class:caffe::LogLayer
inspect	tools/extra/plot_training_log.py.example	/^import inspect$/;"	i
instantiations_	src/gtest/gtest.h	/^  InstantiationContainer instantiations_;$/;"	m	class:testing::internal::ParameterizedTestCaseInfo
int_data_	src/caffe/test/test_random_number_generator.cpp	/^  shared_ptr<SyncedMemory> int_data_;$/;"	m	class:caffe::RandomNumberGeneratorTest	file:
int_data_2_	src/caffe/test/test_random_number_generator.cpp	/^  shared_ptr<SyncedMemory> int_data_2_;$/;"	m	class:caffe::RandomNumberGeneratorTest	file:
int_vec_to_mx_vec	matlab/+caffe/private/caffe_.cpp	/^static mxArray* int_vec_to_mx_vec(const vector<int>& int_vec) {$/;"	f	file:
intercept_mode_	src/gtest/gtest-all.cpp	/^  const InterceptMode intercept_mode_;$/;"	m	class:testing::ScopedFakeTestPartResultReporter	file:
internal	src/gtest/gtest-all.cpp	/^namespace internal {$/;"	n	namespace:testing	file:
internal	src/gtest/gtest.h	/^namespace internal {$/;"	n	namespace:testing
internal2	src/gtest/gtest-all.cpp	/^namespace internal2 {$/;"	n	namespace:testing	file:
internal2	src/gtest/gtest.h	/^namespace internal2 {$/;"	n	namespace:testing
internal_run_death_test_	src/gtest/gtest-all.cpp	/^  String internal_run_death_test_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
internal_run_death_test_flag	src/gtest/gtest-all.cpp	/^  const InternalRunDeathTestFlag* internal_run_death_test_flag() const {$/;"	f	class:testing::internal::UnitTestImpl
internal_run_death_test_flag_	src/gtest/gtest-all.cpp	/^  internal::scoped_ptr<InternalRunDeathTestFlag> internal_run_death_test_flag_;$/;"	m	class:testing::internal::UnitTestImpl	file:
inverse	python/caffe/coord_map.py	/^def inverse(coord_map):$/;"	f
io	examples/finetune_flickr_style/assemble_data.py	/^from skimage import io$/;"	i
io	examples/pycaffe/layers/pascal_multilabel_datalayers.py	/^import skimage.io$/;"	i
io	python/caffe/__init__.py	/^from . import io$/;"	i
io	python/caffe/io.py	/^import skimage.io$/;"	i
io	python/caffe/pycaffe.py	/^import caffe.io$/;"	i
is_1x1_	include/caffe/layers/base_conv_layer.hpp	/^  bool is_1x1_;$/;"	m	class:caffe::BaseConvolutionLayer
is_a_ge_zero_and_a_lt_b	src/caffe/util/im2col.cpp	/^inline bool is_a_ge_zero_and_a_lt_b(int a, int b) {$/;"	f	namespace:caffe
is_disabled_	src/gtest/gtest.h	/^  bool is_disabled_;                \/\/ True iff this test is disabled$/;"	m	class:testing::TestInfo
is_nan	src/gtest/gtest.h	/^  bool is_nan() const {$/;"	f	class:testing::internal::FloatingPoint
is_pointer	src/gtest/gtest.h	/^struct is_pointer : public false_type {};$/;"	s	namespace:std::tr1
is_pointer	src/gtest/gtest.h	/^struct is_pointer<T*> : public true_type {};$/;"	s	namespace:std::tr1
is_started	src/caffe/internal_thread.cpp	/^bool InternalThread::is_started() const {$/;"	f	class:caffe::InternalThread
is_valid_	src/gtest/gtest.h	/^  bool is_valid_;$/;"	m	class:std::tr1::RE
is_valid_chart_type	tools/extra/plot_training_log.py.example	/^def is_valid_chart_type(chart_type):$/;"	f
is_valid_handle	matlab/+caffe/private/is_valid_handle.m	/^function valid = is_valid_handle(hObj)$/;"	f
is_x_axis_field	tools/extra/plot_training_log.py.example	/^def is_x_axis_field(field):$/;"	f
iter	include/caffe/solver.hpp	/^  int iter() const { return iter_; }$/;"	f	class:caffe::Solver
iter_	include/caffe/solver.hpp	/^  int iter_;$/;"	m	class:caffe::Solver
iter_	include/caffe/util/db_leveldb.hpp	/^  leveldb::Iterator* iter_;$/;"	m	class:caffe::db::LevelDBCursor
iteration_timer_	include/caffe/solver.hpp	/^  Timer iteration_timer_;$/;"	m	class:caffe::Solver
iterations_last_	include/caffe/solver.hpp	/^  float iterations_last_;$/;"	m	class:caffe::Solver
iterator	src/gtest/gtest.h	/^  typedef Element* iterator;$/;"	t	class:testing::internal::NativeArray
iterator	src/gtest/gtest.h	/^  typedef ParamIterator<T> iterator;$/;"	t	class:testing::internal::ParamGenerator
iterator_	src/gtest/gtest.h	/^    typename ContainerType::const_iterator iterator_;$/;"	m	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
iteritems	scripts/cpp_lint.py	/^from six import iteritems, itervalues$/;"	i
itervalues	scripts/cpp_lint.py	/^from six import iteritems, itervalues$/;"	i
izip_longest	python/caffe/pycaffe.py	/^    from itertools import izip_longest$/;"	i
izip_longest	python/caffe/pycaffe.py	/^    from itertools import zip_longest as izip_longest$/;"	i
join	src/gtest/gtest.h	/^  void join(linked_ptr_internal const* ptr) {$/;"	f	class:testing::internal::linked_ptr_internal
join_new	src/gtest/gtest.h	/^  void join_new() {$/;"	f	class:testing::internal::linked_ptr_internal
json	examples/pycaffe/layers/pascal_multilabel_datalayers.py	/^import json$/;"	i
json	scripts/copy_notebook.py	/^import json$/;"	i
kAlsoRunDisabledTestsFlag	src/gtest/gtest-all.cpp	/^const char kAlsoRunDisabledTestsFlag[] = "also_run_disabled_tests";$/;"	m	namespace:testing::internal	file:
kAlternatePathSeparator	src/gtest/gtest-all.cpp	/^const char kAlternatePathSeparator = '\/';$/;"	m	namespace:testing::internal	file:
kAlternatePathSeparatorString	src/gtest/gtest-all.cpp	/^const char kAlternatePathSeparatorString[] = "\/";$/;"	m	namespace:testing::internal	file:
kAsIs	src/gtest/gtest-all.cpp	/^  kAsIs,$/;"	e	enum:testing::internal::CharFormat	file:
kBNLL_THRESHOLD	src/caffe/layers/bnll_layer.cpp	/^const float kBNLL_THRESHOLD = 50.;$/;"	m	namespace:caffe	file:
kBitCount	src/gtest/gtest.h	/^  static const size_t kBitCount = 8*sizeof(RawType);$/;"	m	class:testing::internal::FloatingPoint
kBreakOnFailureFlag	src/gtest/gtest-all.cpp	/^const char kBreakOnFailureFlag[] = "break_on_failure";$/;"	m	namespace:testing::internal	file:
kCIFARBatchSize	examples/cifar10/convert_cifar_data.cpp	/^const int kCIFARBatchSize = 10000;$/;"	v
kCIFARImageNBytes	examples/cifar10/convert_cifar_data.cpp	/^const int kCIFARImageNBytes = 3072;$/;"	v
kCIFARSize	examples/cifar10/convert_cifar_data.cpp	/^const int kCIFARSize = 32;$/;"	v
kCIFARTrainBatches	examples/cifar10/convert_cifar_data.cpp	/^const int kCIFARTrainBatches = 5;$/;"	v
kCatchExceptionsFlag	src/gtest/gtest-all.cpp	/^const char kCatchExceptionsFlag[] = "catch_exceptions";$/;"	m	namespace:testing::internal	file:
kColorEncodedHelpMessage	src/gtest/gtest-all.cpp	/^static const char kColorEncodedHelpMessage[] =$/;"	m	namespace:testing::internal	file:
kColorFlag	src/gtest/gtest-all.cpp	/^const char kColorFlag[] = "color";$/;"	m	namespace:testing::internal	file:
kConvertibleToInteger	src/gtest/gtest.h	/^  kConvertibleToInteger,  \/\/ a type implicitly convertible to BiggestInt$/;"	e	enum:testing::internal2::TypeKind
kCopy	src/gtest/gtest.h	/^  kCopy        \/\/ The NativeArray makes a copy of the native array and$/;"	e	enum:testing::internal::RelationToSource
kCurrentDirectoryString	src/gtest/gtest-all.cpp	/^const char kCurrentDirectoryString[] = ".\\\\";$/;"	m	namespace:testing::internal	file:
kCurrentDirectoryString	src/gtest/gtest-all.cpp	/^const char kCurrentDirectoryString[] = "\\\\";$/;"	m	namespace:testing::internal	file:
kDeathTestCaseFilter	src/gtest/gtest-all.cpp	/^static const char kDeathTestCaseFilter[] = "*DeathTest:*DeathTest\/*";$/;"	m	namespace:testing	file:
kDeathTestInternalError	src/gtest/gtest-all.cpp	/^static const char kDeathTestInternalError = 'I';$/;"	m	namespace:testing::internal	file:
kDeathTestLived	src/gtest/gtest-all.cpp	/^static const char kDeathTestLived = 'L';$/;"	m	namespace:testing::internal	file:
kDeathTestReturned	src/gtest/gtest-all.cpp	/^static const char kDeathTestReturned = 'R';$/;"	m	namespace:testing::internal	file:
kDeathTestStyleFlag	src/gtest/gtest.h	/^const char kDeathTestStyleFlag[] = "death_test_style";$/;"	m	namespace:testing::internal
kDeathTestThrew	src/gtest/gtest-all.cpp	/^static const char kDeathTestThrew = 'T';$/;"	m	namespace:testing::internal	file:
kDeathTestUseFork	src/gtest/gtest.h	/^const char kDeathTestUseFork[] = "death_test_use_fork";$/;"	m	namespace:testing::internal
kDefaultDeathTestStyle	src/gtest/gtest-all.cpp	/^static const char kDefaultDeathTestStyle[] = "fast";$/;"	m	namespace:testing	file:
kDefaultOutputFile	src/gtest/gtest-all.cpp	/^static const char kDefaultOutputFile[] = "test_detail.xml";$/;"	m	namespace:testing	file:
kDisableTestFilter	src/gtest/gtest-all.cpp	/^static const char kDisableTestFilter[] = "DISABLED_*:*\/DISABLED_*";$/;"	m	namespace:testing	file:
kElidedFramesMarker	src/gtest/gtest-all.cpp	/^  static const char* const kElidedFramesMarker;$/;"	m	class:testing::internal::OsStackTraceGetter	file:
kElidedFramesMarker	src/gtest/gtest-all.cpp	/^OsStackTraceGetter::kElidedFramesMarker =$/;"	m	class:testing::internal::OsStackTraceGetter	file:
kExponentBitCount	src/gtest/gtest.h	/^  static const size_t kExponentBitCount = kBitCount - 1 - kFractionBitCount;$/;"	m	class:testing::internal::FloatingPoint
kExponentBitMask	src/gtest/gtest.h	/^  static const Bits kExponentBitMask = ~(kSignBitMask | kFractionBitMask);$/;"	m	class:testing::internal::FloatingPoint
kFatalFailure	src/gtest/gtest.h	/^    kFatalFailure      \/\/ Failed and the test should be terminated.$/;"	e	enum:testing::TestPartResult::Type
kFilterFlag	src/gtest/gtest-all.cpp	/^const char kFilterFlag[] = "filter";$/;"	m	namespace:testing::internal	file:
kFractionBitCount	src/gtest/gtest.h	/^  static const size_t kFractionBitCount =$/;"	m	class:testing::internal::FloatingPoint
kFractionBitMask	src/gtest/gtest.h	/^  static const Bits kFractionBitMask =$/;"	m	class:testing::internal::FloatingPoint
kHexEscape	src/gtest/gtest-all.cpp	/^  kHexEscape,$/;"	e	enum:testing::internal::CharFormat	file:
kInternalRunDeathTestFlag	src/gtest/gtest.h	/^const char kInternalRunDeathTestFlag[] = "internal_run_death_test";$/;"	m	namespace:testing::internal
kInvalidFileAttributes	src/gtest/gtest-all.cpp	/^const DWORD kInvalidFileAttributes = 0xffffffff;$/;"	m	namespace:testing::internal	file:
kLOG_THRESHOLD	include/caffe/layers/loss_layer.hpp	/^const float kLOG_THRESHOLD = 1e-20;$/;"	m	namespace:caffe
kListTestsFlag	src/gtest/gtest-all.cpp	/^const char kListTestsFlag[] = "list_tests";$/;"	m	namespace:testing::internal	file:
kMaxBiggestInt	src/gtest/gtest.h	/^const BiggestInt kMaxBiggestInt =$/;"	m	namespace:std::tr1
kMaxBlobAxes	include/caffe/blob.hpp	/^const int kMaxBlobAxes = 32;$/;"	v
kMaxCodePoint1	src/gtest/gtest-all.cpp	/^const UInt32 kMaxCodePoint1 = (static_cast<UInt32>(1) <<  7) - 1;$/;"	m	namespace:testing::internal	file:
kMaxCodePoint2	src/gtest/gtest-all.cpp	/^const UInt32 kMaxCodePoint2 = (static_cast<UInt32>(1) << (5 + 6)) - 1;$/;"	m	namespace:testing::internal	file:
kMaxCodePoint3	src/gtest/gtest-all.cpp	/^const UInt32 kMaxCodePoint3 = (static_cast<UInt32>(1) << (4 + 2*6)) - 1;$/;"	m	namespace:testing::internal	file:
kMaxCodePoint4	src/gtest/gtest-all.cpp	/^const UInt32 kMaxCodePoint4 = (static_cast<UInt32>(1) << (3 + 3*6)) - 1;$/;"	m	namespace:testing::internal	file:
kMaxRandomSeed	src/gtest/gtest-all.cpp	/^const int kMaxRandomSeed = 99999;$/;"	m	namespace:testing::internal	file:
kMaxRange	src/gtest/gtest.h	/^  static const UInt32 kMaxRange = 1u << 31;$/;"	m	class:testing::internal::Random
kMaxStackTraceDepth	src/gtest/gtest.h	/^const int kMaxStackTraceDepth = 100;$/;"	m	namespace:testing
kMaxUlps	src/gtest/gtest.h	/^  static const size_t kMaxUlps = 4;$/;"	m	class:testing::internal::FloatingPoint
kMillisecondsThreshold	src/caffe/test/test_benchmark.cpp	/^const float kMillisecondsThreshold = 30;$/;"	m	namespace:caffe	file:
kNonFatalFailure	src/gtest/gtest.h	/^    kNonFatalFailure,  \/\/ Failed but the test can continue.$/;"	e	enum:testing::TestPartResult::Type
kOtherType	src/gtest/gtest.h	/^  kOtherType              \/\/ anything else$/;"	e	enum:testing::internal2::TypeKind
kOutputFlag	src/gtest/gtest-all.cpp	/^const char kOutputFlag[] = "output";$/;"	m	namespace:testing::internal	file:
kPathSeparator	src/gtest/gtest-all.cpp	/^const char kPathSeparator = '\\\\';$/;"	m	namespace:testing::internal	file:
kPathSeparatorString	src/gtest/gtest-all.cpp	/^const char kPathSeparatorString[] = "\\\\";$/;"	m	namespace:testing::internal	file:
kPrintTimeFlag	src/gtest/gtest-all.cpp	/^const char kPrintTimeFlag[] = "print_time";$/;"	m	namespace:testing::internal	file:
kProtoReadBytesLimit	src/caffe/util/io.cpp	/^const int kProtoReadBytesLimit = INT_MAX;  \/\/ Max size of 2 GB minus 1 byte.$/;"	v
kProtobuf	src/gtest/gtest.h	/^  kProtobuf,              \/\/ a protobuf type$/;"	e	enum:testing::internal2::TypeKind
kProtobufOneLinerMaxLength	src/gtest/gtest.h	/^const size_t kProtobufOneLinerMaxLength = 50;$/;"	m	namespace:testing::internal2
kRandomSeedFlag	src/gtest/gtest-all.cpp	/^const char kRandomSeedFlag[] = "random_seed";$/;"	m	namespace:testing::internal	file:
kReference	src/gtest/gtest.h	/^  kReference,  \/\/ The NativeArray references the native array.$/;"	e	enum:testing::internal::RelationToSource
kRepeatFlag	src/gtest/gtest-all.cpp	/^const char kRepeatFlag[] = "repeat";$/;"	m	namespace:testing::internal	file:
kShuffleFlag	src/gtest/gtest-all.cpp	/^const char kShuffleFlag[] = "shuffle";$/;"	m	namespace:testing::internal	file:
kSignBitMask	src/gtest/gtest.h	/^  static const Bits kSignBitMask = static_cast<Bits>(1) << (kBitCount - 1);$/;"	m	class:testing::internal::FloatingPoint
kSpecialEscape	src/gtest/gtest-all.cpp	/^  kSpecialEscape$/;"	e	enum:testing::internal::CharFormat	file:
kStackTraceDepthFlag	src/gtest/gtest-all.cpp	/^const char kStackTraceDepthFlag[] = "stack_trace_depth";$/;"	m	namespace:testing::internal	file:
kStackTraceMarker	src/gtest/gtest-all.cpp	/^const char kStackTraceMarker[] = "\\nStack trace:\\n";$/;"	m	namespace:testing::internal	file:
kStdErrFileno	src/gtest/gtest-all.cpp	/^const int kStdErrFileno = 2;$/;"	m	namespace:testing::internal	file:
kStdOutFileno	src/gtest/gtest-all.cpp	/^const int kStdOutFileno = 1;$/;"	m	namespace:testing::internal	file:
kStreamResultToFlag	src/gtest/gtest-all.cpp	/^const char kStreamResultToFlag[] = "stream_result_to";$/;"	m	namespace:testing::internal	file:
kSuccess	src/gtest/gtest.h	/^    kSuccess,          \/\/ Succeeded.$/;"	e	enum:testing::TestPartResult::Type
kTestShardIndex	src/gtest/gtest-all.cpp	/^static const char kTestShardIndex[] = "GTEST_SHARD_INDEX";$/;"	m	namespace:testing	file:
kTestShardStatusFile	src/gtest/gtest-all.cpp	/^static const char kTestShardStatusFile[] = "GTEST_SHARD_STATUS_FILE";$/;"	m	namespace:testing	file:
kTestTotalShards	src/gtest/gtest-all.cpp	/^static const char kTestTotalShards[] = "GTEST_TOTAL_SHARDS";$/;"	m	namespace:testing	file:
kTestTypeIdInGoogleTest	src/gtest/gtest-all.cpp	/^extern const TypeId kTestTypeIdInGoogleTest = GetTestTypeId();$/;"	m	namespace:testing::internal	file:
kThrowOnFailureFlag	src/gtest/gtest-all.cpp	/^const char kThrowOnFailureFlag[] = "throw_on_failure";$/;"	m	namespace:testing::internal	file:
kUniversalFilter	src/gtest/gtest-all.cpp	/^static const char kUniversalFilter[] = "*";$/;"	m	namespace:testing	file:
kUnknownFile	src/gtest/gtest-all.cpp	/^const char kUnknownFile[] = "unknown file";$/;"	m	namespace:testing::internal	file:
k_	include/caffe/layers/cudnn_lcn_layer.hpp	/^  Dtype alpha_, beta_, k_;$/;"	m	class:caffe::CuDNNLCNLayer
k_	include/caffe/layers/cudnn_lrn_layer.hpp	/^  Dtype alpha_, beta_, k_;$/;"	m	class:caffe::CuDNNLRNLayer
k_	include/caffe/layers/lrn_layer.hpp	/^  Dtype k_;$/;"	m	class:caffe::LRNLayer
kernel_dim_	include/caffe/layers/base_conv_layer.hpp	/^  int kernel_dim_;$/;"	m	class:caffe::BaseConvolutionLayer
kernel_h_	include/caffe/layers/pooling_layer.hpp	/^  int kernel_h_, kernel_w_;$/;"	m	class:caffe::PoolingLayer
kernel_h_	include/caffe/layers/spp_layer.hpp	/^  int kernel_h_, kernel_w_;$/;"	m	class:caffe::SPPLayer
kernel_shape_	include/caffe/layers/base_conv_layer.hpp	/^  Blob<int> kernel_shape_;$/;"	m	class:caffe::BaseConvolutionLayer
kernel_shape_	include/caffe/layers/im2col_layer.hpp	/^  Blob<int> kernel_shape_;$/;"	m	class:caffe::Im2colLayer
kernel_w_	include/caffe/layers/pooling_layer.hpp	/^  int kernel_h_, kernel_w_;$/;"	m	class:caffe::PoolingLayer
kernel_w_	include/caffe/layers/spp_layer.hpp	/^  int kernel_h_, kernel_w_;$/;"	m	class:caffe::SPPLayer
key	include/caffe/util/db_leveldb.hpp	/^  virtual string key() { return iter_->key().ToString(); }$/;"	f	class:caffe::db::LevelDBCursor
key	include/caffe/util/db_lmdb.hpp	/^  virtual string key() {$/;"	f	class:caffe::db::LMDBCursor
key	scripts/copy_notebook.py	/^            key = 'title'$/;"	v
key	src/gtest/gtest.h	/^  const char* key() const {$/;"	f	class:testing::TestProperty
key_	src/gtest/gtest-all.cpp	/^  String key_;$/;"	m	class:testing::internal::TestPropertyKeyIs	file:
key_	src/gtest/gtest.h	/^  const pthread_key_t key_;$/;"	m	class:std::tr1::ThreadLocal
key_	src/gtest/gtest.h	/^  internal::String key_;$/;"	m	class:testing::TestProperty
keys	include/caffe/util/db_lmdb.hpp	/^  vector<string> keys, values;$/;"	m	class:caffe::db::LMDBTransaction
kink_	include/caffe/test/test_gradient_check_util.hpp	/^  Dtype kink_;$/;"	m	class:caffe::GradientChecker
kink_range_	include/caffe/test/test_gradient_check_util.hpp	/^  Dtype kink_range_;$/;"	m	class:caffe::GradientChecker
label	src/caffe/test/test_data/generate_sample_data.py	/^label = 1 + np.arange(num_rows)[:, np.newaxis]$/;"	v
label	src/caffe/test/test_data/generate_sample_data.py	/^label = label.astype('float32')$/;"	v
label2	src/caffe/test/test_data/generate_sample_data.py	/^label2 = label + 1$/;"	v
label_	include/caffe/layers/base_data_layer.hpp	/^  Blob<Dtype> data_, label_;$/;"	m	class:caffe::Batch
label_axis_	include/caffe/layers/accuracy_layer.hpp	/^  int label_axis_, outer_num_, inner_num_;$/;"	m	class:caffe::AccuracyLayer
label_blob_	include/caffe/layers/hdf5_output_layer.hpp	/^  Blob<Dtype> label_blob_;$/;"	m	class:caffe::HDF5OutputLayer
label_blob_	src/caffe/test/test_memory_data_layer.cpp	/^  Blob<Dtype>* const label_blob_;$/;"	m	class:caffe::MemoryDataLayerTest	file:
labels_	examples/cpp_classification/classification.cpp	/^  std::vector<string> labels_;$/;"	m	class:Classifier	file:
labels_	include/caffe/layers/memory_data_layer.hpp	/^  Dtype* labels_;$/;"	m	class:caffe::MemoryDataLayer
labels_	src/caffe/test/test_memory_data_layer.cpp	/^  Blob<Dtype>* const labels_;$/;"	m	class:caffe::MemoryDataLayerTest	file:
last_death_test_case_	src/gtest/gtest-all.cpp	/^  int last_death_test_case_;$/;"	m	class:testing::internal::UnitTestImpl	file:
last_death_test_message_	src/gtest/gtest-all.cpp	/^String DeathTest::last_death_test_message_;$/;"	m	class:testing::internal::DeathTest	file:
last_death_test_message_	src/gtest/gtest.h	/^  static String last_death_test_message_;$/;"	m	class:testing::internal::DeathTest
last_layer_index_	include/caffe/layers/recurrent_layer.hpp	/^  int last_layer_index_;$/;"	m	class:caffe::RecurrentLayer
launcher	tools/extra/resize_and_crop_images.py	/^from mincepie import mapreducer, launcher$/;"	i
layer_by_name	src/caffe/net.cpp	/^const shared_ptr<Layer<Dtype> > Net<Dtype>::layer_by_name($/;"	f	class:caffe::Net
layer_fn	python/caffe/net_spec.py	/^        def layer_fn(*args, **kwargs):$/;"	f	function:Layers.__getattr__
layer_get_attr	matlab/+caffe/private/caffe_.cpp	/^static void layer_get_attr(MEX_ARGS) {$/;"	f	file:
layer_get_type	matlab/+caffe/private/caffe_.cpp	/^static void layer_get_type(MEX_ARGS) {$/;"	f	file:
layer_names	include/caffe/net.hpp	/^  inline const vector<string>& layer_names() const { return layer_names_; }$/;"	f	class:caffe::Net
layer_names_	include/caffe/net.hpp	/^  vector<string> layer_names_;$/;"	m	class:caffe::Net
layer_names_index_	include/caffe/net.hpp	/^  map<string, int> layer_names_index_;$/;"	m	class:caffe::Net
layer_need_backward	include/caffe/net.hpp	/^  inline const vector<bool>& layer_need_backward() const {$/;"	f	class:caffe::Net
layer_need_backward_	include/caffe/net.hpp	/^  vector<bool> layer_need_backward_;$/;"	m	class:caffe::Net
layer_param	include/caffe/layer.hpp	/^  const LayerParameter& layer_param() const { return layer_param_; }$/;"	f	class:caffe::Layer
layer_param_	include/caffe/layer.hpp	/^  LayerParameter layer_param_;$/;"	m	class:caffe::Layer
layer_param_	src/caffe/test/test_lstm_layer.cpp	/^  LayerParameter layer_param_;$/;"	m	class:caffe::LSTMLayerTest	file:
layer_param_	src/caffe/test/test_rnn_layer.cpp	/^  LayerParameter layer_param_;$/;"	m	class:caffe::RNNLayerTest	file:
layer_type_list	python/caffe/__init__.py	/^from ._caffe import init_log, log, set_mode_cpu, set_mode_gpu, set_device, Layer, get_solver, layer_type_list, set_random_seed, solver_count, set_solver_count, solver_rank, set_solver_rank, set_multiprocess, has_nccl$/;"	i
layers	include/caffe/net.hpp	/^  inline const vector<shared_ptr<Layer<Dtype> > >& layers() const {$/;"	f	class:caffe::Net
layers	python/caffe/__init__.py	/^from .net_spec import layers, params, NetSpec, to_proto$/;"	i
layers	python/caffe/net_spec.py	/^layers = Layers()$/;"	v
layers_	include/caffe/net.hpp	/^  vector<shared_ptr<Layer<Dtype> > > layers_;$/;"	m	class:caffe::Net
learnable_param_ids_	include/caffe/net.hpp	/^  vector<int> learnable_param_ids_;$/;"	m	class:caffe::Net
learnable_params	include/caffe/net.hpp	/^  inline const vector<Blob<Dtype>*>& learnable_params() const {$/;"	f	class:caffe::Net
learnable_params_	include/caffe/net.hpp	/^  vector<Blob<Dtype>*> learnable_params_;$/;"	m	class:caffe::Net
lenet	python/caffe/test/test_net_spec.py	/^def lenet(batch_size):$/;"	f
length	src/gtest/gtest.h	/^  size_t length() const { return length_; }$/;"	f	class:testing::internal::String
length_	src/gtest/gtest.h	/^  size_t length_;$/;"	m	class:testing::internal::String
lgd	tools/extra/plot_training_log.py.example	/^import matplotlib.legend as lgd$/;"	i
line	src/gtest/gtest-all.cpp	/^  int line;$/;"	m	struct:testing::internal::TraceInfo	file:
line	src/gtest/gtest.h	/^    int                const line;$/;"	m	struct:testing::internal::AssertHelper::AssertHelperData
line	src/gtest/gtest.h	/^  int line() const { return line_; }$/;"	f	class:testing::internal::InternalRunDeathTestFlag
line_	src/gtest/gtest-all.cpp	/^  const int line_;$/;"	m	class:testing::internal::ExecDeathTest	file:
line_	src/gtest/gtest-all.cpp	/^  const int line_;$/;"	m	class:testing::internal::WindowsDeathTest	file:
line_	src/gtest/gtest.h	/^  int line_;$/;"	m	class:testing::internal::InternalRunDeathTestFlag
line_number	src/gtest/gtest.h	/^  int line_number() const { return line_number_; }$/;"	f	class:testing::TestPartResult
line_number_	src/gtest/gtest.h	/^  int line_number_;$/;"	m	class:testing::TestPartResult
lines_	include/caffe/layers/image_data_layer.hpp	/^  vector<std::pair<std::string, int> > lines_;$/;"	m	class:caffe::ImageDataLayer
lines_id_	include/caffe/layers/image_data_layer.hpp	/^  int lines_id_;$/;"	m	class:caffe::ImageDataLayer
link_	src/gtest/gtest.h	/^  linked_ptr_internal link_;$/;"	m	class:testing::internal::linked_ptr
linked_ptr	src/gtest/gtest.h	/^  explicit linked_ptr(T* ptr = NULL) { capture(ptr); }$/;"	f	class:testing::internal::linked_ptr
linked_ptr	src/gtest/gtest.h	/^  linked_ptr(linked_ptr const& ptr) {  \/\/ NOLINT$/;"	f	class:testing::internal::linked_ptr
linked_ptr	src/gtest/gtest.h	/^  template <typename U> linked_ptr(linked_ptr<U> const& ptr) { copy(&ptr); }$/;"	f	class:testing::internal::linked_ptr
linked_ptr	src/gtest/gtest.h	/^class linked_ptr {$/;"	c	namespace:testing::internal
linked_ptr_internal	src/gtest/gtest.h	/^class linked_ptr_internal {$/;"	c	namespace:testing::internal
list_tests_	src/gtest/gtest-all.cpp	/^  bool list_tests_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
listeners	src/gtest/gtest-all.cpp	/^  TestEventListeners* listeners() { return &listeners_; }$/;"	f	class:testing::internal::UnitTestImpl
listeners	src/gtest/gtest-all.cpp	/^TestEventListeners& UnitTest::listeners() {$/;"	f	class:testing::UnitTest
listeners_	src/gtest/gtest-all.cpp	/^  TestEventListeners listeners_;$/;"	m	class:testing::internal::UnitTestImpl	file:
listeners_	src/gtest/gtest-all.cpp	/^  std::vector<TestEventListener*> listeners_;$/;"	m	class:testing::internal::TestEventRepeater	file:
load_batch	src/caffe/layers/data_layer.cpp	/^void DataLayer<Dtype>::load_batch(Batch<Dtype>* batch) {$/;"	f	class:caffe::DataLayer
load_batch	src/caffe/layers/image_data_layer.cpp	/^void ImageDataLayer<Dtype>::load_batch(Batch<Dtype>* batch) {$/;"	f	class:caffe::ImageDataLayer
load_batch	src/caffe/layers/window_data_layer.cpp	/^void WindowDataLayer<Dtype>::load_batch(Batch<Dtype>* batch) {$/;"	f	class:caffe::WindowDataLayer
load_data	tools/extra/plot_training_log.py.example	/^def load_data(data_file, field_idx0, field_idx1):$/;"	f
load_image	python/caffe/io.py	/^def load_image(filename, color=True):$/;"	f
load_net	python/caffe/test/test_net_spec.py	/^    def load_net(self, net_proto):$/;"	m	class:TestNetSpec
load_next_image	examples/pycaffe/layers/pascal_multilabel_datalayers.py	/^    def load_next_image(self):$/;"	m	class:BatchLoader
load_pascal_annotation	examples/pycaffe/layers/pascal_multilabel_datalayers.py	/^def load_pascal_annotation(index, pascal_root):$/;"	f
log	python/caffe/__init__.py	/^from ._caffe import init_log, log, set_mode_cpu, set_mode_gpu, set_device, Layer, get_solver, layer_type_list, set_random_seed, solver_count, set_solver_count, solver_rank, set_solver_rank, set_multiprocess, has_nccl$/;"	i
log	scripts/cpp_lint.py	/^import math  # for log$/;"	i
logging	examples/web_demo/app.py	/^import logging$/;"	i
loss	include/caffe/layer.hpp	/^  inline Dtype loss(const int top_index) const {$/;"	f	class:caffe::Layer
loss_	include/caffe/layer.hpp	/^  vector<Dtype> loss_;$/;"	m	class:caffe::Layer
losses_	include/caffe/solver.hpp	/^  vector<Dtype> losses_;$/;"	m	class:caffe::Solver
main	examples/cifar10/convert_cifar_data.cpp	/^int main(int argc, char** argv) {$/;"	f
main	examples/cpp_classification/classification.cpp	/^int main(int argc, char** argv) {$/;"	f
main	examples/mnist/convert_mnist_data.cpp	/^int main(int argc, char** argv) {$/;"	f
main	examples/siamese/convert_mnist_siamese_data.cpp	/^int main(int argc, char** argv) {$/;"	f
main	python/classify.py	/^def main(argv):$/;"	f
main	python/detect.py	/^def main(argv):$/;"	f
main	python/draw_net.py	/^def main():$/;"	f
main	scripts/cpp_lint.py	/^def main():$/;"	f
main	src/caffe/test/test_caffe_main.cpp	/^int main(int argc, char** argv) {$/;"	f
main	src/gtest/gtest_main.cc	/^GTEST_API_ int main(int argc, char **argv) {$/;"	f
main	tools/caffe.cpp	/^int main(int argc, char** argv) {$/;"	f
main	tools/compute_image_mean.cpp	/^int main(int argc, char** argv) {$/;"	f
main	tools/convert_imageset.cpp	/^int main(int argc, char** argv) {$/;"	f
main	tools/device_query.cpp	/^int main(int argc, char** argv) {$/;"	f
main	tools/extra/parse_log.py	/^def main():$/;"	f
main	tools/extra/summarize.py	/^def main():$/;"	f
main	tools/extract_features.cpp	/^int main(int argc, char** argv) {$/;"	f
main	tools/finetune_net.cpp	/^int main(int argc, char** argv) {$/;"	f
main	tools/net_speed_benchmark.cpp	/^int main(int argc, char** argv) {$/;"	f
main	tools/test_net.cpp	/^int main(int argc, char** argv) {$/;"	f
main	tools/train_net.cpp	/^int main(int argc, char** argv) {$/;"	f
main	tools/upgrade_net_proto_binary.cpp	/^int main(int argc, char** argv) {$/;"	f
main	tools/upgrade_net_proto_text.cpp	/^int main(int argc, char** argv) {$/;"	f
main	tools/upgrade_solver_proto_text.cpp	/^int main(int argc, char** argv) {$/;"	f
make_linked_ptr	src/gtest/gtest.h	/^linked_ptr<T> make_linked_ptr(T* ptr) {$/;"	f	namespace:testing::internal
make_net	examples/pycaffe/caffenet.py	/^def make_net():$/;"	f
make_tuple	src/gtest/gtest.h	/^inline GTEST_10_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2,$/;"	f	namespace:std::tr1
make_tuple	src/gtest/gtest.h	/^inline GTEST_1_TUPLE_(T) make_tuple(const T0& f0) {$/;"	f	namespace:std::tr1
make_tuple	src/gtest/gtest.h	/^inline GTEST_2_TUPLE_(T) make_tuple(const T0& f0, const T1& f1) {$/;"	f	namespace:std::tr1
make_tuple	src/gtest/gtest.h	/^inline GTEST_3_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2) {$/;"	f	namespace:std::tr1
make_tuple	src/gtest/gtest.h	/^inline GTEST_4_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2,$/;"	f	namespace:std::tr1
make_tuple	src/gtest/gtest.h	/^inline GTEST_5_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2,$/;"	f	namespace:std::tr1
make_tuple	src/gtest/gtest.h	/^inline GTEST_6_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2,$/;"	f	namespace:std::tr1
make_tuple	src/gtest/gtest.h	/^inline GTEST_7_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2,$/;"	f	namespace:std::tr1
make_tuple	src/gtest/gtest.h	/^inline GTEST_8_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2,$/;"	f	namespace:std::tr1
make_tuple	src/gtest/gtest.h	/^inline GTEST_9_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2,$/;"	f	namespace:std::tr1
make_tuple	src/gtest/gtest.h	/^inline tuple<> make_tuple() { return tuple<>(); }$/;"	f	namespace:std::tr1
map	tools/extra/resize_and_crop_images.py	/^    def map(self, key, value):$/;"	m	class:ResizeCropImagesMapper
map_args	examples/finetune_flickr_style/assemble_data.py	/^    map_args = zip(df['image_url'], df['image_filename'])$/;"	v
mapreducer	tools/extra/resize_and_crop_images.py	/^from mincepie import mapreducer, launcher$/;"	i
matchExt	src/caffe/util/io.cpp	/^static bool matchExt(const std::string & fn,$/;"	f	namespace:caffe
matches_filter_	src/gtest/gtest.h	/^  bool matches_filter_;             \/\/ True if this test matches the$/;"	m	class:testing::TestInfo
math	scripts/cpp_lint.py	/^import math  # for log$/;"	i
matplotlib	tools/extra/plot_training_log.py.example	/^import matplotlib.cm as cmx$/;"	i
matplotlib	tools/extra/plot_training_log.py.example	/^import matplotlib.colors as colors$/;"	i
matplotlib	tools/extra/plot_training_log.py.example	/^import matplotlib.legend as lgd$/;"	i
matplotlib	tools/extra/plot_training_log.py.example	/^import matplotlib.markers as mks$/;"	i
matplotlib	tools/extra/plot_training_log.py.example	/^import matplotlib.pyplot as plt$/;"	i
max_idx_	include/caffe/layers/eltwise_layer.hpp	/^  Blob<int> max_idx_;$/;"	m	class:caffe::EltwiseLayer
max_idx_	include/caffe/layers/pooling_layer.hpp	/^  Blob<int> max_idx_;$/;"	m	class:caffe::PoolingLayer
max_pool	examples/pycaffe/caffenet.py	/^def max_pool(bottom, ks, stride=1):$/;"	f
mdb_cursor_	include/caffe/util/db_lmdb.hpp	/^  MDB_cursor* mdb_cursor_;$/;"	m	class:caffe::db::LMDBCursor
mdb_dbi_	include/caffe/util/db_lmdb.hpp	/^  MDB_dbi mdb_dbi_;$/;"	m	class:caffe::db::LMDB
mdb_env_	include/caffe/util/db_lmdb.hpp	/^  MDB_env* mdb_env_;$/;"	m	class:caffe::db::LMDB
mdb_env_	include/caffe/util/db_lmdb.hpp	/^  MDB_env* mdb_env_;$/;"	m	class:caffe::db::LMDBTransaction
mdb_key_	include/caffe/util/db_lmdb.hpp	/^  MDB_val mdb_key_, mdb_value_;$/;"	m	class:caffe::db::LMDBCursor
mdb_txn_	include/caffe/util/db_lmdb.hpp	/^  MDB_txn* mdb_txn_;$/;"	m	class:caffe::db::LMDBCursor
mdb_value_	include/caffe/util/db_lmdb.hpp	/^  MDB_val mdb_key_, mdb_value_;$/;"	m	class:caffe::db::LMDBCursor
mean_	examples/cpp_classification/classification.cpp	/^  cv::Mat mean_;$/;"	m	class:Classifier	file:
mean_	include/caffe/layers/batch_norm_layer.hpp	/^  Blob<Dtype> mean_, variance_, temp_, x_norm_;$/;"	m	class:caffe::BatchNormLayer
mean_	include/caffe/layers/mvn_layer.hpp	/^  Blob<Dtype> mean_, variance_, temp_;$/;"	m	class:caffe::MVNLayer
mean_bound	src/caffe/test/test_random_number_generator.cpp	/^  Dtype mean_bound(const Dtype std) {$/;"	f	class:caffe::RandomNumberGeneratorTest
mean_bound	src/caffe/test/test_random_number_generator.cpp	/^  Dtype mean_bound(const Dtype std, const int sample_size) {$/;"	f	class:caffe::RandomNumberGeneratorTest
mean_bound_multiplier_	src/caffe/test/test_random_number_generator.cpp	/^  Dtype mean_bound_multiplier_;$/;"	m	class:caffe::RandomNumberGeneratorTest	file:
mean_values_	include/caffe/data_transformer.hpp	/^  vector<Dtype> mean_values_;$/;"	m	class:caffe::DataTransformer
mean_values_	include/caffe/layers/window_data_layer.hpp	/^  vector<Dtype> mean_values_;$/;"	m	class:caffe::WindowDataLayer
memory_used_	include/caffe/net.hpp	/^  size_t memory_used_;$/;"	m	class:caffe::Net
message	src/gtest/gtest-all.cpp	/^  String message;$/;"	m	struct:testing::internal::TraceInfo	file:
message	src/gtest/gtest.h	/^    String             const message;$/;"	m	struct:testing::internal::AssertHelper::AssertHelperData
message	src/gtest/gtest.h	/^  const char* message() const { return message_.c_str(); }$/;"	f	class:testing::TestPartResult
message	src/gtest/gtest.h	/^  const char* message() const {$/;"	f	class:testing::AssertionResult
message_	src/gtest/gtest.h	/^  internal::String message_;  \/\/ The test failure message.$/;"	m	class:testing::TestPartResult
message_	src/gtest/gtest.h	/^  internal::scoped_ptr< ::std::string> message_;$/;"	m	class:testing::AssertionResult
mexFunction	matlab/+caffe/private/caffe_.cpp	/^void mexFunction(MEX_ARGS) {$/;"	f
minidom	examples/pycaffe/layers/pascal_multilabel_datalayers.py	/^from xml.dom import minidom$/;"	i
misc	examples/pycaffe/layers/pascal_multilabel_datalayers.py	/^import scipy.misc$/;"	i
mks	tools/extra/plot_training_log.py.example	/^import matplotlib.markers as mks$/;"	i
mmap	scripts/split_caffe_proto.py	/^import mmap$/;"	i
mode	include/caffe/common.hpp	/^  inline static Brew mode() { return Get().mode_; }$/;"	f	class:caffe::Caffe
mode_	include/caffe/common.hpp	/^  Brew mode_;$/;"	m	class:caffe::Caffe
mode_	include/caffe/layers/cudnn_pooling_layer.hpp	/^  cudnnPoolingMode_t        mode_;$/;"	m	class:caffe::CuDNNPoolingLayer
model_checks_out	scripts/download_model_binary.py	/^    def model_checks_out(filename=model_filename, sha1=frontmatter['sha1']):$/;"	f	function:valid_dirname
moving_average_fraction_	include/caffe/layers/batch_norm_layer.hpp	/^  Dtype moving_average_fraction_;$/;"	m	class:caffe::BatchNormLayer
multiplier_	include/caffe/layers/prelu_layer.hpp	/^  Blob<Dtype> multiplier_;  \/\/ dot multiplier for backward computation of params$/;"	m	class:caffe::PReLULayer
multiprocess	include/caffe/common.hpp	/^  inline static bool multiprocess() { return Get().multiprocess_; }$/;"	f	class:caffe::Caffe
multiprocess_	include/caffe/common.hpp	/^  bool multiprocess_;$/;"	m	class:caffe::Caffe
multiprocessing	examples/finetune_flickr_style/assemble_data.py	/^import multiprocessing$/;"	i
must_stop	src/caffe/internal_thread.cpp	/^bool InternalThread::must_stop() {$/;"	f	class:caffe::InternalThread
mutable_cpu_data	src/caffe/blob.cpp	/^Dtype* Blob<Dtype>::mutable_cpu_data() {$/;"	f	class:caffe::Blob
mutable_cpu_data	src/caffe/syncedmem.cpp	/^void* SyncedMemory::mutable_cpu_data() {$/;"	f	class:caffe::SyncedMemory
mutable_cpu_diff	src/caffe/blob.cpp	/^Dtype* Blob<Dtype>::mutable_cpu_diff() {$/;"	f	class:caffe::Blob
mutable_gpu_data	src/caffe/blob.cpp	/^Dtype* Blob<Dtype>::mutable_gpu_data() {$/;"	f	class:caffe::Blob
mutable_gpu_data	src/caffe/syncedmem.cpp	/^void* SyncedMemory::mutable_gpu_data() {$/;"	f	class:caffe::SyncedMemory
mutable_gpu_diff	src/caffe/blob.cpp	/^Dtype* Blob<Dtype>::mutable_gpu_diff() {$/;"	f	class:caffe::Blob
mutex_	src/caffe/util/blocking_queue.cpp	/^  mutable boost::mutex mutex_;$/;"	m	class:caffe::BlockingQueue::sync	file:
mutex_	src/gtest/gtest-all.cpp	/^  Mutex mutex_;  \/\/ protects all internal state$/;"	m	class:testing::internal::OsStackTraceGetter	file:
mutex_	src/gtest/gtest.h	/^  MutexBase* const mutex_;$/;"	m	class:std::tr1::GTestMutexLock
mutex_	src/gtest/gtest.h	/^  mutable internal::Mutex mutex_;$/;"	m	class:testing::UnitTest
mutex_	src/gtest/gtest.h	/^  pthread_mutex_t mutex_;  \/\/ The underlying pthread mutex.$/;"	m	class:std::tr1::MutexBase
mxCHECK	matlab/+caffe/private/caffe_.cpp	/^inline void mxCHECK(bool expr, const char* msg) {$/;"	f
mxCHECK_FILE_EXIST	matlab/+caffe/private/caffe_.cpp	/^void mxCHECK_FILE_EXIST(const char* file) {$/;"	f
mxERROR	matlab/+caffe/private/caffe_.cpp	/^inline void mxERROR(const char* msg) { mexErrMsgTxt(msg); }$/;"	f
mx_mat_to_blob	matlab/+caffe/private/caffe_.cpp	/^static void mx_mat_to_blob(const mxArray* mx_mat, Blob<float>* blob,$/;"	f	file:
n_	include/caffe/layers/memory_data_layer.hpp	/^  int n_;$/;"	m	class:caffe::MemoryDataLayer
name	include/caffe/net.hpp	/^  inline const string& name() const { return name_; }$/;"	f	class:caffe::Net
name	src/gtest/gtest.h	/^  const char* name() const { return name_.c_str(); }$/;"	f	class:testing::TestCase
name	src/gtest/gtest.h	/^  const char* name() const { return name_.c_str(); }$/;"	f	class:testing::TestInfo
name_	include/caffe/net.hpp	/^  string name_;$/;"	m	class:caffe::Net
name_	src/gtest/gtest-all.cpp	/^  String name_;$/;"	m	class:testing::internal::TestCaseNameIs	file:
name_	src/gtest/gtest-all.cpp	/^  internal::String name_;$/;"	m	class:testing::__anon4::TestNameIs	file:
name_	src/gtest/gtest.h	/^  const std::string name_;               \/\/ Test name$/;"	m	class:testing::TestInfo
name_	src/gtest/gtest.h	/^  internal::String name_;$/;"	m	class:testing::TestCase
nccl	include/caffe/util/nccl.hpp	/^namespace nccl {$/;"	n	namespace:caffe
nccl_	src/caffe/test/test_gradient_based_solver.cpp	/^  shared_ptr<NCCL<Dtype> > nccl_;$/;"	m	class:caffe::GradientBasedSolverTest	file:
nccls_	src/caffe/parallel.cpp	/^  vector<NCCL<Dtype>*>* nccls_;$/;"	m	class:caffe::Worker	file:
net	include/caffe/solver.hpp	/^  inline shared_ptr<Net<Dtype> > net() { return net_; }$/;"	f	class:caffe::Solver
net_	examples/cpp_classification/classification.cpp	/^  shared_ptr<Net<float> > net_;$/;"	m	class:Classifier	file:
net_	include/caffe/solver.hpp	/^  shared_ptr<Net<Dtype> > net_;$/;"	m	class:caffe::Solver
net_	src/caffe/test/test_net.cpp	/^  shared_ptr<Net<Dtype> > net_;$/;"	m	class:caffe::NetTest	file:
net_backward	matlab/+caffe/private/caffe_.cpp	/^static void net_backward(MEX_ARGS) {$/;"	f	file:
net_copy_from	matlab/+caffe/private/caffe_.cpp	/^static void net_copy_from(MEX_ARGS) {$/;"	f	file:
net_forward	matlab/+caffe/private/caffe_.cpp	/^static void net_forward(MEX_ARGS) {$/;"	f	file:
net_get_attr	matlab/+caffe/private/caffe_.cpp	/^static void net_get_attr(MEX_ARGS) {$/;"	f	file:
net_input_blob_indices_	include/caffe/net.hpp	/^  vector<int> net_input_blob_indices_;$/;"	m	class:caffe::Net
net_input_blobs_	include/caffe/net.hpp	/^  vector<Blob<Dtype>*> net_input_blobs_;$/;"	m	class:caffe::Net
net_output_blob_indices_	include/caffe/net.hpp	/^  vector<int> net_output_blob_indices_;$/;"	m	class:caffe::Net
net_output_blobs_	include/caffe/net.hpp	/^  vector<Blob<Dtype>*> net_output_blobs_;$/;"	m	class:caffe::Net
net_reshape	matlab/+caffe/private/caffe_.cpp	/^static void net_reshape(MEX_ARGS) {$/;"	f	file:
net_save	matlab/+caffe/private/caffe_.cpp	/^static void net_save(MEX_ARGS) {$/;"	f	file:
nets_	matlab/+caffe/private/caffe_.cpp	/^static vector<shared_ptr<Net<float> > > nets_;$/;"	v	file:
new_uid	src/caffe/parallel.cpp	/^string NCCL<Dtype>::new_uid() {$/;"	f	class:caffe::NCCL
next_	src/gtest/gtest.h	/^  mutable linked_ptr_internal const* next_;$/;"	m	class:testing::internal::linked_ptr_internal
nonfatally_failed	src/gtest/gtest.h	/^  bool nonfatally_failed() const { return type_ == kNonFatalFailure; }$/;"	f	class:testing::TestPartResult
norm_desc_	include/caffe/layers/cudnn_lcn_layer.hpp	/^  cudnnLRNDescriptor_t norm_desc_;$/;"	m	class:caffe::CuDNNLCNLayer
norm_desc_	include/caffe/layers/cudnn_lrn_layer.hpp	/^  cudnnLRNDescriptor_t norm_desc_;$/;"	m	class:caffe::CuDNNLRNLayer
normalization_	include/caffe/layers/infogain_loss_layer.hpp	/^  LossParameter_NormalizationMode normalization_;$/;"	m	class:caffe::InfogainLossLayer
normalization_	include/caffe/layers/sigmoid_cross_entropy_loss_layer.hpp	/^  LossParameter_NormalizationMode normalization_;$/;"	m	class:caffe::SigmoidCrossEntropyLossLayer
normalization_	include/caffe/layers/softmax_loss_layer.hpp	/^  LossParameter_NormalizationMode normalization_;$/;"	m	class:caffe::SoftmaxWithLossLayer
normalizer_	include/caffe/layers/sigmoid_cross_entropy_loss_layer.hpp	/^  Dtype normalizer_;$/;"	m	class:caffe::SigmoidCrossEntropyLossLayer
notified_	src/gtest/gtest.h	/^  volatile bool notified_;$/;"	m	class:std::tr1::Notification
np	examples/finetune_flickr_style/assemble_data.py	/^import numpy as np$/;"	i
np	examples/pycaffe/layers/pascal_multilabel_datalayers.py	/^import numpy as np$/;"	i
np	examples/pycaffe/layers/pyloss.py	/^import numpy as np$/;"	i
np	examples/pycaffe/tools.py	/^import numpy as np$/;"	i
np	examples/web_demo/app.py	/^import numpy as np$/;"	i
np	examples/web_demo/exifutil.py	/^import numpy as np$/;"	i
np	python/caffe/classifier.py	/^import numpy as np$/;"	i
np	python/caffe/coord_map.py	/^import numpy as np$/;"	i
np	python/caffe/detector.py	/^import numpy as np$/;"	i
np	python/caffe/io.py	/^import numpy as np$/;"	i
np	python/caffe/pycaffe.py	/^import numpy as np$/;"	i
np	python/caffe/test/test_coord_map.py	/^import numpy as np$/;"	i
np	python/caffe/test/test_io.py	/^import numpy as np$/;"	i
np	python/caffe/test/test_net.py	/^import numpy as np$/;"	i
np	python/caffe/test/test_solver.py	/^import numpy as np$/;"	i
np	python/classify.py	/^import numpy as np$/;"	i
np	python/detect.py	/^import numpy as np$/;"	i
np	src/caffe/test/test_data/generate_sample_data.py	/^import numpy as np$/;"	i
num	include/caffe/blob.hpp	/^  inline int num() const { return LegacyShape(0); }$/;"	f	class:caffe::Blob
num_	include/caffe/layers/base_conv_layer.hpp	/^  int num_;$/;"	m	class:caffe::BaseConvolutionLayer
num_	include/caffe/layers/im2col_layer.hpp	/^  int num_;$/;"	m	class:caffe::Im2colLayer
num_	include/caffe/layers/lrn_layer.hpp	/^  int num_;$/;"	m	class:caffe::LRNLayer
num_	include/caffe/layers/reduction_layer.hpp	/^  int num_;$/;"	m	class:caffe::ReductionLayer
num_	include/caffe/layers/spp_layer.hpp	/^  int num_;$/;"	m	class:caffe::SPPLayer
num_	src/caffe/test/test_gradient_based_solver.cpp	/^  int num_, channels_, height_, width_;$/;"	m	class:caffe::GradientBasedSolverTest	file:
num_	src/caffe/test/test_hdf5_output_layer.cpp	/^  int num_;$/;"	m	class:caffe::HDF5OutputLayerTest	file:
num_above_mean	src/caffe/test/test_random_number_generator.cpp	/^  int num_above_mean;$/;"	m	class:caffe::RandomNumberGeneratorTest	file:
num_axes	include/caffe/blob.hpp	/^  inline int num_axes() const { return shape_.size(); }$/;"	f	class:caffe::Blob
num_below_mean	src/caffe/test/test_random_number_generator.cpp	/^  int num_below_mean;$/;"	m	class:caffe::RandomNumberGeneratorTest	file:
num_by_chans_	include/caffe/layers/batch_norm_layer.hpp	/^  Blob<Dtype> num_by_chans_;$/;"	m	class:caffe::BatchNormLayer
num_channels_	examples/cpp_classification/classification.cpp	/^  int num_channels_;$/;"	m	class:Classifier	file:
num_cols	src/caffe/test/test_data/generate_sample_data.py	/^num_cols = 3$/;"	v
num_cols	src/caffe/test/test_data/generate_sample_data.py	/^num_cols = 8$/;"	v
num_concats_	include/caffe/layers/concat_layer.hpp	/^  int num_concats_;$/;"	m	class:caffe::ConcatLayer
num_files_	include/caffe/layers/hdf5_data_layer.hpp	/^  unsigned int num_files_;$/;"	m	class:caffe::HDF5DataLayer
num_inputs	include/caffe/net.hpp	/^  inline int num_inputs() const { return net_input_blobs_.size(); }$/;"	f	class:caffe::Net
num_iter_	src/caffe/test/test_data_transformer.cpp	/^  int num_iter_;$/;"	m	class:caffe::DataTransformTest	file:
num_kernels_col2im_	include/caffe/layers/base_conv_layer.hpp	/^  int num_kernels_col2im_;$/;"	m	class:caffe::BaseConvolutionLayer
num_kernels_im2col_	include/caffe/layers/base_conv_layer.hpp	/^  int num_kernels_im2col_;$/;"	m	class:caffe::BaseConvolutionLayer
num_labels_	include/caffe/layers/infogain_loss_layer.hpp	/^  int infogain_axis_, outer_num_, inner_num_, num_labels_;$/;"	m	class:caffe::InfogainLossLayer
num_labels_	src/caffe/test/test_infogain_loss_layer.cpp	/^  int inner_, outer_, num_labels_;$/;"	m	class:caffe::InfogainLossLayerTest	file:
num_output_	include/caffe/layers/base_conv_layer.hpp	/^  int num_output_;$/;"	m	class:caffe::BaseConvolutionLayer
num_output_	src/caffe/test/test_lstm_layer.cpp	/^  int num_output_;$/;"	m	class:caffe::LSTMLayerTest	file:
num_output_	src/caffe/test/test_rnn_layer.cpp	/^  int num_output_;$/;"	m	class:caffe::RNNLayerTest	file:
num_outputs	include/caffe/net.hpp	/^  inline int num_outputs() const { return net_output_blobs_.size(); }$/;"	f	class:caffe::Net
num_rows	src/caffe/test/test_data/generate_sample_data.py	/^num_rows = 10$/;"	v
num_rows	src/caffe/test/test_data/generate_sample_data.py	/^num_rows = 8$/;"	v
num_slices_	include/caffe/layers/slice_layer.hpp	/^  int num_slices_;$/;"	m	class:caffe::SliceLayer
num_spatial_axes_	include/caffe/layers/base_conv_layer.hpp	/^  int num_spatial_axes_;$/;"	m	class:caffe::BaseConvolutionLayer
num_spatial_axes_	include/caffe/layers/im2col_layer.hpp	/^  int num_spatial_axes_;$/;"	m	class:caffe::Im2colLayer
num_workers	examples/finetune_flickr_style/assemble_data.py	/^        num_workers = multiprocessing.cpu_count() + num_workers$/;"	v
num_workers	examples/finetune_flickr_style/assemble_data.py	/^    num_workers = args.workers$/;"	v
nums_buffer_	include/caffe/layers/accuracy_layer.hpp	/^  Blob<Dtype> nums_buffer_;$/;"	m	class:caffe::AccuracyLayer
offset	include/caffe/blob.hpp	/^  inline int offset(const int n, const int c = 0, const int h = 0,$/;"	f	class:caffe::Blob
offset	include/caffe/blob.hpp	/^  inline int offset(const vector<int>& indices) const {$/;"	f	class:caffe::Blob
offset_	include/caffe/layers/data_layer.hpp	/^  uint64_t offset_;$/;"	m	class:caffe::DataLayer
offset_	include/caffe/layers/hdf5_data_layer.hpp	/^  uint64_t offset_;$/;"	m	class:caffe::HDF5DataLayer
offsets	include/caffe/layers/crop_layer.hpp	/^  Blob<int> offsets;$/;"	m	class:caffe::CropLayer
old_reporter_	src/gtest/gtest-all.cpp	/^  TestPartResultReporterInterface* old_reporter_;$/;"	m	class:testing::ScopedFakeTestPartResultReporter	file:
on_gradients_ready	python/caffe/_caffe.cpp	/^  virtual void on_gradients_ready() {$/;"	f	class:caffe::SolverCallback
on_gradients_ready	src/caffe/parallel.cpp	/^void NCCL<Dtype>::on_gradients_ready() {$/;"	f	class:caffe::NCCL
on_gradients_ready_	python/caffe/_caffe.cpp	/^  bp::object on_start_, on_gradients_ready_;$/;"	m	class:caffe::SolverCallback	file:
on_start	include/caffe/parallel.hpp	/^  void on_start() {}$/;"	f	class:caffe::NCCL
on_start	python/caffe/_caffe.cpp	/^  virtual void on_start() {$/;"	f	class:caffe::SolverCallback
on_start_	python/caffe/_caffe.cpp	/^  bp::object on_start_, on_gradients_ready_;$/;"	m	class:caffe::SolverCallback	file:
one	include/caffe/util/cudnn.hpp	/^  static const void *one, *zero;$/;"	m	class:caffe::cudnn::dataType
one	src/caffe/util/cudnn.cpp	/^const void* dataType<double>::one =$/;"	m	class:caffe::cudnn::dataType	file:
one	src/caffe/util/cudnn.cpp	/^const void* dataType<float>::one =$/;"	m	class:caffe::cudnn::dataType	file:
oneval	include/caffe/util/cudnn.hpp	/^  static double oneval, zeroval;$/;"	m	class:caffe::cudnn::dataType
oneval	include/caffe/util/cudnn.hpp	/^  static float oneval, zeroval;$/;"	m	class:caffe::cudnn::dataType
oneval	src/caffe/util/cudnn.cpp	/^double dataType<double>::oneval = 1.0;$/;"	m	class:caffe::cudnn::dataType	file:
oneval	src/caffe/util/cudnn.cpp	/^float dataType<float>::oneval = 1.0;$/;"	m	class:caffe::cudnn::dataType	file:
op_	include/caffe/layers/eltwise_layer.hpp	/^  EltwiseParameter_EltwiseOp op_;$/;"	m	class:caffe::EltwiseLayer
op_	include/caffe/layers/reduction_layer.hpp	/^  ReductionParameter_ReductionOp op_;$/;"	m	class:caffe::ReductionLayer
open_oriented_im	examples/web_demo/exifutil.py	/^def open_oriented_im(im_path):$/;"	f
operator !	src/gtest/gtest-all.cpp	/^AssertionResult AssertionResult::operator!() const {$/;"	f	class:testing::AssertionResult
operator !=	src/gtest/gtest.h	/^  bool operator!=(T* p) const { return value_ != p; }$/;"	f	class:testing::internal::linked_ptr
operator !=	src/gtest/gtest.h	/^  bool operator!=(const ParamIterator& other) const {$/;"	f	class:testing::internal::ParamIterator
operator !=	src/gtest/gtest.h	/^  bool operator!=(const char* a_c_str) const { return !(*this == a_c_str); }$/;"	f	class:testing::internal::String
operator !=	src/gtest/gtest.h	/^  bool operator!=(linked_ptr<U> const& ptr) const {$/;"	f	class:testing::internal::linked_ptr
operator !=	src/gtest/gtest.h	/^bool operator!=(T* ptr, const linked_ptr<T>& x) {$/;"	f	namespace:testing::internal
operator ()	include/caffe/layers/batch_reindex_layer.hpp	/^    bool operator()(const std::pair<int, int> &left,$/;"	f	struct:caffe::BatchReindexLayer::pair_sort_first
operator ()	python/caffe/_caffe.cpp	/^    PyObject* operator() (Dtype* data) const {$/;"	f	struct:caffe::NdarrayConverterGenerator::apply::type
operator ()	src/gtest/gtest-all.cpp	/^  bool operator()(const TestCase* test_case) const {$/;"	f	class:testing::internal::TestCaseNameIs
operator ()	src/gtest/gtest-all.cpp	/^  bool operator()(const TestInfo * test_info) const {$/;"	f	class:testing::__anon4::TestNameIs
operator ()	src/gtest/gtest-all.cpp	/^  bool operator()(const TestProperty& test_property) const {$/;"	f	class:testing::internal::TestPropertyKeyIs
operator ()	src/gtest/gtest-all.cpp	/^bool ExitedWithCode::operator()(int exit_status) const {$/;"	f	class:testing::ExitedWithCode
operator ()	src/gtest/gtest-all.cpp	/^bool KilledBySignal::operator()(int exit_status) const {$/;"	f	class:testing::KilledBySignal
operator *	src/gtest/gtest.h	/^  T& operator*() const { return *value_; }$/;"	f	class:testing::internal::linked_ptr
operator *	src/gtest/gtest.h	/^  const T& operator*() const { return *impl_->Current(); }$/;"	f	class:testing::internal::ParamIterator
operator ++	src/gtest/gtest.h	/^  ParamIterator operator++(int \/*unused*\/) {$/;"	f	class:testing::internal::ParamIterator
operator ++	src/gtest/gtest.h	/^  ParamIterator& operator++() {$/;"	f	class:testing::internal::ParamIterator
operator ->	src/gtest/gtest.h	/^  T* operator->() const { return value_; }$/;"	f	class:testing::internal::linked_ptr
operator ->	src/gtest/gtest.h	/^  const T* operator->() const { return impl_->Current(); }$/;"	f	class:testing::internal::ParamIterator
operator <	src/gtest/gtest.h	/^  bool operator<(const String& rhs) const { return Compare(rhs) < 0; }$/;"	f	class:testing::internal::String
operator <<	src/gtest/gtest-all.cpp	/^Message& Message::operator <<(const ::std::wstring& wstr) {$/;"	f	class:testing::Message
operator <<	src/gtest/gtest-all.cpp	/^Message& Message::operator <<(const ::wstring& wstr) {$/;"	f	class:testing::Message
operator <<	src/gtest/gtest-all.cpp	/^std::ostream& operator<<(std::ostream& os, const TestPartResult& result) {$/;"	f	namespace:testing
operator <<	src/gtest/gtest.h	/^  Message& operator <<(BasicNarrowIoManip val) {$/;"	f	class:testing::Message
operator <<	src/gtest/gtest.h	/^  Message& operator <<(bool b) {$/;"	f	class:testing::Message
operator <<	src/gtest/gtest.h	/^  Message& operator <<(const wchar_t* wide_c_str) {$/;"	f	class:testing::Message
operator <<	src/gtest/gtest.h	/^  Message& operator <<(wchar_t* wide_c_str) {$/;"	f	class:testing::Message
operator <<	src/gtest/gtest.h	/^  inline Message& operator <<(T* const& pointer) {  \/\/ NOLINT$/;"	f	class:testing::Message
operator <<	src/gtest/gtest.h	/^  inline Message& operator <<(const T& val) {$/;"	f	class:testing::Message
operator <<	src/gtest/gtest.h	/^  inline Message& operator <<(const T& value) {$/;"	f	class:testing::Message
operator <<	src/gtest/gtest.h	/^  template <typename T> AssertionResult& operator<<(const T& value) {$/;"	f	class:testing::AssertionResult
operator <<	src/gtest/gtest.h	/^::std::basic_ostream<Char, CharTraits>& operator<<($/;"	f	namespace:testing::internal2
operator <<	src/gtest/gtest.h	/^inline ::std::ostream& operator<<(::std::ostream& os, const String& str) {$/;"	f	namespace:testing::internal
operator <<	src/gtest/gtest.h	/^inline std::ostream& operator <<(std::ostream& os, const Message& sb) {$/;"	f	namespace:testing
operator =	src/caffe/common.cpp	/^Caffe::RNG& Caffe::RNG::operator=(const RNG& other) {$/;"	f	class:caffe::Caffe::RNG
operator =	src/gtest/gtest-all.cpp	/^void AssertHelper::operator=(const Message& message) const {$/;"	f	class:testing::internal::AssertHelper
operator =	src/gtest/gtest.h	/^  FilePath& operator=(const FilePath& rhs) {$/;"	f	class:testing::internal::FilePath
operator =	src/gtest/gtest.h	/^  ParamGenerator& operator=(const ParamGenerator& other) {$/;"	f	class:testing::internal::ParamGenerator
operator =	src/gtest/gtest.h	/^  ParamIterator& operator=(const ParamIterator& other) {$/;"	f	class:testing::internal::ParamIterator
operator =	src/gtest/gtest.h	/^  const String& operator=(const String& rhs) {$/;"	f	class:testing::internal::String
operator =	src/gtest/gtest.h	/^  const String& operator=(const char* a_c_str) {$/;"	f	class:testing::internal::String
operator =	src/gtest/gtest.h	/^  linked_ptr& operator=(linked_ptr const& ptr) {$/;"	f	class:testing::internal::linked_ptr
operator =	src/gtest/gtest.h	/^  template <typename U> linked_ptr& operator=(linked_ptr<U> const& ptr) {$/;"	f	class:testing::internal::linked_ptr
operator =	src/gtest/gtest.h	/^  tuple& operator=(const tuple& \/* t *\/) { return *this; }$/;"	f	class:std::tr1::tuple
operator =	src/gtest/gtest.h	/^  tuple& operator=(const tuple& t) { return CopyFrom(t); }$/;"	f	class:std::tr1::tuple
operator ==	src/gtest/gtest.h	/^  bool operator==(T* p) const { return value_ == p; }$/;"	f	class:testing::internal::linked_ptr
operator ==	src/gtest/gtest.h	/^  bool operator==(const NativeArray& rhs) const {$/;"	f	class:testing::internal::NativeArray
operator ==	src/gtest/gtest.h	/^  bool operator==(const ParamIterator& other) const {$/;"	f	class:testing::internal::ParamIterator
operator ==	src/gtest/gtest.h	/^  bool operator==(const char* a_c_str) const { return Compare(a_c_str) == 0; }$/;"	f	class:testing::internal::String
operator ==	src/gtest/gtest.h	/^  bool operator==(linked_ptr<U> const& ptr) const {$/;"	f	class:testing::internal::linked_ptr
operator ==	src/gtest/gtest.h	/^bool operator==(T* ptr, const linked_ptr<T>& x) {$/;"	f	namespace:testing::internal
operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> >	src/gtest/gtest.h	/^  operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8,$/;"	f	class:testing::internal::CartesianProductHolder10
operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8, T9> >	src/gtest/gtest.h	/^  operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8,$/;"	f	class:testing::internal::CartesianProductHolder9
operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8> >	src/gtest/gtest.h	/^  operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7,$/;"	f	class:testing::internal::CartesianProductHolder8
operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7> >	src/gtest/gtest.h	/^  operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6,$/;"	f	class:testing::internal::CartesianProductHolder7
operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6> >	src/gtest/gtest.h	/^  operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6> >() const {$/;"	f	class:testing::internal::CartesianProductHolder6
operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5> >	src/gtest/gtest.h	/^  operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5> >() const {$/;"	f	class:testing::internal::CartesianProductHolder5
operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4> >	src/gtest/gtest.h	/^  operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4> >() const {$/;"	f	class:testing::internal::CartesianProductHolder4
operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3> >	src/gtest/gtest.h	/^  operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3> >() const {$/;"	f	class:testing::internal::CartesianProductHolder3
operator ParamGenerator< ::std::tr1::tuple<T1, T2> >	src/gtest/gtest.h	/^  operator ParamGenerator< ::std::tr1::tuple<T1, T2> >() const {$/;"	f	class:testing::internal::CartesianProductHolder2
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const { return ValuesIn(&v1_, &v1_ + 1); }$/;"	f	class:testing::internal::ValueArray1
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray10
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray11
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray12
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray13
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray14
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray15
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray16
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray17
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray18
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray19
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray2
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray20
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray21
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray22
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray23
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray24
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray25
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray26
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray27
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray28
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray29
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray3
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray30
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray31
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray32
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray33
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray34
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray35
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray36
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray37
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray38
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray39
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray4
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray40
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray41
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray42
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray43
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray44
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray45
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray46
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray47
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray48
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray49
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray5
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray50
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray6
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray7
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray8
operator ParamGenerator<T>	src/gtest/gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray9
operator bool	src/gtest/gtest.h	/^  operator bool() const { return success_; }  \/\/ NOLINT$/;"	f	class:testing::AssertionResult
operator bool	src/gtest/gtest.h	/^  operator bool() const { return true; }$/;"	f	struct:testing::internal::ConstCharPtr
optparse	examples/web_demo/app.py	/^import optparse$/;"	i
or	scripts/cpp_lint.py	/^    check_params = True  # within class or namespace$/;"	c	function:CheckForNonConstReference
original_reporter_	src/gtest/gtest.h	/^  TestPartResultReporterInterface* original_reporter_;$/;"	m	class:testing::internal::HasNewFatalFailureHelper
original_working_dir	src/gtest/gtest-all.cpp	/^const char* UnitTest::original_working_dir() const {$/;"	f	class:testing::UnitTest
original_working_dir_	src/gtest/gtest-all.cpp	/^  internal::FilePath original_working_dir_;$/;"	m	class:testing::internal::UnitTestImpl	file:
os	examples/finetune_flickr_style/assemble_data.py	/^import os$/;"	i
os	examples/pycaffe/layers/pascal_multilabel_datalayers.py	/^import os.path as osp$/;"	i
os	examples/web_demo/app.py	/^import os$/;"	i
os	python/caffe/detector.py	/^import os$/;"	i
os	python/caffe/test/test_draw.py	/^import os$/;"	i
os	python/caffe/test/test_net.py	/^import os$/;"	i
os	python/caffe/test/test_python_layer.py	/^import os$/;"	i
os	python/caffe/test/test_python_layer_with_param_str.py	/^import os$/;"	i
os	python/caffe/test/test_solver.py	/^import os$/;"	i
os	python/classify.py	/^import os$/;"	i
os	python/detect.py	/^import os$/;"	i
os	scripts/copy_notebook.py	/^import os$/;"	i
os	scripts/cpp_lint.py	/^import os$/;"	i
os	scripts/download_model_binary.py	/^import os$/;"	i
os	scripts/split_caffe_proto.py	/^import os$/;"	i
os	src/caffe/test/test_data/generate_sample_data.py	/^import os$/;"	i
os	tools/extra/extract_seconds.py	/^import os$/;"	i
os	tools/extra/parse_log.py	/^import os$/;"	i
os	tools/extra/plot_training_log.py.example	/^import os$/;"	i
os	tools/extra/resize_and_crop_images.py	/^import os$/;"	i
os_stack_trace_getter	src/gtest/gtest-all.cpp	/^OsStackTraceGetterInterface* UnitTestImpl::os_stack_trace_getter() {$/;"	f	class:testing::internal::UnitTestImpl
os_stack_trace_getter_	src/gtest/gtest-all.cpp	/^  OsStackTraceGetterInterface* os_stack_trace_getter_;$/;"	m	class:testing::internal::UnitTestImpl	file:
osp	examples/pycaffe/layers/pascal_multilabel_datalayers.py	/^import os.path as osp$/;"	i
out_max_val_	include/caffe/layers/argmax_layer.hpp	/^  bool out_max_val_;$/;"	m	class:caffe::ArgMaxLayer
out_spatial_dim_	include/caffe/layers/base_conv_layer.hpp	/^  int out_spatial_dim_;$/;"	m	class:caffe::BaseConvolutionLayer
outcome	src/gtest/gtest-all.cpp	/^  DeathTestOutcome outcome() const { return outcome_; }$/;"	f	class:testing::internal::DeathTestImpl
outcome_	src/gtest/gtest-all.cpp	/^  DeathTestOutcome outcome_;$/;"	m	class:testing::internal::DeathTestImpl	file:
outer_	src/caffe/test/test_infogain_loss_layer.cpp	/^  int inner_, outer_, num_labels_;$/;"	m	class:caffe::InfogainLossLayerTest	file:
outer_dim_	include/caffe/layers/bias_layer.hpp	/^  int outer_dim_, bias_dim_, inner_dim_, dim_;$/;"	m	class:caffe::BiasLayer
outer_dim_	include/caffe/layers/scale_layer.hpp	/^  int outer_dim_, scale_dim_, inner_dim_;$/;"	m	class:caffe::ScaleLayer
outer_dim_	include/caffe/layers/tile_layer.hpp	/^  unsigned int axis_, tiles_, outer_dim_, inner_dim_;$/;"	m	class:caffe::TileLayer
outer_num_	include/caffe/layers/accuracy_layer.hpp	/^  int label_axis_, outer_num_, inner_num_;$/;"	m	class:caffe::AccuracyLayer
outer_num_	include/caffe/layers/infogain_loss_layer.hpp	/^  int infogain_axis_, outer_num_, inner_num_, num_labels_;$/;"	m	class:caffe::InfogainLossLayer
outer_num_	include/caffe/layers/sigmoid_cross_entropy_loss_layer.hpp	/^  int outer_num_, inner_num_;$/;"	m	class:caffe::SigmoidCrossEntropyLossLayer
outer_num_	include/caffe/layers/softmax_layer.hpp	/^  int outer_num_;$/;"	m	class:caffe::SoftmaxLayer
outer_num_	include/caffe/layers/softmax_loss_layer.hpp	/^  int softmax_axis_, outer_num_, inner_num_;$/;"	m	class:caffe::SoftmaxWithLossLayer
outer_scale_	include/caffe/layers/exp_layer.hpp	/^  Dtype inner_scale_, outer_scale_;$/;"	m	class:caffe::ExpLayer
output_	src/gtest/gtest-all.cpp	/^  String output_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
output_blob_indices	include/caffe/net.hpp	/^  inline const vector<int>& output_blob_indices() const {$/;"	f	class:caffe::Net
output_blobs	include/caffe/net.hpp	/^  inline const vector<Blob<Dtype>*>& output_blobs() const {$/;"	f	class:caffe::Net
output_blobs_	include/caffe/layers/recurrent_layer.hpp	/^  vector<Blob<Dtype>* > output_blobs_;$/;"	m	class:caffe::RecurrentLayer
output_file_	src/gtest/gtest-all.cpp	/^  const String output_file_;$/;"	m	class:testing::internal::XmlUnitTestResultPrinter	file:
output_file_name_	src/caffe/test/test_hdf5_output_layer.cpp	/^  string output_file_name_;$/;"	m	class:caffe::HDF5OutputLayerTest	file:
output_filename	scripts/copy_notebook.py	/^output_filename = sys.argv[2]$/;"	v
output_labels_	include/caffe/layers/base_data_layer.hpp	/^  bool output_labels_;$/;"	m	class:caffe::BaseDataLayer
output_offset_	include/caffe/layers/base_conv_layer.hpp	/^  int output_offset_;$/;"	m	class:caffe::BaseConvolutionLayer
output_shape_	include/caffe/layers/base_conv_layer.hpp	/^  vector<int> output_shape_;$/;"	m	class:caffe::BaseConvolutionLayer
oversample	python/caffe/io.py	/^def oversample(images, crop_dims):$/;"	f
own_cpu_data_	include/caffe/syncedmem.hpp	/^  bool own_cpu_data_;$/;"	m	class:caffe::SyncedMemory
own_gpu_data_	include/caffe/syncedmem.hpp	/^  bool own_gpu_data_;$/;"	m	class:caffe::SyncedMemory
owner_	src/gtest/gtest.h	/^  pthread_t owner_;  \/\/ The thread holding the mutex; 0 means no one holds it.$/;"	m	class:std::tr1::MutexBase
p	python/train.py	/^        p = Process(target=solve,$/;"	v
pad_	include/caffe/layers/base_conv_layer.hpp	/^  Blob<int> pad_;$/;"	m	class:caffe::BaseConvolutionLayer
pad_	include/caffe/layers/im2col_layer.hpp	/^  Blob<int> pad_;$/;"	m	class:caffe::Im2colLayer
pad_h_	include/caffe/layers/pooling_layer.hpp	/^  int pad_h_, pad_w_;$/;"	m	class:caffe::PoolingLayer
pad_h_	include/caffe/layers/spp_layer.hpp	/^  int pad_h_, pad_w_;$/;"	m	class:caffe::SPPLayer
pad_w_	include/caffe/layers/pooling_layer.hpp	/^  int pad_h_, pad_w_;$/;"	m	class:caffe::PoolingLayer
pad_w_	include/caffe/layers/spp_layer.hpp	/^  int pad_h_, pad_w_;$/;"	m	class:caffe::SPPLayer
pair_sort_first	include/caffe/layers/batch_reindex_layer.hpp	/^  struct pair_sort_first {$/;"	s	class:caffe::BatchReindexLayer
param	include/caffe/solver.hpp	/^  inline const SolverParameter& param() const { return param_; }$/;"	f	class:caffe::Solver
param_	include/caffe/data_transformer.hpp	/^  TransformationParameter param_;$/;"	m	class:caffe::DataTransformer
param_	include/caffe/solver.hpp	/^  SolverParameter param_;$/;"	m	class:caffe::Solver
param_	src/gtest/gtest.h	/^  const T param_;  \/\/ User-supplied parameter to the thread function.$/;"	m	class:std::tr1::ThreadWithParam
param_display_names	include/caffe/net.hpp	/^  inline const vector<string>& param_display_names() const {$/;"	f	class:caffe::Net
param_display_names_	include/caffe/net.hpp	/^  vector<string> param_display_names_;$/;"	m	class:caffe::Net
param_id_vecs_	include/caffe/net.hpp	/^  vector<vector<int> > param_id_vecs_;$/;"	m	class:caffe::Net
param_layer_indices_	include/caffe/net.hpp	/^  vector<pair<int, int> > param_layer_indices_;$/;"	m	class:caffe::Net
param_name_dict	python/caffe/net_spec.py	/^def param_name_dict():$/;"	f
param_names_index	include/caffe/net.hpp	/^  const map<string, int>& param_names_index() const {$/;"	f	class:caffe::Net
param_names_index_	include/caffe/net.hpp	/^  map<string, int> param_names_index_;$/;"	m	class:caffe::Net
param_owners	include/caffe/net.hpp	/^  inline const vector<int>& param_owners() const { return param_owners_; }$/;"	f	class:caffe::Net
param_owners_	include/caffe/net.hpp	/^  vector<int> param_owners_;$/;"	m	class:caffe::Net
param_propagate_down	include/caffe/layer.hpp	/^  inline bool param_propagate_down(const int param_id) {$/;"	f	class:caffe::Layer
param_propagate_down_	include/caffe/layer.hpp	/^  vector<bool> param_propagate_down_;$/;"	m	class:caffe::Layer
parameter_	src/gtest/gtest.h	/^  const ParamType parameter_;$/;"	m	class:testing::internal::ParameterizedTestFactory
parameter_	src/gtest/gtest.h	/^  static const ParamType* parameter_;$/;"	m	class:testing::WithParamInterface
parameter_	src/gtest/gtest.h	/^const T* WithParamInterface<T>::parameter_ = NULL;$/;"	m	class:testing::WithParamInterface
parameter_net_file	python/caffe/test/test_python_layer.py	/^def parameter_net_file():$/;"	f
parameterized_test_registry	src/gtest/gtest-all.cpp	/^    UnitTest::parameterized_test_registry() {$/;"	f	class:testing::UnitTest
parameterized_test_registry	src/gtest/gtest-all.cpp	/^  internal::ParameterizedTestCaseRegistry& parameterized_test_registry() {$/;"	f	class:testing::internal::UnitTestImpl
parameterized_test_registry_	src/gtest/gtest-all.cpp	/^  internal::ParameterizedTestCaseRegistry parameterized_test_registry_;$/;"	m	class:testing::internal::UnitTestImpl	file:
parameterized_tests_registered_	src/gtest/gtest-all.cpp	/^  bool parameterized_tests_registered_;$/;"	m	class:testing::internal::UnitTestImpl	file:
params	include/caffe/net.hpp	/^  inline const vector<shared_ptr<Blob<Dtype> > >& params() const {$/;"	f	class:caffe::Net
params	python/caffe/__init__.py	/^from .net_spec import layers, params, NetSpec, to_proto$/;"	i
params	python/caffe/net_spec.py	/^params = Parameters()$/;"	v
params_	include/caffe/net.hpp	/^  vector<shared_ptr<Blob<Dtype> > > params_;$/;"	m	class:caffe::Net
params_lr	include/caffe/net.hpp	/^  inline const vector<float>& params_lr() const { return params_lr_; }$/;"	f	class:caffe::Net
params_lr_	include/caffe/net.hpp	/^  vector<float> params_lr_;$/;"	m	class:caffe::Net
params_weight_decay	include/caffe/net.hpp	/^  inline const vector<float>& params_weight_decay() const {$/;"	f	class:caffe::Net
params_weight_decay_	include/caffe/net.hpp	/^  vector<float> params_weight_decay_;$/;"	m	class:caffe::Net
parent_	src/gtest/gtest-all.cpp	/^  UnitTest* const parent_;$/;"	m	class:testing::internal::UnitTestImpl	file:
parse_args	python/draw_net.py	/^def parse_args():$/;"	f
parse_args	tools/extra/parse_log.py	/^def parse_args():$/;"	f
parse_line_for_net_output	tools/extra/parse_log.py	/^def parse_line_for_net_output(regex_obj, row, row_dict_list,$/;"	f
parse_log	tools/extra/parse_log.py	/^def parse_log(path_to_log):$/;"	f
parse_readme_frontmatter	scripts/download_model_binary.py	/^def parse_readme_frontmatter(dirname):$/;"	f
parser	examples/finetune_flickr_style/assemble_data.py	/^    parser = argparse.ArgumentParser($/;"	v
parser	python/train.py	/^    parser = argparse.ArgumentParser()$/;"	v
partial_regex_	src/gtest/gtest.h	/^  regex_t partial_regex_;  \/\/ For PartialMatch().$/;"	m	class:std::tr1::RE
passed	src/gtest/gtest.h	/^  bool passed() const { return type_ == kSuccess; }$/;"	f	class:testing::TestPartResult
pathname_	src/gtest/gtest.h	/^  String pathname_;$/;"	m	class:testing::internal::FilePath
pattern	src/gtest/gtest.h	/^  const char* pattern() const { return pattern_; }$/;"	f	class:std::tr1::RE
pattern_	src/gtest/gtest.h	/^  const char* pattern_;$/;"	m	class:std::tr1::RE
pd	examples/finetune_flickr_style/assemble_data.py	/^import pandas as pd$/;"	i
pd	examples/web_demo/app.py	/^import pandas as pd$/;"	i
pd	python/detect.py	/^import pandas as pd$/;"	i
peek	src/caffe/util/blocking_queue.cpp	/^T BlockingQueue<T>::peek() {$/;"	f	class:caffe::BlockingQueue
per_thread_test_part_result_reporter_	src/gtest/gtest-all.cpp	/^      per_thread_test_part_result_reporter_;$/;"	m	class:testing::internal::UnitTestImpl	file:
phase	include/caffe/net.hpp	/^  inline Phase phase() const { return phase_; }$/;"	f	class:caffe::Net
phase_	include/caffe/data_transformer.hpp	/^  Phase phase_;$/;"	m	class:caffe::DataTransformer
phase_	include/caffe/layer.hpp	/^  Phase phase_;$/;"	m	class:caffe::Layer
phase_	include/caffe/net.hpp	/^  Phase phase_;$/;"	m	class:caffe::Net
phase_net_file	python/caffe/test/test_python_layer.py	/^def phase_net_file():$/;"	f
pickle	examples/pycaffe/layers/pascal_multilabel_datalayers.py	/^import pickle$/;"	i
plot_chart	tools/extra/plot_training_log.py.example	/^def plot_chart(chart_type, path_to_png, path_to_log_list):$/;"	f
plt	tools/extra/plot_training_log.py.example	/^import matplotlib.pyplot as plt$/;"	i
pointer	src/gtest/gtest.h	/^    T* pointer() { return &value_; }$/;"	f	class:std::tr1::ThreadLocal::ValueHolder
pointer	src/gtest/gtest.h	/^  T* pointer() { return &value_; }$/;"	f	class:std::tr1::ThreadLocal
pointer	src/gtest/gtest.h	/^  T* pointer() { return GetOrCreateValue(); }$/;"	f	class:std::tr1::ThreadLocal
pointer	src/gtest/gtest.h	/^  const T* pointer() const { return &value_; }$/;"	f	class:std::tr1::ThreadLocal
pointer	src/gtest/gtest.h	/^  const T* pointer() const { return GetOrCreateValue(); }$/;"	f	class:std::tr1::ThreadLocal
pool	examples/finetune_flickr_style/assemble_data.py	/^    pool = multiprocessing.Pool(processes=num_workers)$/;"	v
pool_layer_	include/caffe/layers/lrn_layer.hpp	/^  shared_ptr<PoolingLayer<Dtype> > pool_layer_;$/;"	m	class:caffe::LRNLayer
pool_output_	include/caffe/layers/lrn_layer.hpp	/^  Blob<Dtype> pool_output_;$/;"	m	class:caffe::LRNLayer
pool_top_vec_	include/caffe/layers/lrn_layer.hpp	/^  vector<Blob<Dtype>*> pool_top_vec_;$/;"	m	class:caffe::LRNLayer
pooled_height_	include/caffe/layers/pooling_layer.hpp	/^  int pooled_height_, pooled_width_;$/;"	m	class:caffe::PoolingLayer
pooled_width_	include/caffe/layers/pooling_layer.hpp	/^  int pooled_height_, pooled_width_;$/;"	m	class:caffe::PoolingLayer
pooling_bottom_vecs_	include/caffe/layers/spp_layer.hpp	/^  vector<vector<Blob<Dtype>*>*> pooling_bottom_vecs_;$/;"	m	class:caffe::SPPLayer
pooling_desc_	include/caffe/layers/cudnn_pooling_layer.hpp	/^  cudnnPoolingDescriptor_t  pooling_desc_;$/;"	m	class:caffe::CuDNNPoolingLayer
pooling_layers_	include/caffe/layers/spp_layer.hpp	/^  vector<shared_ptr<PoolingLayer<Dtype> > > pooling_layers_;$/;"	m	class:caffe::SPPLayer
pooling_outputs_	include/caffe/layers/spp_layer.hpp	/^  vector<Blob<Dtype>*> pooling_outputs_;$/;"	m	class:caffe::SPPLayer
pooling_top_vecs_	include/caffe/layers/spp_layer.hpp	/^  vector<vector<Blob<Dtype>*>*> pooling_top_vecs_;$/;"	m	class:caffe::SPPLayer
pop	src/caffe/util/blocking_queue.cpp	/^T BlockingQueue<T>::pop(const string& log_on_wait) {$/;"	f	class:caffe::BlockingQueue
port_num_	src/gtest/gtest-all.cpp	/^  const string port_num_;$/;"	m	class:testing::internal::StreamingListener	file:
pos_	include/caffe/layers/memory_data_layer.hpp	/^  size_t pos_;$/;"	m	class:caffe::MemoryDataLayer
posix	src/gtest/gtest-all.cpp	/^namespace posix {$/;"	n	namespace:testing::internal	file:
posix	src/gtest/gtest.h	/^namespace posix {$/;"	n	namespace:std::tr1
post_flag_parse_init_performed_	src/gtest/gtest-all.cpp	/^  bool post_flag_parse_init_performed_;$/;"	m	class:testing::internal::UnitTestImpl	file:
postcall	python/caffe/_caffe.cpp	/^  PyObject* postcall(PyObject* pyargs, PyObject* result) {$/;"	f	struct:caffe::NdarrayCallPolicies
power_	include/caffe/layers/power_layer.hpp	/^  Dtype power_;$/;"	m	class:caffe::PowerLayer
power_layer_	include/caffe/layers/lrn_layer.hpp	/^  shared_ptr<PowerLayer<Dtype> > power_layer_;$/;"	m	class:caffe::LRNLayer
power_output_	include/caffe/layers/lrn_layer.hpp	/^  Blob<Dtype> power_output_;$/;"	m	class:caffe::LRNLayer
power_top_vec_	include/caffe/layers/lrn_layer.hpp	/^  vector<Blob<Dtype>*> power_top_vec_;$/;"	m	class:caffe::LRNLayer
pre_pad_	include/caffe/layers/cudnn_lcn_layer.hpp	/^  int size_, pre_pad_;$/;"	m	class:caffe::CuDNNLCNLayer
pre_pad_	include/caffe/layers/lrn_layer.hpp	/^  int pre_pad_;$/;"	m	class:caffe::LRNLayer
predict	python/caffe/classifier.py	/^    def predict(self, inputs, oversample=True):$/;"	m	class:Classifier
prefetch_	include/caffe/layers/base_data_layer.hpp	/^  vector<shared_ptr<Batch<Dtype> > > prefetch_;$/;"	m	class:caffe::BasePrefetchingDataLayer
prefetch_current_	include/caffe/layers/base_data_layer.hpp	/^  Batch<Dtype>* prefetch_current_;$/;"	m	class:caffe::BasePrefetchingDataLayer
prefetch_free_	include/caffe/layers/base_data_layer.hpp	/^  BlockingQueue<Batch<Dtype>*> prefetch_free_;$/;"	m	class:caffe::BasePrefetchingDataLayer
prefetch_full_	include/caffe/layers/base_data_layer.hpp	/^  BlockingQueue<Batch<Dtype>*> prefetch_full_;$/;"	m	class:caffe::BasePrefetchingDataLayer
prefetch_rng_	include/caffe/layers/image_data_layer.hpp	/^  shared_ptr<Caffe::RNG> prefetch_rng_;$/;"	m	class:caffe::ImageDataLayer
prefetch_rng_	include/caffe/layers/window_data_layer.hpp	/^  shared_ptr<Caffe::RNG> prefetch_rng_;$/;"	m	class:caffe::WindowDataLayer
prepare_image	matlab/demo/classification_demo.m	/^function crops_data = prepare_image(im)$/;"	f
preprocess	examples/pycaffe/tools.py	/^    def preprocess(self, im):$/;"	m	class:SimpleTransformer
preprocess	python/caffe/io.py	/^    def preprocess(self, in_, data):$/;"	m	class:Transformer
print_function	examples/pycaffe/caffenet.py	/^from __future__ import print_function$/;"	i
print_help	tools/extra/plot_training_log.py.example	/^def print_help():$/;"	f
print_info	examples/pycaffe/layers/pascal_multilabel_datalayers.py	/^def print_info(name, params):$/;"	f
print_table	tools/extra/summarize.py	/^def print_table(table, max_width):$/;"	f
print_time_	src/gtest/gtest-all.cpp	/^  bool print_time_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
printed_len	tools/extra/summarize.py	/^def printed_len(s):$/;"	f
prob_	include/caffe/layers/infogain_loss_layer.hpp	/^  Blob<Dtype> prob_;$/;"	m	class:caffe::InfogainLossLayer
prob_	include/caffe/layers/softmax_loss_layer.hpp	/^  Blob<Dtype> prob_;$/;"	m	class:caffe::SoftmaxWithLossLayer
procs	python/train.py	/^    procs = []$/;"	v
product_bottom_vec_	include/caffe/layers/lrn_layer.hpp	/^  vector<Blob<Dtype>*> product_bottom_vec_;$/;"	m	class:caffe::LRNLayer
product_input_	include/caffe/layers/lrn_layer.hpp	/^  Blob<Dtype> product_input_;$/;"	m	class:caffe::LRNLayer
product_layer_	include/caffe/layers/lrn_layer.hpp	/^  shared_ptr<EltwiseLayer<Dtype> > product_layer_;$/;"	m	class:caffe::LRNLayer
proto2	src/gtest/gtest.h	/^namespace proto2 { class Message; }$/;"	n
protobuf	python/caffe/net_spec.py	/^from google import protobuf$/;"	i
protobuf	tools/extra/summarize.py	/^from google import protobuf$/;"	i
ptr_	src/gtest/gtest.h	/^  T* ptr_;$/;"	m	struct:std::tr1::tuple_element
ptr_to_handle	matlab/+caffe/private/caffe_.cpp	/^static mxArray* ptr_to_handle(const T* ptr) {$/;"	f	file:
ptr_vec_to_handle_vec	matlab/+caffe/private/caffe_.cpp	/^static mxArray* ptr_vec_to_handle_vec(const vector<shared_ptr<T> >& ptr_vec) {$/;"	f	file:
push	src/caffe/util/blocking_queue.cpp	/^void BlockingQueue<T>::push(const T& t) {$/;"	f	class:caffe::BlockingQueue
pydot	python/caffe/draw.py	/^    import pydot$/;"	i
pydot	python/caffe/draw.py	/^    import pydotplus as pydot$/;"	i
pyramid_height_	include/caffe/layers/spp_layer.hpp	/^  int pyramid_height_;$/;"	m	class:caffe::SPPLayer
python_net_file	python/caffe/test/test_python_layer.py	/^def python_net_file():$/;"	f
python_param_net_file	python/caffe/test/test_python_layer_with_param_str.py	/^def python_param_net_file():$/;"	f
queue_	include/caffe/util/blocking_queue.hpp	/^  std::queue<T> queue_;$/;"	m	class:caffe::BlockingQueue
r	scripts/split_caffe_proto.py	/^r = re.compile(r'(?:\/\/.*\\n)*message ([^ ]*) \\{\\n(?: .*\\n|\\n)*\\}')$/;"	v
rand_idx_	include/caffe/layers/pooling_layer.hpp	/^  Blob<Dtype> rand_idx_;$/;"	m	class:caffe::PoolingLayer
rand_vec_	include/caffe/filler.hpp	/^  shared_ptr<SyncedMemory> rand_vec_;$/;"	m	class:caffe::GaussianFiller
rand_vec_	include/caffe/layers/dropout_layer.hpp	/^  Blob<unsigned int> rand_vec_;$/;"	m	class:caffe::DropoutLayer
random	python/caffe/test/test_coord_map.py	/^import random$/;"	i
random	src/gtest/gtest-all.cpp	/^  internal::Random* random() { return &random_; }$/;"	f	class:testing::internal::UnitTestImpl
random	tools/extra/plot_training_log.py.example	/^import random$/;"	i
random_	src/gtest/gtest-all.cpp	/^  internal::Random random_;$/;"	m	class:testing::internal::UnitTestImpl	file:
random_generator_	include/caffe/common.hpp	/^  shared_ptr<RNG> random_generator_;$/;"	m	class:caffe::Caffe
random_marker	tools/extra/plot_training_log.py.example	/^def random_marker():$/;"	f
random_seed	src/gtest/gtest-all.cpp	/^  int random_seed() const { return random_seed_; }$/;"	f	class:testing::internal::UnitTestImpl
random_seed	src/gtest/gtest-all.cpp	/^int UnitTest::random_seed() const { return impl_->random_seed(); }$/;"	f	class:testing::UnitTest
random_seed_	src/gtest/gtest-all.cpp	/^  int random_seed_;$/;"	m	class:testing::internal::UnitTestImpl	file:
random_seed_	src/gtest/gtest-all.cpp	/^  internal::Int32 random_seed_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
rank0_	src/caffe/parallel.cpp	/^  shared_ptr<Solver<Dtype> > rank0_;$/;"	m	class:caffe::Worker	file:
re	scripts/cpp_lint.py	/^import re$/;"	i
re	scripts/split_caffe_proto.py	/^import re$/;"	i
re	tools/extra/parse_log.py	/^import re$/;"	i
re	tools/extra/summarize.py	/^import re$/;"	i
read_fd	src/gtest/gtest-all.cpp	/^  int read_fd() const { return read_fd_; }$/;"	f	class:testing::internal::DeathTestImpl
read_fd_	src/gtest/gtest-all.cpp	/^  int read_fd_;$/;"	m	class:testing::internal::DeathTestImpl	file:
read_image	examples/cifar10/convert_cifar_data.cpp	/^void read_image(std::ifstream* file, int* label, char* buffer) {$/;"	f
read_image	examples/siamese/convert_mnist_siamese_data.cpp	/^void read_image(std::ifstream* image_file, std::ifstream* label_file,$/;"	f
read_mean	matlab/+caffe/private/caffe_.cpp	/^static void read_mean(MEX_ARGS) {$/;"	f	file:
read_net	tools/extra/summarize.py	/^def read_net(filename):$/;"	f
recur_input_blobs_	include/caffe/layers/recurrent_layer.hpp	/^  vector<Blob<Dtype>* > recur_input_blobs_;$/;"	m	class:caffe::RecurrentLayer
recur_output_blobs_	include/caffe/layers/recurrent_layer.hpp	/^  vector<Blob<Dtype>* > recur_output_blobs_;$/;"	m	class:caffe::RecurrentLayer
ref_blob_top_	src/caffe/test/test_convolution_layer.cpp	/^  shared_ptr<Blob<Dtype> > ref_blob_top_;$/;"	m	class:caffe::ConvolutionLayerTest	file:
ref_blob_top_	src/caffe/test/test_convolution_layer.cpp	/^  shared_ptr<Blob<Dtype> > ref_blob_top_;$/;"	m	class:caffe::CuDNNConvolutionLayerTest	file:
reference	src/gtest/gtest.h	/^  typedef const T& reference;$/;"	t	class:testing::internal::ParamIterator
refill_	include/caffe/layers/dummy_data_layer.hpp	/^  vector<bool> refill_;$/;"	m	class:caffe::DummyDataLayer
regex	src/gtest/gtest-all.cpp	/^  const RE* regex() const { return regex_; }$/;"	f	class:testing::internal::DeathTestImpl
regex_	src/gtest/gtest-all.cpp	/^  const RE* const regex_;$/;"	m	class:testing::internal::DeathTestImpl	file:
registered_	src/gtest/gtest.h	/^  bool registered_;$/;"	m	class:testing::internal::TypedTestCasePState
relation_to_source_	src/gtest/gtest.h	/^  RelationToSource relation_to_source_;$/;"	m	class:testing::internal::NativeArray
release	src/gtest/gtest.h	/^  T* release() {$/;"	f	struct:std::tr1::tuple_element
repeat_	src/gtest/gtest-all.cpp	/^  internal::Int32 repeat_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
repeater	src/gtest/gtest-all.cpp	/^TestEventListener* TestEventListeners::repeater() { return repeater_; }$/;"	f	class:testing::TestEventListeners
repeater_	src/gtest/gtest.h	/^  internal::TestEventRepeater* repeater_;$/;"	m	class:testing::TestEventListeners
replace_cpu	src/caffe/parallel.cpp	/^  replace_cpu,$/;"	e	enum:caffe::Op	file:
replace_cpu_diff	src/caffe/parallel.cpp	/^  replace_cpu_diff,$/;"	e	enum:caffe::Op	file:
replace_gpu	src/caffe/parallel.cpp	/^  replace_gpu,$/;"	e	enum:caffe::Op	file:
replace_gpu_diff	src/caffe/parallel.cpp	/^  replace_gpu_diff$/;"	e	enum:caffe::Op	file:
reporthook	scripts/download_model_binary.py	/^def reporthook(count, block_size, total_size):$/;"	f
requested_early_exit_	include/caffe/solver.hpp	/^  bool requested_early_exit_;$/;"	m	class:caffe::Solver
required_keys	scripts/download_model_binary.py	/^required_keys = ['caffemodel', 'caffemodel_url', 'sha1']$/;"	v
reset	matlab/+caffe/private/caffe_.cpp	/^static void reset(MEX_ARGS) {$/;"	f	file:
reset	src/gtest/gtest.h	/^  void reset(T* p = NULL) {$/;"	f	struct:std::tr1::tuple_element
reset	src/gtest/gtest.h	/^  void reset(T* ptr = NULL) {$/;"	f	class:testing::internal::linked_ptr
reset_all	matlab/+caffe/reset_all.m	/^function reset_all()$/;"	f
reshape	examples/pycaffe/layers/pascal_multilabel_datalayers.py	/^    def reshape(self, bottom, top):$/;"	m	class:PascalMultilabelDataLayerSync
reshape	examples/pycaffe/layers/pyloss.py	/^    def reshape(self, bottom, top):$/;"	m	class:EuclideanLossLayer
reshape	python/caffe/test/test_python_layer.py	/^    def reshape(self, bootom, top):$/;"	m	class:PhaseLayer
reshape	python/caffe/test/test_python_layer.py	/^    def reshape(self, bottom, top):$/;"	m	class:ParameterLayer
reshape	python/caffe/test/test_python_layer.py	/^    def reshape(self, bottom, top):$/;"	m	class:SimpleLayer
reshape	python/caffe/test/test_python_layer_with_param_str.py	/^    def reshape(self, bottom, top):$/;"	m	class:SimpleParamLayer
reshaped_first_time_	include/caffe/layers/spp_layer.hpp	/^  bool reshaped_first_time_;$/;"	m	class:caffe::SPPLayer
resize	python/caffe/io.py	/^from skimage.transform import resize$/;"	i
resize_and_crop_image	tools/extra/resize_and_crop_images.py	/^    def resize_and_crop_image(self, input_file, output_file, output_side_length = 256):$/;"	m	class:OpenCVResizeCrop
resize_and_crop_image	tools/extra/resize_and_crop_images.py	/^    def resize_and_crop_image(self, input_file, output_file, output_side_length = 256, fit = True):$/;"	m	class:PILResizeCrop
resize_image	python/caffe/io.py	/^def resize_image(im, new_dims, interp_order=1):$/;"	f
restore_	src/caffe/parallel.cpp	/^  const char* restore_;$/;"	m	class:caffe::Worker	file:
result	src/gtest/gtest.h	/^  const TestResult* result() const { return &result_; }$/;"	f	class:testing::TestInfo
result_	src/gtest/gtest-all.cpp	/^  TestPartResultArray* const result_;$/;"	m	class:testing::ScopedFakeTestPartResultReporter	file:
result_	src/gtest/gtest.h	/^  TestResult result_;$/;"	m	class:testing::TestInfo
result_converter	python/caffe/_caffe.cpp	/^  typedef NdarrayConverterGenerator result_converter;$/;"	t	struct:caffe::NdarrayCallPolicies	file:
results	examples/finetune_flickr_style/assemble_data.py	/^    results = pool.map(download_image, map_args)$/;"	v
results_	src/gtest/gtest-all.cpp	/^  const TestPartResultArray* const results_;$/;"	m	class:testing::internal::SingleFailureChecker	file:
reverse_dimensions	include/caffe/layers/conv_layer.hpp	/^  virtual inline bool reverse_dimensions() { return false; }$/;"	f	class:caffe::ConvolutionLayer
reverse_dimensions	include/caffe/layers/deconv_layer.hpp	/^  virtual inline bool reverse_dimensions() { return true; }$/;"	f	class:caffe::DeconvolutionLayer
rng	src/caffe/common.cpp	/^  caffe::rng_t* rng() { return rng_.get(); }$/;"	f	class:caffe::Caffe::RNG::Generator
rng_	include/caffe/data_transformer.hpp	/^  shared_ptr<Caffe::RNG> rng_;$/;"	m	class:caffe::DataTransformer
rng_	src/caffe/common.cpp	/^  shared_ptr<caffe::rng_t> rng_;$/;"	m	class:caffe::Caffe::RNG::Generator	file:
rng_stream	include/caffe/common.hpp	/^  inline static RNG& rng_stream() {$/;"	f	class:caffe::Caffe
rng_t	include/caffe/util/rng.hpp	/^typedef boost::mt19937 rng_t;$/;"	t	namespace:caffe
root_images_	src/caffe/test/test_db.cpp	/^  string root_images_;$/;"	m	class:caffe::DBTest	file:
root_solver	include/caffe/common.hpp	/^  inline static bool root_solver() { return Get().solver_rank_ == 0; }$/;"	f	class:caffe::Caffe
run	python/caffe/_caffe.cpp	/^  virtual void run(int layer) {$/;"	f	class:caffe::NetCallback
run	src/caffe/parallel.cpp	/^void NCCL<Dtype>::run(int layer) {$/;"	f	class:caffe::NCCL
run_	python/caffe/_caffe.cpp	/^  bp::object run_;$/;"	m	class:caffe::NetCallback	file:
run_tests	matlab/+caffe/run_tests.m	/^function results = run_tests()$/;"	f
running	include/caffe/util/benchmark.hpp	/^  inline bool running() { return running_; }$/;"	f	class:caffe::Timer
running_	include/caffe/util/benchmark.hpp	/^  bool running_;$/;"	m	class:caffe::Timer
sample_mean	src/caffe/test/test_random_number_generator.cpp	/^  Dtype sample_mean(const Dtype* const seqs) {$/;"	f	class:caffe::RandomNumberGeneratorTest
sample_mean	src/caffe/test/test_random_number_generator.cpp	/^  Dtype sample_mean(const Dtype* const seqs, const int sample_size) {$/;"	f	class:caffe::RandomNumberGeneratorTest
sample_mean	src/caffe/test/test_random_number_generator.cpp	/^  Dtype sample_mean(const int* const seqs) {$/;"	f	class:caffe::RandomNumberGeneratorTest
sample_mean	src/caffe/test/test_random_number_generator.cpp	/^  Dtype sample_mean(const int* const seqs, const int sample_size) {$/;"	f	class:caffe::RandomNumberGeneratorTest
sample_size_	src/caffe/test/test_random_number_generator.cpp	/^  size_t sample_size_;$/;"	m	class:caffe::RandomNumberGeneratorTest	file:
save_csv_files	tools/extra/parse_log.py	/^def save_csv_files(logfile_path, output_dir, train_dict_list, test_dict_list,$/;"	f
scale_	include/caffe/layers/dropout_layer.hpp	/^  Dtype scale_;$/;"	m	class:caffe::DropoutLayer
scale_	include/caffe/layers/lrn_layer.hpp	/^  Blob<Dtype> scale_;$/;"	m	class:caffe::LRNLayer
scale_	include/caffe/layers/power_layer.hpp	/^  Dtype scale_;$/;"	m	class:caffe::PowerLayer
scale_	include/caffe/layers/softmax_layer.hpp	/^  Blob<Dtype> scale_;$/;"	m	class:caffe::SoftmaxLayer
scale_data	src/caffe/blob.cpp	/^template <> void Blob<int>::scale_data(int scale_factor) {$/;"	f	class:caffe::Blob
scale_data	src/caffe/blob.cpp	/^template <> void Blob<unsigned int>::scale_data(unsigned int scale_factor) {$/;"	f	class:caffe::Blob
scale_data	src/caffe/blob.cpp	/^void Blob<Dtype>::scale_data(Dtype scale_factor) {$/;"	f	class:caffe::Blob
scale_diff	src/caffe/blob.cpp	/^template <> void Blob<int>::scale_diff(int scale_factor) {$/;"	f	class:caffe::Blob
scale_diff	src/caffe/blob.cpp	/^template <> void Blob<unsigned int>::scale_diff(unsigned int scale_factor) {$/;"	f	class:caffe::Blob
scale_diff	src/caffe/blob.cpp	/^void Blob<Dtype>::scale_diff(Dtype scale_factor) {$/;"	f	class:caffe::Blob
scale_dim_	include/caffe/layers/scale_layer.hpp	/^  int outer_dim_, scale_dim_, inner_dim_;$/;"	m	class:caffe::ScaleLayer
scipy	examples/pycaffe/layers/pascal_multilabel_datalayers.py	/^import scipy.misc$/;"	i
script_dir	src/caffe/test/test_data/generate_sample_data.py	/^script_dir = os.path.dirname(os.path.abspath(__file__))$/;"	v
script_path	scripts/split_caffe_proto.py	/^script_path = os.path.dirname(os.path.realpath(__file__))$/;"	v
seed_	include/caffe/test/test_gradient_check_util.hpp	/^  unsigned int seed_;$/;"	m	class:caffe::GradientChecker
seed_	src/caffe/test/test_data_layer.cpp	/^  int seed_;$/;"	m	class:caffe::DataLayerTest	file:
seed_	src/caffe/test/test_data_transformer.cpp	/^  int seed_;$/;"	m	class:caffe::DataTransformTest	file:
seed_	src/caffe/test/test_gradient_based_solver.cpp	/^  int seed_;$/;"	m	class:caffe::GradientBasedSolverTest	file:
seed_	src/caffe/test/test_image_data_layer.cpp	/^  int seed_;$/;"	m	class:caffe::ImageDataLayerTest	file:
seed_	src/caffe/test/test_net.cpp	/^  int seed_;$/;"	m	class:caffe::NetTest	file:
seed_	src/caffe/test/test_random_number_generator.cpp	/^  uint32_t seed_;$/;"	m	class:caffe::RandomNumberGeneratorTest	file:
selective_search	python/caffe/detector.py	/^        import selective_search_ijcv_with_python as selective_search$/;"	i
self_	include/caffe/layers/python_layer.hpp	/^  bp::object self_;$/;"	m	class:caffe::PythonLayer
set	src/gtest/gtest.h	/^  void set(const T& value) { *pointer() = value; }$/;"	f	class:std::tr1::ThreadLocal
set	src/gtest/gtest.h	/^  void set(const T& value) { value_ = value; }$/;"	f	class:std::tr1::ThreadLocal
setConvolutionDesc	include/caffe/util/cudnn.hpp	/^inline void setConvolutionDesc(cudnnConvolutionDescriptor_t* conv,$/;"	f	namespace:caffe::cudnn
setTensor4dDesc	include/caffe/util/cudnn.hpp	/^inline void setTensor4dDesc(cudnnTensorDescriptor_t* desc,$/;"	f	namespace:caffe::cudnn
setUp	python/caffe/test/test_coord_map.py	/^    def setUp(self):$/;"	m	class:TestCoordMap
setUp	python/caffe/test/test_net.py	/^    def setUp(self):$/;"	m	class:TestAllInOne
setUp	python/caffe/test/test_net.py	/^    def setUp(self):$/;"	m	class:TestLevels
setUp	python/caffe/test/test_net.py	/^    def setUp(self):$/;"	m	class:TestNet
setUp	python/caffe/test/test_net.py	/^    def setUp(self):$/;"	m	class:TestStages
setUp	python/caffe/test/test_python_layer.py	/^    def setUp(self):$/;"	m	class:TestPythonLayer
setUp	python/caffe/test/test_python_layer_with_param_str.py	/^    def setUp(self):$/;"	m	class:TestLayerWithParam
setUp	python/caffe/test/test_solver.py	/^    def setUp(self):$/;"	m	class:TestSolver
set_barrier	src/caffe/parallel.cpp	/^void NCCL<Dtype>::set_barrier(boost::barrier* value) {$/;"	f	class:caffe::NCCL
set_batch_size	src/caffe/layers/memory_data_layer.cpp	/^void MemoryDataLayer<Dtype>::set_batch_size(int new_size) {$/;"	f	class:caffe::MemoryDataLayer
set_catch_exceptions	src/gtest/gtest-all.cpp	/^  void set_catch_exceptions(bool value) { catch_exceptions_ = value; }$/;"	f	class:testing::internal::UnitTestImpl	file:
set_channel_swap	python/caffe/io.py	/^    def set_channel_swap(self, in_, order):$/;"	m	class:Transformer
set_child_pid	src/gtest/gtest-all.cpp	/^  void set_child_pid(pid_t child_pid) { child_pid_ = child_pid; }$/;"	f	class:testing::internal::ForkingDeathTest
set_cpu_data	src/caffe/blob.cpp	/^void Blob<Dtype>::set_cpu_data(Dtype* data) {$/;"	f	class:caffe::Blob
set_cpu_data	src/caffe/syncedmem.cpp	/^void SyncedMemory::set_cpu_data(void* data) {$/;"	f	class:caffe::SyncedMemory
set_current_test_case	src/gtest/gtest-all.cpp	/^  void set_current_test_case(TestCase* a_current_test_case) {$/;"	f	class:testing::internal::UnitTestImpl
set_current_test_info	src/gtest/gtest-all.cpp	/^  void set_current_test_info(TestInfo* a_current_test_info) {$/;"	f	class:testing::internal::UnitTestImpl
set_debug_info	include/caffe/net.hpp	/^  void set_debug_info(const bool value) { debug_info_ = value; }$/;"	f	class:caffe::Net
set_device	matlab/+caffe/private/caffe_.cpp	/^static void set_device(MEX_ARGS) {$/;"	f	file:
set_device	matlab/+caffe/set_device.m	/^function set_device(device_id)$/;"	f
set_device	python/caffe/__init__.py	/^from ._caffe import init_log, log, set_mode_cpu, set_mode_gpu, set_device, Layer, get_solver, layer_type_list, set_random_seed, solver_count, set_solver_count, solver_rank, set_solver_rank, set_multiprocess, has_nccl$/;"	i
set_elapsed_time	src/gtest/gtest.h	/^  void set_elapsed_time(TimeInMillis elapsed) { elapsed_time_ = elapsed; }$/;"	f	class:testing::TestResult
set_forwarding_enabled	src/gtest/gtest-all.cpp	/^  void set_forwarding_enabled(bool enable) { forwarding_enabled_ = enable; }$/;"	f	class:testing::internal::TestEventRepeater
set_gpu_data	src/caffe/blob.cpp	/^void Blob<Dtype>::set_gpu_data(Dtype* data) {$/;"	f	class:caffe::Blob
set_gpu_data	src/caffe/syncedmem.cpp	/^void SyncedMemory::set_gpu_data(void* data) {$/;"	f	class:caffe::SyncedMemory
set_input_scale	python/caffe/io.py	/^    def set_input_scale(self, in_, scale):$/;"	m	class:Transformer
set_last_death_test_message	src/gtest/gtest-all.cpp	/^void DeathTest::set_last_death_test_message(const String& message) {$/;"	f	class:testing::internal::DeathTest
set_loss	include/caffe/layer.hpp	/^  inline void set_loss(const int top_index, const Dtype value) {$/;"	f	class:caffe::Layer
set_mean	examples/pycaffe/tools.py	/^    def set_mean(self, mean):$/;"	m	class:SimpleTransformer
set_mean	python/caffe/io.py	/^    def set_mean(self, in_, mean):$/;"	m	class:Transformer
set_mode	include/caffe/common.hpp	/^  inline static void set_mode(Brew mode) { Get().mode_ = mode; }$/;"	f	class:caffe::Caffe
set_mode_cpu	matlab/+caffe/private/caffe_.cpp	/^static void set_mode_cpu(MEX_ARGS) {$/;"	f	file:
set_mode_cpu	matlab/+caffe/set_mode_cpu.m	/^function set_mode_cpu()$/;"	f
set_mode_cpu	python/caffe/__init__.py	/^from ._caffe import init_log, log, set_mode_cpu, set_mode_gpu, set_device, Layer, get_solver, layer_type_list, set_random_seed, solver_count, set_solver_count, solver_rank, set_solver_rank, set_multiprocess, has_nccl$/;"	i
set_mode_cpu	python/caffe/_caffe.cpp	/^void set_mode_cpu() { Caffe::set_mode(Caffe::CPU); }$/;"	f	namespace:caffe
set_mode_gpu	matlab/+caffe/private/caffe_.cpp	/^static void set_mode_gpu(MEX_ARGS) {$/;"	f	file:
set_mode_gpu	matlab/+caffe/set_mode_gpu.m	/^function set_mode_gpu()$/;"	f
set_mode_gpu	python/caffe/__init__.py	/^from ._caffe import init_log, log, set_mode_cpu, set_mode_gpu, set_device, Layer, get_solver, layer_type_list, set_random_seed, solver_count, set_solver_count, solver_rank, set_solver_rank, set_multiprocess, has_nccl$/;"	i
set_mode_gpu	python/caffe/_caffe.cpp	/^void set_mode_gpu() { Caffe::set_mode(Caffe::GPU); }$/;"	f	namespace:caffe
set_multiprocess	include/caffe/common.hpp	/^  inline static void set_multiprocess(bool val) { Get().multiprocess_ = val; }$/;"	f	class:caffe::Caffe
set_multiprocess	python/caffe/__init__.py	/^from ._caffe import init_log, log, set_mode_cpu, set_mode_gpu, set_device, Layer, get_solver, layer_type_list, set_random_seed, solver_count, set_solver_count, solver_rank, set_solver_rank, set_multiprocess, has_nccl$/;"	i
set_os_stack_trace_getter	src/gtest/gtest-all.cpp	/^void UnitTestImpl::set_os_stack_trace_getter($/;"	f	class:testing::internal::UnitTestImpl
set_outcome	src/gtest/gtest-all.cpp	/^  void set_outcome(DeathTestOutcome an_outcome) { outcome_ = an_outcome; }$/;"	f	class:testing::internal::DeathTestImpl
set_param_propagate_down	include/caffe/layer.hpp	/^  inline void set_param_propagate_down(const int param_id, const bool value) {$/;"	f	class:caffe::Layer
set_random_seed	python/caffe/__init__.py	/^from ._caffe import init_log, log, set_mode_cpu, set_mode_gpu, set_device, Layer, get_solver, layer_type_list, set_random_seed, solver_count, set_solver_count, solver_rank, set_solver_rank, set_multiprocess, has_nccl$/;"	i
set_random_seed	python/caffe/_caffe.cpp	/^void set_random_seed(unsigned int seed) { Caffe::set_random_seed(seed); }$/;"	f	namespace:caffe
set_random_seed	src/caffe/common.cpp	/^void Caffe::set_random_seed(const unsigned int seed) {$/;"	f	class:caffe::Caffe
set_raw_scale	python/caffe/io.py	/^    def set_raw_scale(self, in_, scale):$/;"	m	class:Transformer
set_read_fd	src/gtest/gtest-all.cpp	/^  void set_read_fd(int fd) { read_fd_ = fd; }$/;"	f	class:testing::internal::DeathTestImpl
set_scale	examples/pycaffe/tools.py	/^    def set_scale(self, scale):$/;"	m	class:SimpleTransformer
set_should_run	src/gtest/gtest.h	/^  void set_should_run(bool should) { should_run_ = should; }$/;"	f	class:testing::TestCase
set_solver_count	include/caffe/common.hpp	/^  inline static void set_solver_count(int val) { Get().solver_count_ = val; }$/;"	f	class:caffe::Caffe
set_solver_count	python/caffe/__init__.py	/^from ._caffe import init_log, log, set_mode_cpu, set_mode_gpu, set_device, Layer, get_solver, layer_type_list, set_random_seed, solver_count, set_solver_count, solver_rank, set_solver_rank, set_multiprocess, has_nccl$/;"	i
set_solver_rank	include/caffe/common.hpp	/^  inline static void set_solver_rank(int val) { Get().solver_rank_ = val; }$/;"	f	class:caffe::Caffe
set_solver_rank	python/caffe/__init__.py	/^from ._caffe import init_log, log, set_mode_cpu, set_mode_gpu, set_device, Layer, get_solver, layer_type_list, set_random_seed, solver_count, set_solver_count, solver_rank, set_solver_rank, set_multiprocess, has_nccl$/;"	i
set_spawned	src/gtest/gtest-all.cpp	/^  void set_spawned(bool is_spawned) { spawned_ = is_spawned; }$/;"	f	class:testing::internal::DeathTestImpl
set_status	src/gtest/gtest-all.cpp	/^  void set_status(int a_status) { status_ = a_status; }$/;"	f	class:testing::internal::DeathTestImpl
set_transpose	python/caffe/io.py	/^    def set_transpose(self, in_, order):$/;"	m	class:Transformer
set_up_tc_	src/gtest/gtest.h	/^  Test::SetUpTestCaseFunc set_up_tc_;$/;"	m	class:testing::TestCase
set_write_fd	src/gtest/gtest-all.cpp	/^  void set_write_fd(int fd) { write_fd_ = fd; }$/;"	f	class:testing::internal::DeathTestImpl
setup	examples/pycaffe/layers/pascal_multilabel_datalayers.py	/^    def setup(self, bottom, top):$/;"	m	class:PascalMultilabelDataLayerSync
setup	examples/pycaffe/layers/pyloss.py	/^    def setup(self, bottom, top):$/;"	m	class:EuclideanLossLayer
setup	python/caffe/test/test_python_layer.py	/^    def setup(self, bottom, top):$/;"	m	class:ExceptionLayer
setup	python/caffe/test/test_python_layer.py	/^    def setup(self, bottom, top):$/;"	m	class:ParameterLayer
setup	python/caffe/test/test_python_layer.py	/^    def setup(self, bottom, top):$/;"	m	class:PhaseLayer
setup	python/caffe/test/test_python_layer.py	/^    def setup(self, bottom, top):$/;"	m	class:SimpleLayer
setup	python/caffe/test/test_python_layer_with_param_str.py	/^    def setup(self, bottom, top):$/;"	m	class:SimpleParamLayer
setup_handle	matlab/+caffe/private/caffe_.cpp	/^static void setup_handle(const T* ptr, int index, mxArray* mx_handle_vec) {$/;"	f	file:
severity_	src/gtest/gtest.h	/^  const GTestLogSeverity severity_;$/;"	m	class:std::tr1::GTestLog
shape	include/caffe/blob.hpp	/^  inline const vector<int>& shape() const { return shape_; }$/;"	f	class:caffe::Blob
shape	include/caffe/blob.hpp	/^  inline int shape(int index) const {$/;"	f	class:caffe::Blob
shape_	include/caffe/blob.hpp	/^  vector<int> shape_;$/;"	m	class:caffe::Blob
shape_data_	include/caffe/blob.hpp	/^  shared_ptr<SyncedMemory> shape_data_;$/;"	m	class:caffe::Blob
shape_string	include/caffe/blob.hpp	/^  inline string shape_string() const {$/;"	f	class:caffe::Blob
share_	src/caffe/test/test_gradient_based_solver.cpp	/^  bool share_;$/;"	m	class:caffe::GradientBasedSolverTest	file:
share_weights	python/caffe/_caffe.cpp	/^void share_weights(Solver<Dtype>* solver, Net<Dtype>* net) {$/;"	f	namespace:caffe
shift_	include/caffe/layers/power_layer.hpp	/^  Dtype shift_;$/;"	m	class:caffe::PowerLayer
should_run	src/gtest/gtest.h	/^  bool should_run() const { return should_run_; }$/;"	f	class:testing::TestCase
should_run	src/gtest/gtest.h	/^  bool should_run() const { return should_run_; }$/;"	f	class:testing::TestInfo
should_run_	src/gtest/gtest.h	/^  bool should_run_;                 \/\/ True iff this test should run$/;"	m	class:testing::TestInfo
should_run_	src/gtest/gtest.h	/^  bool should_run_;$/;"	m	class:testing::TestCase
show_time	python/train.py	/^    def show_time():$/;"	f	function:time
shuffle	examples/pycaffe/layers/pascal_multilabel_datalayers.py	/^from random import shuffle$/;"	i
shuffle	include/caffe/util/rng.hpp	/^inline void shuffle(RandomAccessIterator begin, RandomAccessIterator end) {$/;"	f	namespace:caffe
shuffle	include/caffe/util/rng.hpp	/^inline void shuffle(RandomAccessIterator begin, RandomAccessIterator end,$/;"	f	namespace:caffe
shuffle_	src/gtest/gtest-all.cpp	/^  bool shuffle_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
sigmoid	src/caffe/layers/lstm_unit_layer.cpp	/^inline Dtype sigmoid(Dtype x) {$/;"	f	namespace:caffe
sigmoid	src/caffe/layers/sigmoid_layer.cpp	/^inline Dtype sigmoid(Dtype x) {$/;"	f	namespace:caffe
sigmoid_bottom_vec_	include/caffe/layers/sigmoid_cross_entropy_loss_layer.hpp	/^  vector<Blob<Dtype>*> sigmoid_bottom_vec_;$/;"	m	class:caffe::SigmoidCrossEntropyLossLayer
sigmoid_layer_	include/caffe/layers/sigmoid_cross_entropy_loss_layer.hpp	/^  shared_ptr<SigmoidLayer<Dtype> > sigmoid_layer_;$/;"	m	class:caffe::SigmoidCrossEntropyLossLayer
sigmoid_output_	include/caffe/layers/sigmoid_cross_entropy_loss_layer.hpp	/^  shared_ptr<Blob<Dtype> > sigmoid_output_;$/;"	m	class:caffe::SigmoidCrossEntropyLossLayer
sigmoid_top_vec_	include/caffe/layers/sigmoid_cross_entropy_loss_layer.hpp	/^  vector<Blob<Dtype>*> sigmoid_top_vec_;$/;"	m	class:caffe::SigmoidCrossEntropyLossLayer
sign_bit	src/gtest/gtest.h	/^  Bits sign_bit() const { return kSignBitMask & u_.bits_; }$/;"	f	class:testing::internal::FloatingPoint
signum_	src/gtest/gtest.h	/^  const int signum_;$/;"	m	class:testing::KilledBySignal
silent_net	python/caffe/test/test_net_spec.py	/^def silent_net():$/;"	f
simple_net_file	python/caffe/test/test_net.py	/^def simple_net_file(num_output):$/;"	f
simple_net_file	python/caffe/test/test_solver.py	/^from test_net import simple_net_file$/;"	i
simple_solver_param	src/caffe/test/test_solver_factory.cpp	/^  SolverParameter simple_solver_param() {$/;"	f	class:caffe::SolverFactoryTest
six	python/caffe/net_spec.py	/^import six$/;"	i
six	python/caffe/pycaffe.py	/^import six$/;"	i
six	python/caffe/test/test_net.py	/^import six$/;"	i
six	python/caffe/test/test_python_layer.py	/^import six$/;"	i
six	python/caffe/test/test_python_layer_with_param_str.py	/^import six$/;"	i
six	python/caffe/test/test_solver.py	/^import six$/;"	i
six	scripts/cpp_lint.py	/^import six$/;"	i
size	include/caffe/parallel.hpp	/^  inline size_t size() const {$/;"	f	class:caffe::Params
size	include/caffe/syncedmem.hpp	/^  size_t size() { return size_; }$/;"	f	class:caffe::SyncedMemory
size	src/caffe/util/blocking_queue.cpp	/^size_t BlockingQueue<T>::size() const {$/;"	f	class:caffe::BlockingQueue
size	src/gtest/gtest-all.cpp	/^int TestPartResultArray::size() const {$/;"	f	class:testing::TestPartResultArray
size	src/gtest/gtest.h	/^  size_t size() const { return size_; }$/;"	f	class:testing::internal::NativeArray
size_	include/caffe/layers/cudnn_lcn_layer.hpp	/^  int size_, pre_pad_;$/;"	m	class:caffe::CuDNNLCNLayer
size_	include/caffe/layers/cudnn_lrn_layer.hpp	/^  int size_;$/;"	m	class:caffe::CuDNNLRNLayer
size_	include/caffe/layers/lrn_layer.hpp	/^  int size_;$/;"	m	class:caffe::LRNLayer
size_	include/caffe/layers/memory_data_layer.hpp	/^  int batch_size_, channels_, height_, width_, size_;$/;"	m	class:caffe::MemoryDataLayer
size_	include/caffe/parallel.hpp	/^  const size_t size_;           \/\/ Size of buffers$/;"	m	class:caffe::Params
size_	include/caffe/syncedmem.hpp	/^  size_t size_;$/;"	m	class:caffe::SyncedMemory
size_	src/gtest/gtest.h	/^  size_t size_;$/;"	m	class:testing::internal::NativeArray
skimage	examples/pycaffe/layers/pascal_multilabel_datalayers.py	/^import skimage.io$/;"	i
skimage	python/caffe/io.py	/^import skimage.io$/;"	i
slice_axis_	include/caffe/layers/slice_layer.hpp	/^  int slice_axis_;$/;"	m	class:caffe::SliceLayer
slice_point_	include/caffe/layers/slice_layer.hpp	/^  vector<int> slice_point_;$/;"	m	class:caffe::SliceLayer
slice_size_	include/caffe/layers/slice_layer.hpp	/^  int slice_size_;$/;"	m	class:caffe::SliceLayer
smoothed_loss_	include/caffe/solver.hpp	/^  Dtype smoothed_loss_;$/;"	m	class:caffe::Solver
snapshot_prefix_	src/caffe/test/test_gradient_based_solver.cpp	/^  string snapshot_prefix_;$/;"	m	class:caffe::GradientBasedSolverTest	file:
snprintf	src/gtest/gtest-all.cpp	/^# define snprintf /;"	d	file:
sockfd_	src/gtest/gtest-all.cpp	/^  int sockfd_;   \/\/ socket file descriptor$/;"	m	class:testing::internal::StreamingListener	file:
softmax_axis_	include/caffe/layers/softmax_layer.hpp	/^  int softmax_axis_;$/;"	m	class:caffe::SoftmaxLayer
softmax_axis_	include/caffe/layers/softmax_loss_layer.hpp	/^  int softmax_axis_, outer_num_, inner_num_;$/;"	m	class:caffe::SoftmaxWithLossLayer
softmax_bottom_vec_	include/caffe/layers/infogain_loss_layer.hpp	/^  vector<Blob<Dtype>*> softmax_bottom_vec_;$/;"	m	class:caffe::InfogainLossLayer
softmax_bottom_vec_	include/caffe/layers/softmax_loss_layer.hpp	/^  vector<Blob<Dtype>*> softmax_bottom_vec_;$/;"	m	class:caffe::SoftmaxWithLossLayer
softmax_layer_	include/caffe/layers/infogain_loss_layer.hpp	/^  shared_ptr<Layer<Dtype> > softmax_layer_;$/;"	m	class:caffe::InfogainLossLayer
softmax_layer_	include/caffe/layers/softmax_loss_layer.hpp	/^  shared_ptr<Layer<Dtype> > softmax_layer_;$/;"	m	class:caffe::SoftmaxWithLossLayer
softmax_top_vec_	include/caffe/layers/infogain_loss_layer.hpp	/^  vector<Blob<Dtype>*> softmax_top_vec_;$/;"	m	class:caffe::InfogainLossLayer
softmax_top_vec_	include/caffe/layers/softmax_loss_layer.hpp	/^  vector<Blob<Dtype>*> softmax_top_vec_;$/;"	m	class:caffe::SoftmaxWithLossLayer
solve	python/train.py	/^def solve(proto, snapshot, gpus, timing, uid, rank):$/;"	f
solver_	include/caffe/parallel.hpp	/^  shared_ptr<Solver<Dtype> > solver_;$/;"	m	class:caffe::NCCL
solver_	src/caffe/test/test_gradient_based_solver.cpp	/^  shared_ptr<SGDSolver<Dtype> > solver_;$/;"	m	class:caffe::GradientBasedSolverTest	file:
solver_	src/caffe/test/test_solver.cpp	/^  shared_ptr<Solver<Dtype> > solver_;$/;"	m	class:caffe::SolverTest	file:
solver_count	include/caffe/common.hpp	/^  inline static int solver_count() { return Get().solver_count_; }$/;"	f	class:caffe::Caffe
solver_count	python/caffe/__init__.py	/^from ._caffe import init_log, log, set_mode_cpu, set_mode_gpu, set_device, Layer, get_solver, layer_type_list, set_random_seed, solver_count, set_solver_count, solver_rank, set_solver_rank, set_multiprocess, has_nccl$/;"	i
solver_count_	include/caffe/common.hpp	/^  int solver_count_;$/;"	m	class:caffe::Caffe
solver_get_attr	matlab/+caffe/private/caffe_.cpp	/^static void solver_get_attr(MEX_ARGS) {$/;"	f	file:
solver_get_iter	matlab/+caffe/private/caffe_.cpp	/^static void solver_get_iter(MEX_ARGS) {$/;"	f	file:
solver_rank	include/caffe/common.hpp	/^  inline static int solver_rank() { return Get().solver_rank_; }$/;"	f	class:caffe::Caffe
solver_rank	python/caffe/__init__.py	/^from ._caffe import init_log, log, set_mode_cpu, set_mode_gpu, set_device, Layer, get_solver, layer_type_list, set_random_seed, solver_count, set_solver_count, solver_rank, set_solver_rank, set_multiprocess, has_nccl$/;"	i
solver_rank_	include/caffe/common.hpp	/^  int solver_rank_;$/;"	m	class:caffe::Caffe
solver_restore	matlab/+caffe/private/caffe_.cpp	/^static void solver_restore(MEX_ARGS) {$/;"	f	file:
solver_solve	matlab/+caffe/private/caffe_.cpp	/^static void solver_solve(MEX_ARGS) {$/;"	f	file:
solver_step	matlab/+caffe/private/caffe_.cpp	/^static void solver_step(MEX_ARGS) {$/;"	f	file:
solvers_	matlab/+caffe/private/caffe_.cpp	/^static vector<shared_ptr<Solver<float> > > solvers_;$/;"	v	file:
source_	src/caffe/test/test_db.cpp	/^  string source_;$/;"	m	class:caffe::DBTest	file:
spatial_sum_multiplier_	include/caffe/layers/batch_norm_layer.hpp	/^  Blob<Dtype> spatial_sum_multiplier_;$/;"	m	class:caffe::BatchNormLayer
spawned	src/gtest/gtest-all.cpp	/^  bool spawned() const { return spawned_; }$/;"	f	class:testing::internal::DeathTestImpl
spawned_	src/gtest/gtest-all.cpp	/^  bool spawned_;$/;"	m	class:testing::internal::DeathTestImpl	file:
split_layer_	include/caffe/layers/lrn_layer.hpp	/^  shared_ptr<SplitLayer<Dtype> > split_layer_;$/;"	m	class:caffe::LRNLayer
split_layer_	include/caffe/layers/spp_layer.hpp	/^  shared_ptr<SplitLayer<Dtype> > split_layer_;$/;"	m	class:caffe::SPPLayer
split_top_vec_	include/caffe/layers/lrn_layer.hpp	/^  vector<Blob<Dtype>*> split_top_vec_;$/;"	m	class:caffe::LRNLayer
split_top_vec_	include/caffe/layers/spp_layer.hpp	/^  vector<Blob<Dtype>*> split_top_vec_;$/;"	m	class:caffe::SPPLayer
square_bottom_vec_	include/caffe/layers/lrn_layer.hpp	/^  vector<Blob<Dtype>*> square_bottom_vec_;$/;"	m	class:caffe::LRNLayer
square_input_	include/caffe/layers/lrn_layer.hpp	/^  Blob<Dtype> square_input_;$/;"	m	class:caffe::LRNLayer
square_layer_	include/caffe/layers/lrn_layer.hpp	/^  shared_ptr<PowerLayer<Dtype> > square_layer_;$/;"	m	class:caffe::LRNLayer
square_output_	include/caffe/layers/lrn_layer.hpp	/^  Blob<Dtype> square_output_;$/;"	m	class:caffe::LRNLayer
square_top_vec_	include/caffe/layers/lrn_layer.hpp	/^  vector<Blob<Dtype>*> square_top_vec_;$/;"	m	class:caffe::LRNLayer
src_strides_	include/caffe/layers/crop_layer.hpp	/^  Blob<int> src_strides_;$/;"	m	class:caffe::CropLayer
sre_compile	scripts/cpp_lint.py	/^import sre_compile$/;"	i
ss_	src/gtest/gtest.h	/^  const internal::scoped_ptr< ::std::stringstream> ss_;$/;"	m	class:testing::Message
stable_prod_grad_	include/caffe/layers/eltwise_layer.hpp	/^  bool stable_prod_grad_;$/;"	m	class:caffe::EltwiseLayer
stack_trace_depth_	src/gtest/gtest-all.cpp	/^  internal::Int32 stack_trace_depth_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
start_cpu_	include/caffe/util/benchmark.hpp	/^  boost::posix_time::ptime start_cpu_;$/;"	m	class:caffe::Timer
start_from_terminal	examples/web_demo/app.py	/^def start_from_terminal(app):$/;"	f
start_gpu_	include/caffe/util/benchmark.hpp	/^  cudaEvent_t start_gpu_;$/;"	m	class:caffe::Timer
start_tornado	examples/web_demo/app.py	/^def start_tornado(app, port=5000):$/;"	f
state_	src/gtest/gtest.h	/^  UInt32 state_;$/;"	m	class:testing::internal::Random
statement	src/gtest/gtest-all.cpp	/^  const char* statement() const { return statement_; }$/;"	f	class:testing::internal::DeathTestImpl
statement_	src/gtest/gtest-all.cpp	/^  const char* const statement_;$/;"	m	class:testing::internal::DeathTestImpl	file:
static_input_	include/caffe/layers/recurrent_layer.hpp	/^  bool static_input_;$/;"	m	class:caffe::RecurrentLayer
status	src/gtest/gtest-all.cpp	/^  int status() const { return status_; }$/;"	f	class:testing::internal::DeathTestImpl
status_	src/gtest/gtest-all.cpp	/^  int status_;$/;"	m	class:testing::internal::DeathTestImpl	file:
std	src/gtest/gtest.h	/^namespace std {$/;"	n
step_	src/gtest/gtest.h	/^    const IncrementT step_;$/;"	m	class:testing::internal::RangeGenerator::Iterator
step_	src/gtest/gtest.h	/^  const IncrementT step_;$/;"	m	class:testing::internal::RangeGenerator
stepsize_	include/caffe/test/test_gradient_check_util.hpp	/^  Dtype stepsize_;$/;"	m	class:caffe::GradientChecker
stop_cpu_	include/caffe/util/benchmark.hpp	/^  boost::posix_time::ptime stop_cpu_;$/;"	m	class:caffe::Timer
stop_gpu_	include/caffe/util/benchmark.hpp	/^  cudaEvent_t stop_gpu_;$/;"	m	class:caffe::Timer
store2hdf5	matlab/hdf5creation/store2hdf5.m	/^function [curr_dat_sz, curr_lab_sz] = store2hdf5(filename, data, labels, create, startloc, chunksz)  $/;"	f
str_vec_to_mx_strcell	matlab/+caffe/private/caffe_.cpp	/^static mxArray* str_vec_to_mx_strcell(const vector<std::string>& str_vec) {$/;"	f	file:
stream_	include/caffe/layers/cudnn_conv_layer.hpp	/^  cudaStream_t*  stream_;$/;"	m	class:caffe::CuDNNConvolutionLayer
stream_	include/caffe/parallel.hpp	/^  cudaStream_t stream_;$/;"	m	class:caffe::NCCL
stream_result_to_	src/gtest/gtest-all.cpp	/^  String stream_result_to_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
stride_	include/caffe/layers/base_conv_layer.hpp	/^  Blob<int> stride_;$/;"	m	class:caffe::BaseConvolutionLayer
stride_	include/caffe/layers/im2col_layer.hpp	/^  Blob<int> stride_;$/;"	m	class:caffe::Im2colLayer
stride_h_	include/caffe/layers/pooling_layer.hpp	/^  int stride_h_, stride_w_;$/;"	m	class:caffe::PoolingLayer
stride_w_	include/caffe/layers/pooling_layer.hpp	/^  int stride_h_, stride_w_;$/;"	m	class:caffe::PoolingLayer
string	scripts/cpp_lint.py	/^import string$/;"	i
string	src/gtest/gtest.h	/^  operator ::std::string() const { return ::std::string(c_str(), length()); }$/;"	f	class:testing::internal::String::operator::std
string	src/gtest/gtest.h	/^  operator ::string() const { return ::string(c_str(), length()); }$/;"	f	class:testing::internal::String::operator
substr_	src/gtest/gtest-all.cpp	/^  const string substr_;$/;"	m	class:testing::internal::SingleFailureChecker	file:
success_	src/gtest/gtest.h	/^  bool success_;$/;"	m	class:testing::AssertionResult
successful_test_case_count	src/gtest/gtest-all.cpp	/^int UnitTest::successful_test_case_count() const {$/;"	f	class:testing::UnitTest
successful_test_case_count	src/gtest/gtest-all.cpp	/^int UnitTestImpl::successful_test_case_count() const {$/;"	f	class:testing::internal::UnitTestImpl
successful_test_count	src/gtest/gtest-all.cpp	/^int TestCase::successful_test_count() const {$/;"	f	class:testing::TestCase
successful_test_count	src/gtest/gtest-all.cpp	/^int UnitTest::successful_test_count() const {$/;"	f	class:testing::UnitTest
successful_test_count	src/gtest/gtest-all.cpp	/^int UnitTestImpl::successful_test_count() const {$/;"	f	class:testing::internal::UnitTestImpl
sum_multiplier_	include/caffe/layers/mvn_layer.hpp	/^  Blob<Dtype> sum_multiplier_;$/;"	m	class:caffe::MVNLayer
sum_multiplier_	include/caffe/layers/reduction_layer.hpp	/^  Blob<Dtype> sum_multiplier_;$/;"	m	class:caffe::ReductionLayer
sum_multiplier_	include/caffe/layers/scale_layer.hpp	/^  Blob<Dtype> sum_multiplier_;$/;"	m	class:caffe::ScaleLayer
sum_multiplier_	include/caffe/layers/softmax_layer.hpp	/^  Blob<Dtype> sum_multiplier_;$/;"	m	class:caffe::SoftmaxLayer
sum_result_	include/caffe/layers/scale_layer.hpp	/^  Blob<Dtype> sum_result_;$/;"	m	class:caffe::ScaleLayer
sum_rows_H_	include/caffe/layers/infogain_loss_layer.hpp	/^  Blob<Dtype> sum_rows_H_;  \/\/ cache the row sums of H.$/;"	m	class:caffe::InfogainLossLayer
sum_rows_of_H	src/caffe/layers/infogain_loss_layer.cpp	/^void InfogainLossLayer<Dtype>::sum_rows_of_H(const Blob<Dtype>* H) {$/;"	f	class:caffe::InfogainLossLayer
summarize_net	tools/extra/summarize.py	/^def summarize_net(net):$/;"	f
summary	src/gtest/gtest.h	/^  const char* summary() const { return summary_.c_str(); }$/;"	f	class:testing::TestPartResult
summary_	src/gtest/gtest.h	/^  internal::String summary_;  \/\/ The test failure summary.$/;"	m	class:testing::TestPartResult
summer_vec_	include/caffe/layers/contrastive_loss_layer.hpp	/^  Blob<Dtype> summer_vec_;  \/\/ tmp storage for gpu forward pass$/;"	m	class:caffe::ContrastiveLossLayer
sumsq_data	src/caffe/blob.cpp	/^Dtype Blob<Dtype>::sumsq_data() const {$/;"	f	class:caffe::Blob
sumsq_data	src/caffe/blob.cpp	/^template <> int Blob<int>::sumsq_data() const {$/;"	f	class:caffe::Blob
sumsq_data	src/caffe/blob.cpp	/^template <> unsigned int Blob<unsigned int>::sumsq_data() const {$/;"	f	class:caffe::Blob
sumsq_diff	src/caffe/blob.cpp	/^Dtype Blob<Dtype>::sumsq_diff() const {$/;"	f	class:caffe::Blob
sumsq_diff	src/caffe/blob.cpp	/^template <> int Blob<int>::sumsq_diff() const {$/;"	f	class:caffe::Blob
sumsq_diff	src/caffe/blob.cpp	/^template <> unsigned int Blob<unsigned int>::sumsq_diff() const {$/;"	f	class:caffe::Blob
swap_endian	examples/mnist/convert_mnist_data.cpp	/^uint32_t swap_endian(uint32_t val) {$/;"	f
swap_endian	examples/siamese/convert_mnist_siamese_data.cpp	/^uint32_t swap_endian(uint32_t val) {$/;"	f
sync	src/caffe/util/blocking_queue.cpp	/^class BlockingQueue<T>::sync {$/;"	c	class:caffe::BlockingQueue	file:
sync_	include/caffe/util/blocking_queue.hpp	/^  shared_ptr<sync> sync_;$/;"	m	class:caffe::BlockingQueue
sys	python/caffe/io.py	/^    import sys$/;"	i
sys	python/caffe/test/test_nccl.py	/^import sys$/;"	i
sys	python/classify.py	/^import sys$/;"	i
sys	python/detect.py	/^    import sys$/;"	i
sys	scripts/copy_notebook.py	/^import sys$/;"	i
sys	scripts/cpp_lint.py	/^import sys$/;"	i
sys	scripts/download_model_binary.py	/^import sys$/;"	i
sys	tools/extra/extract_seconds.py	/^import sys$/;"	i
sys	tools/extra/plot_training_log.py.example	/^import sys$/;"	i
tanh	src/caffe/layers/lstm_unit_layer.cpp	/^inline Dtype tanh(Dtype x) {$/;"	f	namespace:caffe
tanh_naive	src/caffe/test/test_tanh_layer.cpp	/^double tanh_naive(double x) {$/;"	f	namespace:caffe
targets	src/caffe/test/test_data/generate_sample_data.py	/^targets = np.random.randn(num_rows, 1)$/;"	v
targets	src/caffe/test/test_data/generate_sample_data.py	/^targets = targets.astype('float32')$/;"	v
tearDown	python/caffe/test/test_net.py	/^    def tearDown(self):$/;"	m	class:TestAllInOne
tearDown	python/caffe/test/test_net.py	/^    def tearDown(self):$/;"	m	class:TestLevels
tearDown	python/caffe/test/test_net.py	/^    def tearDown(self):$/;"	m	class:TestStages
tear_down_tc_	src/gtest/gtest.h	/^  Test::TearDownTestCaseFunc tear_down_tc_;$/;"	m	class:testing::TestCase
tempData1	include/caffe/layers/cudnn_lcn_layer.hpp	/^  void *tempData1, *tempData2;$/;"	m	class:caffe::CuDNNLCNLayer
tempData2	include/caffe/layers/cudnn_lcn_layer.hpp	/^  void *tempData1, *tempData2;$/;"	m	class:caffe::CuDNNLCNLayer
tempDataSize	include/caffe/layers/cudnn_lcn_layer.hpp	/^  size_t tempDataSize;$/;"	m	class:caffe::CuDNNLCNLayer
temp_	include/caffe/layers/batch_norm_layer.hpp	/^  Blob<Dtype> mean_, variance_, temp_, x_norm_;$/;"	m	class:caffe::BatchNormLayer
temp_	include/caffe/layers/mvn_layer.hpp	/^  Blob<Dtype> mean_, variance_, temp_;$/;"	m	class:caffe::MVNLayer
temp_	include/caffe/layers/scale_layer.hpp	/^  Blob<Dtype> temp_;$/;"	m	class:caffe::ScaleLayer
temp_	include/caffe/sgd_solvers.hpp	/^  vector<shared_ptr<Blob<Dtype> > > history_, update_, temp_;$/;"	m	class:caffe::SGDSolver
tempfile	python/caffe/test/test_net.py	/^import tempfile$/;"	i
tempfile	python/caffe/test/test_net_spec.py	/^import tempfile$/;"	i
tempfile	python/caffe/test/test_python_layer.py	/^import tempfile$/;"	i
tempfile	python/caffe/test/test_python_layer_with_param_str.py	/^import tempfile$/;"	i
tempfile	python/caffe/test/test_solver.py	/^import tempfile$/;"	i
test	tools/caffe.cpp	/^RegisterBrewFunction(test);$/;"	v
test	tools/caffe.cpp	/^int test() {$/;"	f
test_	src/gtest/gtest.h	/^    DeathTest* const test_;$/;"	m	class:testing::internal::DeathTest::ReturnSentinel
test_0	python/caffe/test/test_net.py	/^    def test_0(self):$/;"	m	class:TestLevels
test_1	python/caffe/test/test_net.py	/^    def test_1(self):$/;"	m	class:TestLevels
test_A	python/caffe/test/test_net.py	/^    def test_A(self):$/;"	m	class:TestStages
test_AandB	python/caffe/test/test_net.py	/^    def test_AandB(self):$/;"	m	class:TestStages
test_B	python/caffe/test/test_net.py	/^    def test_B(self):$/;"	m	class:TestStages
test_backward	python/caffe/test/test_python_layer.py	/^    def test_backward(self):$/;"	m	class:TestPythonLayer
test_backward	python/caffe/test/test_python_layer_with_param_str.py	/^    def test_backward(self):$/;"	m	class:TestLayerWithParam
test_backward_start_end	python/caffe/test/test_net.py	/^    def test_backward_start_end(self):$/;"	m	class:TestNet
test_base_name	src/gtest/gtest.h	/^    const string test_base_name;$/;"	m	struct:testing::internal::ParameterizedTestCaseInfo::TestInfo
test_case_base_name	src/gtest/gtest.h	/^    const string test_case_base_name;$/;"	m	struct:testing::internal::ParameterizedTestCaseInfo::TestInfo
test_case_indices_	src/gtest/gtest-all.cpp	/^  std::vector<int> test_case_indices_;$/;"	m	class:testing::internal::UnitTestImpl	file:
test_case_infos_	src/gtest/gtest.h	/^  TestCaseInfoContainer test_case_infos_;$/;"	m	class:testing::internal::ParameterizedTestCaseRegistry
test_case_name	src/gtest/gtest.h	/^  const char* test_case_name() const { return test_case_name_.c_str(); }$/;"	f	class:testing::TestInfo
test_case_name_	src/gtest/gtest-all.cpp	/^  internal::String test_case_name_;$/;"	m	class:testing::internal::PrettyUnitTestResultPrinter	file:
test_case_name_	src/gtest/gtest.h	/^  const std::string test_case_name_;     \/\/ Test case name$/;"	m	class:testing::TestInfo
test_case_name_	src/gtest/gtest.h	/^  const string test_case_name_;$/;"	m	class:testing::internal::ParameterizedTestCaseInfo
test_case_to_run_count	src/gtest/gtest-all.cpp	/^int UnitTest::test_case_to_run_count() const {$/;"	f	class:testing::UnitTest
test_case_to_run_count	src/gtest/gtest-all.cpp	/^int UnitTestImpl::test_case_to_run_count() const {$/;"	f	class:testing::internal::UnitTestImpl
test_cases_	src/gtest/gtest-all.cpp	/^  std::vector<TestCase*> test_cases_;$/;"	m	class:testing::internal::UnitTestImpl	file:
test_catch_negative_crop	python/caffe/test/test_coord_map.py	/^    def test_catch_negative_crop(self):$/;"	m	class:TestCoordMap
test_catch_scale_mismatch	python/caffe/test/test_coord_map.py	/^    def test_catch_scale_mismatch(self):$/;"	m	class:TestCoordMap
test_catch_unconnected	python/caffe/test/test_coord_map.py	/^    def test_catch_unconnected(self):$/;"	m	class:TestCoordMap
test_clear_param_diffs	python/caffe/test/test_net.py	/^    def test_clear_param_diffs(self):$/;"	m	class:TestNet
test_conv_pool_deconv	python/caffe/test/test_coord_map.py	/^    def test_conv_pool_deconv(self):$/;"	m	class:TestCoordMap
test_crop_helper	python/caffe/test/test_coord_map.py	/^    def test_crop_helper(self):$/;"	m	class:TestCoordMap
test_crop_of_crop	python/caffe/test/test_coord_map.py	/^    def test_crop_of_crop(self):$/;"	m	class:TestCoordMap
test_deploy	python/caffe/test/test_net.py	/^    def test_deploy(self):$/;"	m	class:TestAllInOne
test_draw_net	python/caffe/test/test_draw.py	/^    def test_draw_net(self):$/;"	m	class:TestDraw
test_exception	python/caffe/test/test_python_layer.py	/^    def test_exception(self):$/;"	m	class:TestPythonLayer
test_forward	python/caffe/test/test_python_layer.py	/^    def test_forward(self):$/;"	m	class:TestPythonLayer
test_forward	python/caffe/test/test_python_layer_with_param_str.py	/^    def test_forward(self):$/;"	m	class:TestLayerWithParam
test_forward_backward	python/caffe/test/test_net.py	/^    def test_forward_backward(self):$/;"	m	class:TestNet
test_forward_start_end	python/caffe/test/test_net.py	/^    def test_forward_start_end(self):$/;"	m	class:TestNet
test_indices_	src/gtest/gtest.h	/^  std::vector<int> test_indices_;$/;"	m	class:testing::TestCase
test_info_list	src/gtest/gtest.h	/^  const std::vector<TestInfo*>& test_info_list() const {$/;"	f	class:testing::TestCase
test_info_list	src/gtest/gtest.h	/^  std::vector<TestInfo*>& test_info_list() { return test_info_list_; }$/;"	f	class:testing::TestCase
test_info_list_	src/gtest/gtest.h	/^  std::vector<TestInfo*> test_info_list_;$/;"	m	class:testing::TestCase
test_inputs_outputs	python/caffe/test/test_net.py	/^    def test_inputs_outputs(self):$/;"	m	class:TestNet
test_label_none_size	python/caffe/test/test_io.py	/^    def test_label_none_size(self):$/;"	m	class:TestArrayToDatum
test_layer_dict	python/caffe/test/test_net.py	/^    def test_layer_dict(self):$/;"	m	class:TestNet
test_lenet	python/caffe/test/test_net_spec.py	/^    def test_lenet(self):$/;"	m	class:TestNetSpec
test_memory	python/caffe/test/test_net.py	/^    def test_memory(self):$/;"	m	class:TestNet
test_meta_factory	src/gtest/gtest.h	/^    const scoped_ptr<TestMetaFactoryBase<ParamType> > test_meta_factory;$/;"	m	struct:testing::internal::ParameterizedTestCaseInfo::TestInfo
test_multi_conv	python/caffe/test/test_coord_map.py	/^    def test_multi_conv(self):$/;"	m	class:TestCoordMap
test_nd_conv	python/caffe/test/test_coord_map.py	/^    def test_nd_conv(self):$/;"	m	class:TestCoordMap
test_net_memory	python/caffe/test/test_solver.py	/^    def test_net_memory(self):$/;"	m	class:TestSolver
test_nets	include/caffe/solver.hpp	/^  inline const vector<shared_ptr<Net<Dtype> > >& test_nets() {$/;"	f	class:caffe::Solver
test_nets_	include/caffe/solver.hpp	/^  vector<shared_ptr<Net<Dtype> > > test_nets_;$/;"	m	class:caffe::Solver
test_new_format	python/caffe/test/test_io.py	/^    def test_new_format(self):$/;"	m	class:TestBlobProtoToArray
test_newuid	python/caffe/test/test_nccl.py	/^    def test_newuid(self):$/;"	m	class:TestNCCL
test_no_shape	python/caffe/test/test_io.py	/^    def test_no_shape(self):$/;"	m	class:TestBlobProtoToArray
test_old_format	python/caffe/test/test_io.py	/^    def test_old_format(self):$/;"	m	class:TestBlobProtoToArray
test_padding	python/caffe/test/test_coord_map.py	/^    def test_padding(self):$/;"	m	class:TestCoordMap
test_parameter	python/caffe/test/test_python_layer.py	/^    def test_parameter(self):$/;"	m	class:TestPythonLayer
test_params	src/caffe/test/test_filler.cpp	/^  virtual void test_params(FillerParameter_VarianceNorm variance_norm,$/;"	f	class:caffe::MSRAFillerTest
test_params	src/caffe/test/test_filler.cpp	/^  virtual void test_params(FillerParameter_VarianceNorm variance_norm,$/;"	f	class:caffe::XavierFillerTest
test_part_results	src/gtest/gtest-all.cpp	/^  static const std::vector<testing::TestPartResult>& test_part_results($/;"	f	class:testing::internal::TestResultAccessor
test_part_results	src/gtest/gtest.h	/^  const std::vector<TestPartResult>& test_part_results() const {$/;"	f	class:testing::TestResult
test_part_results_	src/gtest/gtest.h	/^  std::vector<TestPartResult> test_part_results_;$/;"	m	class:testing::TestResult
test_pass	python/caffe/test/test_coord_map.py	/^    def test_pass(self):$/;"	m	class:TestCoordMap
test_phase	python/caffe/test/test_python_layer.py	/^    def test_phase(self):$/;"	m	class:TestPythonLayer
test_properites_mutex_	src/gtest/gtest.h	/^  internal::Mutex test_properites_mutex_;$/;"	m	class:testing::TestResult
test_properties	src/gtest/gtest.h	/^  const std::vector<TestProperty>& test_properties() const {$/;"	f	class:testing::TestResult
test_properties_	src/gtest/gtest.h	/^  std::vector<TestProperty> test_properties_;$/;"	m	class:testing::TestResult
test_property_count	src/gtest/gtest-all.cpp	/^int TestResult::test_property_count() const {$/;"	f	class:testing::TestResult
test_rect	python/caffe/test/test_coord_map.py	/^    def test_rect(self):$/;"	m	class:TestCoordMap
test_reshape	python/caffe/test/test_python_layer.py	/^    def test_reshape(self):$/;"	m	class:TestPythonLayer
test_save_and_read	python/caffe/test/test_net.py	/^    def test_save_and_read(self):$/;"	m	class:TestNet
test_save_hdf5	python/caffe/test/test_net.py	/^    def test_save_hdf5(self):$/;"	m	class:TestNet
test_scalar	python/caffe/test/test_io.py	/^    def test_scalar(self):$/;"	m	class:TestBlobProtoToArray
test_snapshot	python/caffe/test/test_solver.py	/^    def test_snapshot(self):$/;"	m	class:TestSolver
test_solve	python/caffe/test/test_solver.py	/^    def test_solve(self):$/;"	m	class:TestSolver
test_standard_types	python/caffe/test/test_layer_type_list.py	/^    def test_standard_types(self):$/;"	m	class:TestLayerTypeList
test_to_run_count	src/gtest/gtest-all.cpp	/^int TestCase::test_to_run_count() const {$/;"	f	class:testing::TestCase
test_to_run_count	src/gtest/gtest-all.cpp	/^int UnitTest::test_to_run_count() const { return impl()->test_to_run_count(); }$/;"	f	class:testing::UnitTest
test_to_run_count	src/gtest/gtest-all.cpp	/^int UnitTestImpl::test_to_run_count() const {$/;"	f	class:testing::internal::UnitTestImpl
test_top_bottom_names	python/caffe/test/test_net.py	/^    def test_top_bottom_names(self):$/;"	m	class:TestNet
test_train	python/caffe/test/test_net.py	/^    def test_train(self):$/;"	m	class:TestAllInOne
test_type_error	python/caffe/test/test_net_spec.py	/^    def test_type_error(self):$/;"	m	class:TestNetSpec
test_val	python/caffe/test/test_net.py	/^    def test_val(self):$/;"	m	class:TestAllInOne
test_zero_tops	python/caffe/test/test_net_spec.py	/^    def test_zero_tops(self):$/;"	m	class:TestNetSpec
testing	src/gtest/gtest-all.cpp	/^namespace testing {$/;"	n	file:
testing	src/gtest/gtest.h	/^namespace testing {$/;"	n
testing_internal	src/gtest/gtest.h	/^namespace testing_internal {$/;"	n
tests_	src/gtest/gtest.h	/^  TestInfoContainer tests_;$/;"	m	class:testing::internal::ParameterizedTestCaseInfo
text_format	python/caffe/test/test_draw.py	/^from google.protobuf import text_format$/;"	i
text_format	python/draw_net.py	/^from google.protobuf import text_format$/;"	i
thread_	include/caffe/internal_thread.hpp	/^  shared_ptr<boost::thread> thread_;$/;"	m	class:caffe::InternalThread
thread_	src/gtest/gtest.h	/^  pthread_t thread_;  \/\/ The native thread object.$/;"	m	class:std::tr1::ThreadWithParam
thread_can_start_	src/gtest/gtest.h	/^  Notification* const thread_can_start_;$/;"	m	class:std::tr1::ThreadWithParam
thread_instance_	src/caffe/common.cpp	/^static boost::thread_specific_ptr<Caffe> thread_instance_;$/;"	m	namespace:caffe	file:
threading_list	scripts/cpp_lint.py	/^threading_list = ($/;"	v
threshold_	include/caffe/layers/dropout_layer.hpp	/^  Dtype threshold_;$/;"	m	class:caffe::DropoutLayer
threshold_	include/caffe/layers/threshold_layer.hpp	/^  Dtype threshold_;$/;"	m	class:caffe::ThresholdLayer
threshold_	include/caffe/test/test_gradient_check_util.hpp	/^  Dtype threshold_;$/;"	m	class:caffe::GradientChecker
throw_on_failure_	src/gtest/gtest-all.cpp	/^  bool throw_on_failure_;$/;"	m	class:testing::internal::GTestFlagSaver	file:
tiles_	include/caffe/layers/tile_layer.hpp	/^  unsigned int axis_, tiles_, outer_dim_, inner_dim_;$/;"	m	class:caffe::TileLayer
time	examples/pycaffe/layers/pascal_multilabel_datalayers.py	/^import time$/;"	i
time	examples/web_demo/app.py	/^import time$/;"	i
time	python/classify.py	/^import time$/;"	i
time	python/detect.py	/^import time$/;"	i
time	python/train.py	/^def time(solver, nccl):$/;"	f
time	scripts/download_model_binary.py	/^import time$/;"	i
time	tools/caffe.cpp	/^RegisterBrewFunction(time);$/;"	v
time	tools/caffe.cpp	/^int time() {$/;"	f
to_cpu	src/caffe/syncedmem.cpp	/^inline void SyncedMemory::to_cpu() {$/;"	f	class:caffe::SyncedMemory
to_gpu	src/caffe/syncedmem.cpp	/^inline void SyncedMemory::to_gpu() {$/;"	f	class:caffe::SyncedMemory
to_proto	examples/pycaffe/caffenet.py	/^from caffe import layers as L, params as P, to_proto$/;"	i
to_proto	python/caffe/__init__.py	/^from .net_spec import layers, params, NetSpec, to_proto$/;"	i
to_proto	python/caffe/net_spec.py	/^    def to_proto(self):$/;"	m	class:NetSpec
to_proto	python/caffe/net_spec.py	/^    def to_proto(self):$/;"	m	class:Top
to_proto	python/caffe/net_spec.py	/^def to_proto(*tops):$/;"	f
top_desc_	include/caffe/layers/cudnn_lcn_layer.hpp	/^  cudnnTensorDescriptor_t bottom_desc_, top_desc_;$/;"	m	class:caffe::CuDNNLCNLayer
top_desc_	include/caffe/layers/cudnn_lrn_layer.hpp	/^  cudnnTensorDescriptor_t bottom_desc_, top_desc_;$/;"	m	class:caffe::CuDNNLRNLayer
top_desc_	include/caffe/layers/cudnn_pooling_layer.hpp	/^  cudnnTensorDescriptor_t bottom_desc_, top_desc_;$/;"	m	class:caffe::CuDNNPoolingLayer
top_desc_	include/caffe/layers/cudnn_relu_layer.hpp	/^  cudnnTensorDescriptor_t top_desc_;$/;"	m	class:caffe::CuDNNReLULayer
top_desc_	include/caffe/layers/cudnn_sigmoid_layer.hpp	/^  cudnnTensorDescriptor_t top_desc_;$/;"	m	class:caffe::CuDNNSigmoidLayer
top_desc_	include/caffe/layers/cudnn_softmax_layer.hpp	/^  cudnnTensorDescriptor_t top_desc_;$/;"	m	class:caffe::CuDNNSoftmaxLayer
top_desc_	include/caffe/layers/cudnn_tanh_layer.hpp	/^  cudnnTensorDescriptor_t top_desc_;$/;"	m	class:caffe::CuDNNTanHLayer
top_descs_	include/caffe/layers/cudnn_conv_layer.hpp	/^  vector<cudnnTensorDescriptor_t> bottom_descs_, top_descs_;$/;"	m	class:caffe::CuDNNConvolutionLayer
top_dim_	include/caffe/layers/base_conv_layer.hpp	/^  int top_dim_;$/;"	m	class:caffe::BaseConvolutionLayer
top_dim_	include/caffe/layers/im2col_layer.hpp	/^  int top_dim_;$/;"	m	class:caffe::Im2colLayer
top_id_vecs_	include/caffe/net.hpp	/^  vector<vector<int> > top_id_vecs_;$/;"	m	class:caffe::Net
top_ids	include/caffe/net.hpp	/^  inline const vector<int> & top_ids(int i) const {$/;"	f	class:caffe::Net
top_k_	include/caffe/layers/accuracy_layer.hpp	/^  int top_k_;$/;"	m	class:caffe::AccuracyLayer
top_k_	include/caffe/layers/argmax_layer.hpp	/^  size_t top_k_;$/;"	m	class:caffe::ArgMaxLayer
top_k_	src/caffe/test/test_accuracy_layer.cpp	/^  int top_k_;$/;"	m	class:caffe::AccuracyLayerTest	file:
top_k_	src/caffe/test/test_argmax_layer.cpp	/^  size_t top_k_;$/;"	m	class:caffe::ArgMaxLayerTest	file:
top_offset_	include/caffe/layers/cudnn_conv_layer.hpp	/^  int bottom_offset_, top_offset_, bias_offset_;$/;"	m	class:caffe::CuDNNConvolutionLayer
top_vecs	include/caffe/net.hpp	/^  inline const vector<vector<Blob<Dtype>*> >& top_vecs() const {$/;"	f	class:caffe::Net
top_vecs_	include/caffe/net.hpp	/^  vector<vector<Blob<Dtype>*> > top_vecs_;$/;"	m	class:caffe::Net
tornado	examples/web_demo/app.py	/^import tornado.httpserver$/;"	i
tornado	examples/web_demo/app.py	/^import tornado.wsgi$/;"	i
total_part_count	src/gtest/gtest-all.cpp	/^int TestResult::total_part_count() const {$/;"	f	class:testing::TestResult
total_size	src/caffe/parallel.cpp	/^static size_t total_size(const vector<Blob<Dtype>*>& params) {$/;"	f	namespace:caffe
total_size	src/caffe/test/test_data/generate_sample_data.py	/^total_size = num_cols * num_rows * height * width$/;"	v
total_test_case_count	src/gtest/gtest-all.cpp	/^int UnitTest::total_test_case_count() const {$/;"	f	class:testing::UnitTest
total_test_case_count	src/gtest/gtest-all.cpp	/^int UnitTestImpl::total_test_case_count() const {$/;"	f	class:testing::internal::UnitTestImpl
total_test_count	src/gtest/gtest-all.cpp	/^int TestCase::total_test_count() const {$/;"	f	class:testing::TestCase
total_test_count	src/gtest/gtest-all.cpp	/^int UnitTest::total_test_count() const { return impl()->total_test_count(); }$/;"	f	class:testing::UnitTest
total_test_count	src/gtest/gtest-all.cpp	/^int UnitTestImpl::total_test_count() const {$/;"	f	class:testing::internal::UnitTestImpl
tr1	src/gtest/gtest.h	/^namespace tr1 {$/;"	n	namespace:std
train	python/train.py	/^def train($/;"	f
train	tools/caffe.cpp	/^RegisterBrewFunction(train);$/;"	v
train	tools/caffe.cpp	/^int train() {$/;"	f
training_dirname	examples/finetune_flickr_style/assemble_data.py	/^        training_dirname = os.path.join(caffe_dirname, 'data\/flickr_style')$/;"	v
training_dirname	examples/finetune_flickr_style/assemble_data.py	/^training_dirname = os.path.join(caffe_dirname, 'data\/flickr_style')$/;"	v
transform_param_	include/caffe/layers/base_data_layer.hpp	/^  TransformationParameter transform_param_;$/;"	m	class:caffe::BaseDataLayer
transformed_data_	include/caffe/layers/base_data_layer.hpp	/^  Blob<Dtype> transformed_data_;$/;"	m	class:caffe::BasePrefetchingDataLayer
transpose_	include/caffe/layers/inner_product_layer.hpp	/^  bool transpose_;  \/\/\/< if true, assume transposed weights$/;"	m	class:caffe::InnerProductLayer
true_type	src/gtest/gtest.h	/^typedef bool_constant<true> true_type;$/;"	t	namespace:std::tr1
try_peek	src/caffe/util/blocking_queue.cpp	/^bool BlockingQueue<T>::try_peek(T* t) {$/;"	f	class:caffe::BlockingQueue
try_pop	src/caffe/util/blocking_queue.cpp	/^bool BlockingQueue<T>::try_pop(T* t) {$/;"	f	class:caffe::BlockingQueue
tuple	src/gtest/gtest.h	/^  tuple() : f0_(), f1_(), f2_(), f3_(), f4_(), f5_(), f6_(), f7_(), f8_(),$/;"	f	class:std::tr1::tuple
tuple	src/gtest/gtest.h	/^  tuple() {}$/;"	f	class:std::tr1::tuple
tuple	src/gtest/gtest.h	/^  tuple(const tuple& \/* t *\/)  {}$/;"	f	class:std::tr1::tuple
tuple	src/gtest/gtest.h	/^  tuple(const tuple& t) : f0_(t.f0_), f1_(t.f1_), f2_(t.f2_), f3_(t.f3_),$/;"	f	class:std::tr1::tuple
tuple	src/gtest/gtest.h	/^class tuple {$/;"	c	namespace:std::tr1
tuple	src/gtest/gtest.h	/^class tuple<> {$/;"	c	namespace:std::tr1
tuple_element	src/gtest/gtest.h	/^struct tuple_element {$/;"	s	namespace:std::tr1
tuple_size	src/gtest/gtest.h	/^struct tuple_size<GTEST_0_TUPLE_(T)> { static const int value = 0; };$/;"	s	namespace:std::tr1
tuple_size	src/gtest/gtest.h	/^struct tuple_size<GTEST_10_TUPLE_(T)> { static const int value = 10; };$/;"	s	namespace:std::tr1
tuple_size	src/gtest/gtest.h	/^struct tuple_size<GTEST_1_TUPLE_(T)> { static const int value = 1; };$/;"	s	namespace:std::tr1
tuple_size	src/gtest/gtest.h	/^struct tuple_size<GTEST_2_TUPLE_(T)> { static const int value = 2; };$/;"	s	namespace:std::tr1
tuple_size	src/gtest/gtest.h	/^struct tuple_size<GTEST_3_TUPLE_(T)> { static const int value = 3; };$/;"	s	namespace:std::tr1
tuple_size	src/gtest/gtest.h	/^struct tuple_size<GTEST_4_TUPLE_(T)> { static const int value = 4; };$/;"	s	namespace:std::tr1
tuple_size	src/gtest/gtest.h	/^struct tuple_size<GTEST_5_TUPLE_(T)> { static const int value = 5; };$/;"	s	namespace:std::tr1
tuple_size	src/gtest/gtest.h	/^struct tuple_size<GTEST_6_TUPLE_(T)> { static const int value = 6; };$/;"	s	namespace:std::tr1
tuple_size	src/gtest/gtest.h	/^struct tuple_size<GTEST_7_TUPLE_(T)> { static const int value = 7; };$/;"	s	namespace:std::tr1
tuple_size	src/gtest/gtest.h	/^struct tuple_size<GTEST_8_TUPLE_(T)> { static const int value = 8; };$/;"	s	namespace:std::tr1
tuple_size	src/gtest/gtest.h	/^struct tuple_size<GTEST_9_TUPLE_(T)> { static const int value = 9; };$/;"	s	namespace:std::tr1
type	include/caffe/layer.hpp	/^  virtual inline const char* type() const { return ""; }$/;"	f	class:caffe::Layer
type	include/caffe/layers/absval_layer.hpp	/^  virtual inline const char* type() const { return "AbsVal"; }$/;"	f	class:caffe::AbsValLayer
type	include/caffe/layers/accuracy_layer.hpp	/^  virtual inline const char* type() const { return "Accuracy"; }$/;"	f	class:caffe::AccuracyLayer
type	include/caffe/layers/argmax_layer.hpp	/^  virtual inline const char* type() const { return "ArgMax"; }$/;"	f	class:caffe::ArgMaxLayer
type	include/caffe/layers/batch_norm_layer.hpp	/^  virtual inline const char* type() const { return "BatchNorm"; }$/;"	f	class:caffe::BatchNormLayer
type	include/caffe/layers/batch_reindex_layer.hpp	/^  virtual inline const char* type() const { return "BatchReindex"; }$/;"	f	class:caffe::BatchReindexLayer
type	include/caffe/layers/bias_layer.hpp	/^  virtual inline const char* type() const { return "Bias"; }$/;"	f	class:caffe::BiasLayer
type	include/caffe/layers/bnll_layer.hpp	/^  virtual inline const char* type() const { return "BNLL"; }$/;"	f	class:caffe::BNLLLayer
type	include/caffe/layers/concat_layer.hpp	/^  virtual inline const char* type() const { return "Concat"; }$/;"	f	class:caffe::ConcatLayer
type	include/caffe/layers/contrastive_loss_layer.hpp	/^  virtual inline const char* type() const { return "ContrastiveLoss"; }$/;"	f	class:caffe::ContrastiveLossLayer
type	include/caffe/layers/conv_layer.hpp	/^  virtual inline const char* type() const { return "Convolution"; }$/;"	f	class:caffe::ConvolutionLayer
type	include/caffe/layers/crop_layer.hpp	/^  virtual inline const char* type() const { return "Crop"; }$/;"	f	class:caffe::CropLayer
type	include/caffe/layers/data_layer.hpp	/^  virtual inline const char* type() const { return "Data"; }$/;"	f	class:caffe::DataLayer
type	include/caffe/layers/deconv_layer.hpp	/^  virtual inline const char* type() const { return "Deconvolution"; }$/;"	f	class:caffe::DeconvolutionLayer
type	include/caffe/layers/dropout_layer.hpp	/^  virtual inline const char* type() const { return "Dropout"; }$/;"	f	class:caffe::DropoutLayer
type	include/caffe/layers/dummy_data_layer.hpp	/^  virtual inline const char* type() const { return "DummyData"; }$/;"	f	class:caffe::DummyDataLayer
type	include/caffe/layers/eltwise_layer.hpp	/^  virtual inline const char* type() const { return "Eltwise"; }$/;"	f	class:caffe::EltwiseLayer
type	include/caffe/layers/elu_layer.hpp	/^  virtual inline const char* type() const { return "ELU"; }$/;"	f	class:caffe::ELULayer
type	include/caffe/layers/embed_layer.hpp	/^  virtual inline const char* type() const { return "Embed"; }$/;"	f	class:caffe::EmbedLayer
type	include/caffe/layers/euclidean_loss_layer.hpp	/^  virtual inline const char* type() const { return "EuclideanLoss"; }$/;"	f	class:caffe::EuclideanLossLayer
type	include/caffe/layers/exp_layer.hpp	/^  virtual inline const char* type() const { return "Exp"; }$/;"	f	class:caffe::ExpLayer
type	include/caffe/layers/filter_layer.hpp	/^  virtual inline const char* type() const { return "Filter"; }$/;"	f	class:caffe::FilterLayer
type	include/caffe/layers/flatten_layer.hpp	/^  virtual inline const char* type() const { return "Flatten"; }$/;"	f	class:caffe::FlattenLayer
type	include/caffe/layers/hdf5_data_layer.hpp	/^  virtual inline const char* type() const { return "HDF5Data"; }$/;"	f	class:caffe::HDF5DataLayer
type	include/caffe/layers/hdf5_output_layer.hpp	/^  virtual inline const char* type() const { return "HDF5Output"; }$/;"	f	class:caffe::HDF5OutputLayer
type	include/caffe/layers/hinge_loss_layer.hpp	/^  virtual inline const char* type() const { return "HingeLoss"; }$/;"	f	class:caffe::HingeLossLayer
type	include/caffe/layers/im2col_layer.hpp	/^  virtual inline const char* type() const { return "Im2col"; }$/;"	f	class:caffe::Im2colLayer
type	include/caffe/layers/image_data_layer.hpp	/^  virtual inline const char* type() const { return "ImageData"; }$/;"	f	class:caffe::ImageDataLayer
type	include/caffe/layers/infogain_loss_layer.hpp	/^  virtual inline const char* type() const { return "InfogainLoss"; }$/;"	f	class:caffe::InfogainLossLayer
type	include/caffe/layers/inner_product_layer.hpp	/^  virtual inline const char* type() const { return "InnerProduct"; }$/;"	f	class:caffe::InnerProductLayer
type	include/caffe/layers/input_layer.hpp	/^  virtual inline const char* type() const { return "Input"; }$/;"	f	class:caffe::InputLayer
type	include/caffe/layers/log_layer.hpp	/^  virtual inline const char* type() const { return "Log"; }$/;"	f	class:caffe::LogLayer
type	include/caffe/layers/lrn_layer.hpp	/^  virtual inline const char* type() const { return "LRN"; }$/;"	f	class:caffe::LRNLayer
type	include/caffe/layers/lstm_layer.hpp	/^  virtual inline const char* type() const { return "LSTM"; }$/;"	f	class:caffe::LSTMLayer
type	include/caffe/layers/lstm_layer.hpp	/^  virtual inline const char* type() const { return "LSTMUnit"; }$/;"	f	class:caffe::LSTMUnitLayer
type	include/caffe/layers/memory_data_layer.hpp	/^  virtual inline const char* type() const { return "MemoryData"; }$/;"	f	class:caffe::MemoryDataLayer
type	include/caffe/layers/multinomial_logistic_loss_layer.hpp	/^  virtual inline const char* type() const { return "MultinomialLogisticLoss"; }$/;"	f	class:caffe::MultinomialLogisticLossLayer
type	include/caffe/layers/mvn_layer.hpp	/^  virtual inline const char* type() const { return "MVN"; }$/;"	f	class:caffe::MVNLayer
type	include/caffe/layers/parameter_layer.hpp	/^  virtual inline const char* type() const { return "Parameter"; }$/;"	f	class:caffe::ParameterLayer
type	include/caffe/layers/pooling_layer.hpp	/^  virtual inline const char* type() const { return "Pooling"; }$/;"	f	class:caffe::PoolingLayer
type	include/caffe/layers/power_layer.hpp	/^  virtual inline const char* type() const { return "Power"; }$/;"	f	class:caffe::PowerLayer
type	include/caffe/layers/prelu_layer.hpp	/^  virtual inline const char* type() const { return "PReLU"; }$/;"	f	class:caffe::PReLULayer
type	include/caffe/layers/python_layer.hpp	/^  virtual inline const char* type() const { return "Python"; }$/;"	f	class:caffe::PythonLayer
type	include/caffe/layers/recurrent_layer.hpp	/^  virtual inline const char* type() const { return "Recurrent"; }$/;"	f	class:caffe::RecurrentLayer
type	include/caffe/layers/reduction_layer.hpp	/^  virtual inline const char* type() const { return "Reduction"; }$/;"	f	class:caffe::ReductionLayer
type	include/caffe/layers/relu_layer.hpp	/^  virtual inline const char* type() const { return "ReLU"; }$/;"	f	class:caffe::ReLULayer
type	include/caffe/layers/reshape_layer.hpp	/^  virtual inline const char* type() const { return "Reshape"; }$/;"	f	class:caffe::ReshapeLayer
type	include/caffe/layers/rnn_layer.hpp	/^  virtual inline const char* type() const { return "RNN"; }$/;"	f	class:caffe::RNNLayer
type	include/caffe/layers/scale_layer.hpp	/^  virtual inline const char* type() const { return "Scale"; }$/;"	f	class:caffe::ScaleLayer
type	include/caffe/layers/sigmoid_cross_entropy_loss_layer.hpp	/^  virtual inline const char* type() const { return "SigmoidCrossEntropyLoss"; }$/;"	f	class:caffe::SigmoidCrossEntropyLossLayer
type	include/caffe/layers/sigmoid_layer.hpp	/^  virtual inline const char* type() const { return "Sigmoid"; }$/;"	f	class:caffe::SigmoidLayer
type	include/caffe/layers/silence_layer.hpp	/^  virtual inline const char* type() const { return "Silence"; }$/;"	f	class:caffe::SilenceLayer
type	include/caffe/layers/slice_layer.hpp	/^  virtual inline const char* type() const { return "Slice"; }$/;"	f	class:caffe::SliceLayer
type	include/caffe/layers/softmax_layer.hpp	/^  virtual inline const char* type() const { return "Softmax"; }$/;"	f	class:caffe::SoftmaxLayer
type	include/caffe/layers/softmax_loss_layer.hpp	/^  virtual inline const char* type() const { return "SoftmaxWithLoss"; }$/;"	f	class:caffe::SoftmaxWithLossLayer
type	include/caffe/layers/split_layer.hpp	/^  virtual inline const char* type() const { return "Split"; }$/;"	f	class:caffe::SplitLayer
type	include/caffe/layers/spp_layer.hpp	/^  virtual inline const char* type() const { return "SPP"; }$/;"	f	class:caffe::SPPLayer
type	include/caffe/layers/tanh_layer.hpp	/^  virtual inline const char* type() const { return "TanH"; }$/;"	f	class:caffe::TanHLayer
type	include/caffe/layers/threshold_layer.hpp	/^  virtual inline const char* type() const { return "Threshold"; }$/;"	f	class:caffe::ThresholdLayer
type	include/caffe/layers/tile_layer.hpp	/^  virtual inline const char* type() const { return "Tile"; }$/;"	f	class:caffe::TileLayer
type	include/caffe/layers/window_data_layer.hpp	/^  virtual inline const char* type() const { return "WindowData"; }$/;"	f	class:caffe::WindowDataLayer
type	include/caffe/sgd_solvers.hpp	/^  virtual inline const char* type() const { return "AdaDelta"; }$/;"	f	class:caffe::AdaDeltaSolver
type	include/caffe/sgd_solvers.hpp	/^  virtual inline const char* type() const { return "AdaGrad"; }$/;"	f	class:caffe::AdaGradSolver
type	include/caffe/sgd_solvers.hpp	/^  virtual inline const char* type() const { return "Adam"; }$/;"	f	class:caffe::AdamSolver
type	include/caffe/sgd_solvers.hpp	/^  virtual inline const char* type() const { return "Nesterov"; }$/;"	f	class:caffe::NesterovSolver
type	include/caffe/sgd_solvers.hpp	/^  virtual inline const char* type() const { return "RMSProp"; }$/;"	f	class:caffe::RMSPropSolver
type	include/caffe/sgd_solvers.hpp	/^  virtual inline const char* type() const { return "SGD"; }$/;"	f	class:caffe::SGDSolver
type	include/caffe/solver.hpp	/^  virtual inline const char* type() const { return ""; }$/;"	f	class:caffe::Solver
type	include/caffe/util/cudnn.hpp	/^  static const cudnnDataType_t type = CUDNN_DATA_DOUBLE;$/;"	m	class:caffe::cudnn::dataType
type	include/caffe/util/cudnn.hpp	/^  static const cudnnDataType_t type = CUDNN_DATA_FLOAT;$/;"	m	class:caffe::cudnn::dataType
type	include/caffe/util/nccl.hpp	/^  static const ncclDataType_t type = ncclDouble;$/;"	m	class:caffe::nccl::dataType
type	include/caffe/util/nccl.hpp	/^  static const ncclDataType_t type = ncclFloat;$/;"	m	class:caffe::nccl::dataType
type	python/caffe/_caffe.cpp	/^  struct type {$/;"	s	struct:caffe::NdarrayConverterGenerator::apply	file:
type	src/gtest/gtest.h	/^      T12> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^      T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^      T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^      T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^      T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^      T13, T14, T15, T16, T17, T18, T19, T20, T21> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^      T13, T14, T15, T16, T17, T18, T19, T20> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^      T13, T14, T15, T16, T17, T18, T19> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^      T13, T14, T15, T16, T17, T18> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^      T13, T14, T15, T16, T17> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^      T13, T14, T15, T16> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^      T13, T14, T15> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^      T13, T14> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^      T13> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^      T13> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^      T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^      T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^      T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^      T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^      T14, T15, T16, T17, T18, T19, T20, T21, T22> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^      T14, T15, T16, T17, T18, T19, T20, T21> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^      T14, T15, T16, T17, T18, T19, T20> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^      T14, T15, T16, T17, T18, T19> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^      T14, T15, T16, T17, T18> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^      T14, T15, T16, T17> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^      T14, T15, T16> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^      T14, T15> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^      T14> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^      T26> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^      T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^      T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^      T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^      T27, T28, T29, T30, T31, T32, T33, T34, T35, T36> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^      T27, T28, T29, T30, T31, T32, T33, T34, T35> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^      T27, T28, T29, T30, T31, T32, T33, T34> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^      T27, T28, T29, T30, T31, T32, T33> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^      T27, T28, T29, T30, T31, T32> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^      T27, T28, T29, T30, T31> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^      T27, T28, T29, T30> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^      T27, T28, T29> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^      T27, T28> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^      T27> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^      T27> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^      T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^      T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^      T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^      T28, T29, T30, T31, T32, T33, T34, T35, T36, T37> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^      T28, T29, T30, T31, T32, T33, T34, T35, T36> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^      T28, T29, T30, T31, T32, T33, T34, T35> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^      T28, T29, T30, T31, T32, T33, T34> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^      T28, T29, T30, T31, T32, T33> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^      T28, T29, T30, T31, T32> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^      T28, T29, T30, T31> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^      T28, T29, T30> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^      T28, T29> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^      T28> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^      T40> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^      T41, T42, T43, T44, T45, T46, T47, T48, T49, T50> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^      T41, T42, T43, T44, T45, T46, T47, T48, T49, T50>::type type;$/;"	t	struct:testing::internal::TypeList
type	src/gtest/gtest.h	/^      T41, T42, T43, T44, T45, T46, T47, T48, T49> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^      T41, T42, T43, T44, T45, T46, T47, T48> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^      T41, T42, T43, T44, T45, T46, T47> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^      T41, T42, T43, T44, T45, T46> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^      T41, T42, T43, T44, T45> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^      T41, T42, T43, T44> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^      T41, T42, T43> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^      T41, T42> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^      T41> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^      T41> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^      T42, T43, T44, T45, T46, T47, T48, T49, T50> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^      T42, T43, T44, T45, T46, T47, T48, T49> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^      T42, T43, T44, T45, T46, T47, T48> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^      T42, T43, T44, T45, T46, T47> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^      T42, T43, T44, T45, T46> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^      T42, T43, T44, T45> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^      T42, T43, T44> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^      T42, T43> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^      T42> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^    TestPartResult::Type const type;$/;"	m	class:testing::internal::AssertHelper::AssertHelperData::TestPartResult
type	src/gtest/gtest.h	/^    typedef Tmpl<T> type;$/;"	t	struct:testing::internal::TemplateSel::Bind
type	src/gtest/gtest.h	/^  Type type() const { return type_; }$/;"	f	class:testing::TestPartResult
type	src/gtest/gtest.h	/^  typedef Templates0 type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^  typedef Templates10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^  typedef Templates11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^  typedef Templates12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^  typedef Templates1<T1> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^  typedef Templates2<T1, T2> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^  typedef Templates3<T1, T2, T3> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^  typedef Templates4<T1, T2, T3, T4> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^  typedef Templates5<T1, T2, T3, T4, T5> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^  typedef Templates6<T1, T2, T3, T4, T5, T6> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^  typedef Templates7<T1, T2, T3, T4, T5, T6, T7> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^  typedef Templates8<T1, T2, T3, T4, T5, T6, T7, T8> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^  typedef Templates9<T1, T2, T3, T4, T5, T6, T7, T8, T9> type;$/;"	t	struct:testing::internal::Templates
type	src/gtest/gtest.h	/^  typedef bool type;$/;"	t	struct:testing::internal::AssertTypeEq
type	src/gtest/gtest.h	/^  typedef bool_constant<bool_value> type;$/;"	t	struct:std::tr1::bool_constant
type	src/gtest/gtest.h	/^  typedef internal::Types0 type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^  typedef internal::Types10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^  typedef internal::Types11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^  typedef internal::Types1<T1> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^  typedef internal::Types2<T1, T2> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^  typedef internal::Types3<T1, T2, T3> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^  typedef internal::Types4<T1, T2, T3, T4> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^  typedef internal::Types5<T1, T2, T3, T4, T5> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^  typedef internal::Types6<T1, T2, T3, T4, T5, T6> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^  typedef internal::Types7<T1, T2, T3, T4, T5, T6, T7> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^  typedef internal::Types8<T1, T2, T3, T4, T5, T6, T7, T8> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^  typedef internal::Types9<T1, T2, T3, T4, T5, T6, T7, T8, T9> type;$/;"	t	struct:testing::Types
type	src/gtest/gtest.h	/^  typedef typename RemoveConst<T>::type type[N];$/;"	t	struct:testing::internal::RemoveConst
type	src/gtest/gtest.h	/^struct AddRef { typedef T& type; };  \/\/ NOLINT$/;"	t	struct:std::tr1::gtest_internal::AddRef
type	src/gtest/gtest.h	/^struct AddRef<T&> { typedef T& type; };  \/\/ NOLINT$/;"	t	struct:std::tr1::gtest_internal::AddRef
type	src/gtest/gtest.h	/^struct AddReference { typedef T& type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::AddReference
type	src/gtest/gtest.h	/^struct AddReference<T&> { typedef T& type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::AddReference
type	src/gtest/gtest.h	/^struct ByRef { typedef const T& type; };  \/\/ NOLINT$/;"	t	struct:std::tr1::gtest_internal::ByRef
type	src/gtest/gtest.h	/^struct ByRef<T&> { typedef T& type; };  \/\/ NOLINT$/;"	t	struct:std::tr1::gtest_internal::ByRef
type	src/gtest/gtest.h	/^struct RemoveConst { typedef T type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::RemoveConst
type	src/gtest/gtest.h	/^struct RemoveConst<const T> { typedef T type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::RemoveConst
type	src/gtest/gtest.h	/^struct RemoveReference { typedef T type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::RemoveReference
type	src/gtest/gtest.h	/^struct RemoveReference<T&> { typedef T type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::RemoveReference
type	src/gtest/gtest.h	/^struct TupleElement<true, 0, GTEST_10_TUPLE_(T)> { typedef T0 type; };$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	src/gtest/gtest.h	/^struct TupleElement<true, 1, GTEST_10_TUPLE_(T)> { typedef T1 type; };$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	src/gtest/gtest.h	/^struct TupleElement<true, 2, GTEST_10_TUPLE_(T)> { typedef T2 type; };$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	src/gtest/gtest.h	/^struct TupleElement<true, 3, GTEST_10_TUPLE_(T)> { typedef T3 type; };$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	src/gtest/gtest.h	/^struct TupleElement<true, 4, GTEST_10_TUPLE_(T)> { typedef T4 type; };$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	src/gtest/gtest.h	/^struct TupleElement<true, 5, GTEST_10_TUPLE_(T)> { typedef T5 type; };$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	src/gtest/gtest.h	/^struct TupleElement<true, 6, GTEST_10_TUPLE_(T)> { typedef T6 type; };$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	src/gtest/gtest.h	/^struct TupleElement<true, 7, GTEST_10_TUPLE_(T)> { typedef T7 type; };$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	src/gtest/gtest.h	/^struct TupleElement<true, 8, GTEST_10_TUPLE_(T)> { typedef T8 type; };$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	src/gtest/gtest.h	/^struct TupleElement<true, 9, GTEST_10_TUPLE_(T)> { typedef T9 type; };$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	src/gtest/gtest.h	/^struct TypeList { typedef Types1<T> type; };$/;"	t	struct:testing::internal::TypeList
type	src/gtest/gtest.h	/^template<> struct EnableIf<true> { typedef void type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::EnableIf
type_	src/gtest/gtest-all.cpp	/^  const TestPartResult::Type type_;$/;"	m	class:testing::internal::SingleFailureChecker	file:
type_	src/gtest/gtest.h	/^  Type type_;$/;"	m	class:testing::TestPartResult
type_param	src/gtest/gtest.h	/^  const char* type_param() const {$/;"	f	class:testing::TestCase
type_param	src/gtest/gtest.h	/^  const char* type_param() const {$/;"	f	class:testing::TestInfo
type_param_	src/gtest/gtest.h	/^  const internal::scoped_ptr<const ::std::string> type_param_;$/;"	m	class:testing::TestCase
type_param_	src/gtest/gtest.h	/^  const internal::scoped_ptr<const ::std::string> type_param_;$/;"	m	class:testing::TestInfo
u_	src/gtest/gtest.h	/^  FloatingPointUnion u_;$/;"	m	class:testing::internal::FloatingPoint
uid	python/train.py	/^    uid = caffe.NCCL.new_uid()$/;"	v
uint_thres_	include/caffe/layers/dropout_layer.hpp	/^  unsigned int uint_thres_;$/;"	m	class:caffe::DropoutLayer
uncaptured_fd_	src/gtest/gtest-all.cpp	/^  int uncaptured_fd_;$/;"	m	class:testing::internal::CapturedStream	file:
unicodedata	scripts/cpp_lint.py	/^import unicodedata$/;"	i
unit_blob_bottom_c_prev_	src/caffe/test/test_lstm_layer.cpp	/^  Blob<Dtype> unit_blob_bottom_c_prev_;$/;"	m	class:caffe::LSTMLayerTest	file:
unit_blob_bottom_cont_	src/caffe/test/test_lstm_layer.cpp	/^  Blob<Dtype> unit_blob_bottom_cont_;$/;"	m	class:caffe::LSTMLayerTest	file:
unit_blob_bottom_vec_	src/caffe/test/test_lstm_layer.cpp	/^  vector<Blob<Dtype>*> unit_blob_bottom_vec_;$/;"	m	class:caffe::LSTMLayerTest	file:
unit_blob_bottom_x_	src/caffe/test/test_lstm_layer.cpp	/^  Blob<Dtype> unit_blob_bottom_x_;$/;"	m	class:caffe::LSTMLayerTest	file:
unit_blob_top_c_	src/caffe/test/test_lstm_layer.cpp	/^  Blob<Dtype> unit_blob_top_c_;$/;"	m	class:caffe::LSTMLayerTest	file:
unit_blob_top_h_	src/caffe/test/test_lstm_layer.cpp	/^  Blob<Dtype> unit_blob_top_h_;$/;"	m	class:caffe::LSTMLayerTest	file:
unit_blob_top_vec_	src/caffe/test/test_lstm_layer.cpp	/^  vector<Blob<Dtype>*> unit_blob_top_vec_;$/;"	m	class:caffe::LSTMLayerTest	file:
unit_test_	src/gtest/gtest-all.cpp	/^  UnitTestImpl* const unit_test_;$/;"	m	class:testing::internal::DefaultGlobalTestPartResultReporter	file:
unit_test_	src/gtest/gtest-all.cpp	/^  UnitTestImpl* const unit_test_;$/;"	m	class:testing::internal::DefaultPerThreadTestPartResultReporter	file:
unittest	python/caffe/test/test_coord_map.py	/^import unittest$/;"	i
unittest	python/caffe/test/test_draw.py	/^import unittest$/;"	i
unittest	python/caffe/test/test_io.py	/^import unittest$/;"	i
unittest	python/caffe/test/test_layer_type_list.py	/^import unittest$/;"	i
unittest	python/caffe/test/test_nccl.py	/^import unittest$/;"	i
unittest	python/caffe/test/test_net.py	/^import unittest$/;"	i
unittest	python/caffe/test/test_net_spec.py	/^import unittest$/;"	i
unittest	python/caffe/test/test_python_layer.py	/^import unittest$/;"	i
unittest	python/caffe/test/test_python_layer_with_param_str.py	/^import unittest$/;"	i
unittest	python/caffe/test/test_solver.py	/^import unittest$/;"	i
unrolled_net_	include/caffe/layers/recurrent_layer.hpp	/^  shared_ptr<Net<Dtype> > unrolled_net_;$/;"	m	class:caffe::RecurrentLayer
update_	include/caffe/sgd_solvers.hpp	/^  vector<shared_ptr<Blob<Dtype> > > history_, update_, temp_;$/;"	m	class:caffe::SGDSolver
urllib	examples/finetune_flickr_style/assemble_data.py	/^import urllib$/;"	i
urllib	examples/web_demo/app.py	/^import urllib$/;"	i
urllib	scripts/download_model_binary.py	/^from six.moves import urllib$/;"	i
use_global_stats_	include/caffe/layers/batch_norm_layer.hpp	/^  bool use_global_stats_;$/;"	m	class:caffe::BatchNormLayer
v10_	src/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray10
v10_	src/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray11
v10_	src/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray12
v10_	src/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray13
v10_	src/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray14
v10_	src/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray15
v10_	src/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray16
v10_	src/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray17
v10_	src/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray18
v10_	src/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray19
v10_	src/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray20
v10_	src/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray21
v10_	src/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray22
v10_	src/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray23
v10_	src/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray24
v10_	src/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray25
v10_	src/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray26
v10_	src/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray27
v10_	src/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray28
v10_	src/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray29
v10_	src/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray30
v10_	src/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray31
v10_	src/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray32
v10_	src/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray33
v10_	src/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray34
v10_	src/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray35
v10_	src/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray36
v10_	src/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray37
v10_	src/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray38
v10_	src/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray39
v10_	src/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray40
v10_	src/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray41
v10_	src/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray42
v10_	src/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray43
v10_	src/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray44
v10_	src/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray45
v10_	src/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray46
v10_	src/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray47
v10_	src/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray48
v10_	src/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray49
v10_	src/gtest/gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray50
v11_	src/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray11
v11_	src/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray12
v11_	src/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray13
v11_	src/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray14
v11_	src/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray15
v11_	src/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray16
v11_	src/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray17
v11_	src/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray18
v11_	src/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray19
v11_	src/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray20
v11_	src/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray21
v11_	src/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray22
v11_	src/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray23
v11_	src/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray24
v11_	src/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray25
v11_	src/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray26
v11_	src/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray27
v11_	src/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray28
v11_	src/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray29
v11_	src/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray30
v11_	src/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray31
v11_	src/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray32
v11_	src/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray33
v11_	src/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray34
v11_	src/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray35
v11_	src/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray36
v11_	src/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray37
v11_	src/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray38
v11_	src/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray39
v11_	src/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray40
v11_	src/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray41
v11_	src/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray42
v11_	src/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray43
v11_	src/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray44
v11_	src/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray45
v11_	src/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray46
v11_	src/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray47
v11_	src/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray48
v11_	src/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray49
v11_	src/gtest/gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray50
v12_	src/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray12
v12_	src/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray13
v12_	src/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray14
v12_	src/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray15
v12_	src/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray16
v12_	src/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray17
v12_	src/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray18
v12_	src/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray19
v12_	src/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray20
v12_	src/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray21
v12_	src/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray22
v12_	src/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray23
v12_	src/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray24
v12_	src/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray25
v12_	src/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray26
v12_	src/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray27
v12_	src/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray28
v12_	src/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray29
v12_	src/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray30
v12_	src/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray31
v12_	src/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray32
v12_	src/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray33
v12_	src/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray34
v12_	src/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray35
v12_	src/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray36
v12_	src/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray37
v12_	src/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray38
v12_	src/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray39
v12_	src/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray40
v12_	src/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray41
v12_	src/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray42
v12_	src/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray43
v12_	src/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray44
v12_	src/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray45
v12_	src/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray46
v12_	src/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray47
v12_	src/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray48
v12_	src/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray49
v12_	src/gtest/gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray50
v13_	src/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray13
v13_	src/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray14
v13_	src/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray15
v13_	src/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray16
v13_	src/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray17
v13_	src/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray18
v13_	src/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray19
v13_	src/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray20
v13_	src/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray21
v13_	src/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray22
v13_	src/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray23
v13_	src/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray24
v13_	src/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray25
v13_	src/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray26
v13_	src/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray27
v13_	src/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray28
v13_	src/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray29
v13_	src/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray30
v13_	src/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray31
v13_	src/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray32
v13_	src/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray33
v13_	src/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray34
v13_	src/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray35
v13_	src/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray36
v13_	src/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray37
v13_	src/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray38
v13_	src/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray39
v13_	src/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray40
v13_	src/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray41
v13_	src/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray42
v13_	src/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray43
v13_	src/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray44
v13_	src/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray45
v13_	src/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray46
v13_	src/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray47
v13_	src/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray48
v13_	src/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray49
v13_	src/gtest/gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray50
v14_	src/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray14
v14_	src/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray15
v14_	src/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray16
v14_	src/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray17
v14_	src/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray18
v14_	src/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray19
v14_	src/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray20
v14_	src/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray21
v14_	src/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray22
v14_	src/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray23
v14_	src/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray24
v14_	src/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray25
v14_	src/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray26
v14_	src/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray27
v14_	src/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray28
v14_	src/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray29
v14_	src/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray30
v14_	src/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray31
v14_	src/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray32
v14_	src/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray33
v14_	src/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray34
v14_	src/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray35
v14_	src/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray36
v14_	src/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray37
v14_	src/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray38
v14_	src/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray39
v14_	src/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray40
v14_	src/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray41
v14_	src/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray42
v14_	src/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray43
v14_	src/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray44
v14_	src/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray45
v14_	src/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray46
v14_	src/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray47
v14_	src/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray48
v14_	src/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray49
v14_	src/gtest/gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray50
v15_	src/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray15
v15_	src/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray16
v15_	src/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray17
v15_	src/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray18
v15_	src/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray19
v15_	src/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray20
v15_	src/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray21
v15_	src/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray22
v15_	src/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray23
v15_	src/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray24
v15_	src/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray25
v15_	src/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray26
v15_	src/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray27
v15_	src/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray28
v15_	src/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray29
v15_	src/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray30
v15_	src/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray31
v15_	src/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray32
v15_	src/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray33
v15_	src/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray34
v15_	src/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray35
v15_	src/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray36
v15_	src/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray37
v15_	src/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray38
v15_	src/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray39
v15_	src/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray40
v15_	src/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray41
v15_	src/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray42
v15_	src/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray43
v15_	src/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray44
v15_	src/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray45
v15_	src/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray46
v15_	src/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray47
v15_	src/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray48
v15_	src/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray49
v15_	src/gtest/gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray50
v16_	src/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray16
v16_	src/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray17
v16_	src/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray18
v16_	src/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray19
v16_	src/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray20
v16_	src/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray21
v16_	src/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray22
v16_	src/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray23
v16_	src/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray24
v16_	src/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray25
v16_	src/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray26
v16_	src/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray27
v16_	src/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray28
v16_	src/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray29
v16_	src/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray30
v16_	src/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray31
v16_	src/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray32
v16_	src/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray33
v16_	src/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray34
v16_	src/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray35
v16_	src/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray36
v16_	src/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray37
v16_	src/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray38
v16_	src/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray39
v16_	src/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray40
v16_	src/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray41
v16_	src/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray42
v16_	src/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray43
v16_	src/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray44
v16_	src/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray45
v16_	src/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray46
v16_	src/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray47
v16_	src/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray48
v16_	src/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray49
v16_	src/gtest/gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray50
v17_	src/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray17
v17_	src/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray18
v17_	src/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray19
v17_	src/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray20
v17_	src/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray21
v17_	src/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray22
v17_	src/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray23
v17_	src/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray24
v17_	src/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray25
v17_	src/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray26
v17_	src/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray27
v17_	src/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray28
v17_	src/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray29
v17_	src/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray30
v17_	src/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray31
v17_	src/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray32
v17_	src/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray33
v17_	src/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray34
v17_	src/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray35
v17_	src/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray36
v17_	src/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray37
v17_	src/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray38
v17_	src/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray39
v17_	src/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray40
v17_	src/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray41
v17_	src/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray42
v17_	src/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray43
v17_	src/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray44
v17_	src/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray45
v17_	src/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray46
v17_	src/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray47
v17_	src/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray48
v17_	src/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray49
v17_	src/gtest/gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray50
v18_	src/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray18
v18_	src/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray19
v18_	src/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray20
v18_	src/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray21
v18_	src/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray22
v18_	src/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray23
v18_	src/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray24
v18_	src/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray25
v18_	src/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray26
v18_	src/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray27
v18_	src/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray28
v18_	src/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray29
v18_	src/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray30
v18_	src/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray31
v18_	src/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray32
v18_	src/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray33
v18_	src/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray34
v18_	src/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray35
v18_	src/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray36
v18_	src/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray37
v18_	src/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray38
v18_	src/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray39
v18_	src/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray40
v18_	src/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray41
v18_	src/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray42
v18_	src/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray43
v18_	src/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray44
v18_	src/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray45
v18_	src/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray46
v18_	src/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray47
v18_	src/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray48
v18_	src/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray49
v18_	src/gtest/gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray50
v19_	src/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray19
v19_	src/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray20
v19_	src/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray21
v19_	src/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray22
v19_	src/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray23
v19_	src/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray24
v19_	src/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray25
v19_	src/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray26
v19_	src/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray27
v19_	src/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray28
v19_	src/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray29
v19_	src/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray30
v19_	src/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray31
v19_	src/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray32
v19_	src/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray33
v19_	src/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray34
v19_	src/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray35
v19_	src/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray36
v19_	src/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray37
v19_	src/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray38
v19_	src/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray39
v19_	src/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray40
v19_	src/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray41
v19_	src/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray42
v19_	src/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray43
v19_	src/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray44
v19_	src/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray45
v19_	src/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray46
v19_	src/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray47
v19_	src/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray48
v19_	src/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray49
v19_	src/gtest/gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray50
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray1
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray10
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray11
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray12
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray13
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray14
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray15
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray16
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray17
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray18
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray19
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray2
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray20
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray21
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray22
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray23
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray24
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray25
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray26
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray27
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray28
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray29
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray3
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray30
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray31
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray32
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray33
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray34
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray35
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray36
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray37
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray38
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray39
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray4
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray40
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray41
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray42
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray43
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray44
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray45
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray46
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray47
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray48
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray49
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray5
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray50
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray6
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray7
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray8
v1_	src/gtest/gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray9
v20_	src/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray20
v20_	src/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray21
v20_	src/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray22
v20_	src/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray23
v20_	src/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray24
v20_	src/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray25
v20_	src/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray26
v20_	src/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray27
v20_	src/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray28
v20_	src/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray29
v20_	src/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray30
v20_	src/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray31
v20_	src/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray32
v20_	src/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray33
v20_	src/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray34
v20_	src/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray35
v20_	src/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray36
v20_	src/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray37
v20_	src/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray38
v20_	src/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray39
v20_	src/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray40
v20_	src/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray41
v20_	src/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray42
v20_	src/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray43
v20_	src/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray44
v20_	src/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray45
v20_	src/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray46
v20_	src/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray47
v20_	src/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray48
v20_	src/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray49
v20_	src/gtest/gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray50
v21_	src/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray21
v21_	src/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray22
v21_	src/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray23
v21_	src/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray24
v21_	src/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray25
v21_	src/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray26
v21_	src/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray27
v21_	src/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray28
v21_	src/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray29
v21_	src/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray30
v21_	src/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray31
v21_	src/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray32
v21_	src/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray33
v21_	src/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray34
v21_	src/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray35
v21_	src/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray36
v21_	src/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray37
v21_	src/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray38
v21_	src/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray39
v21_	src/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray40
v21_	src/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray41
v21_	src/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray42
v21_	src/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray43
v21_	src/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray44
v21_	src/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray45
v21_	src/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray46
v21_	src/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray47
v21_	src/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray48
v21_	src/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray49
v21_	src/gtest/gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray50
v22_	src/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray22
v22_	src/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray23
v22_	src/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray24
v22_	src/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray25
v22_	src/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray26
v22_	src/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray27
v22_	src/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray28
v22_	src/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray29
v22_	src/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray30
v22_	src/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray31
v22_	src/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray32
v22_	src/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray33
v22_	src/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray34
v22_	src/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray35
v22_	src/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray36
v22_	src/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray37
v22_	src/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray38
v22_	src/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray39
v22_	src/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray40
v22_	src/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray41
v22_	src/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray42
v22_	src/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray43
v22_	src/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray44
v22_	src/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray45
v22_	src/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray46
v22_	src/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray47
v22_	src/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray48
v22_	src/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray49
v22_	src/gtest/gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray50
v23_	src/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray23
v23_	src/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray24
v23_	src/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray25
v23_	src/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray26
v23_	src/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray27
v23_	src/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray28
v23_	src/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray29
v23_	src/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray30
v23_	src/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray31
v23_	src/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray32
v23_	src/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray33
v23_	src/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray34
v23_	src/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray35
v23_	src/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray36
v23_	src/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray37
v23_	src/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray38
v23_	src/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray39
v23_	src/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray40
v23_	src/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray41
v23_	src/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray42
v23_	src/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray43
v23_	src/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray44
v23_	src/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray45
v23_	src/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray46
v23_	src/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray47
v23_	src/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray48
v23_	src/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray49
v23_	src/gtest/gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray50
v24_	src/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray24
v24_	src/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray25
v24_	src/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray26
v24_	src/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray27
v24_	src/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray28
v24_	src/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray29
v24_	src/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray30
v24_	src/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray31
v24_	src/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray32
v24_	src/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray33
v24_	src/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray34
v24_	src/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray35
v24_	src/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray36
v24_	src/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray37
v24_	src/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray38
v24_	src/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray39
v24_	src/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray40
v24_	src/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray41
v24_	src/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray42
v24_	src/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray43
v24_	src/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray44
v24_	src/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray45
v24_	src/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray46
v24_	src/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray47
v24_	src/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray48
v24_	src/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray49
v24_	src/gtest/gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray50
v25_	src/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray25
v25_	src/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray26
v25_	src/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray27
v25_	src/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray28
v25_	src/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray29
v25_	src/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray30
v25_	src/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray31
v25_	src/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray32
v25_	src/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray33
v25_	src/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray34
v25_	src/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray35
v25_	src/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray36
v25_	src/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray37
v25_	src/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray38
v25_	src/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray39
v25_	src/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray40
v25_	src/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray41
v25_	src/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray42
v25_	src/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray43
v25_	src/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray44
v25_	src/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray45
v25_	src/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray46
v25_	src/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray47
v25_	src/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray48
v25_	src/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray49
v25_	src/gtest/gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray50
v26_	src/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray26
v26_	src/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray27
v26_	src/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray28
v26_	src/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray29
v26_	src/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray30
v26_	src/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray31
v26_	src/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray32
v26_	src/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray33
v26_	src/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray34
v26_	src/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray35
v26_	src/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray36
v26_	src/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray37
v26_	src/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray38
v26_	src/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray39
v26_	src/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray40
v26_	src/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray41
v26_	src/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray42
v26_	src/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray43
v26_	src/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray44
v26_	src/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray45
v26_	src/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray46
v26_	src/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray47
v26_	src/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray48
v26_	src/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray49
v26_	src/gtest/gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray50
v27_	src/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray27
v27_	src/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray28
v27_	src/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray29
v27_	src/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray30
v27_	src/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray31
v27_	src/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray32
v27_	src/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray33
v27_	src/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray34
v27_	src/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray35
v27_	src/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray36
v27_	src/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray37
v27_	src/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray38
v27_	src/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray39
v27_	src/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray40
v27_	src/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray41
v27_	src/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray42
v27_	src/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray43
v27_	src/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray44
v27_	src/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray45
v27_	src/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray46
v27_	src/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray47
v27_	src/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray48
v27_	src/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray49
v27_	src/gtest/gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray50
v28_	src/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray28
v28_	src/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray29
v28_	src/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray30
v28_	src/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray31
v28_	src/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray32
v28_	src/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray33
v28_	src/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray34
v28_	src/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray35
v28_	src/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray36
v28_	src/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray37
v28_	src/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray38
v28_	src/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray39
v28_	src/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray40
v28_	src/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray41
v28_	src/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray42
v28_	src/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray43
v28_	src/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray44
v28_	src/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray45
v28_	src/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray46
v28_	src/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray47
v28_	src/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray48
v28_	src/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray49
v28_	src/gtest/gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray50
v29_	src/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray29
v29_	src/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray30
v29_	src/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray31
v29_	src/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray32
v29_	src/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray33
v29_	src/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray34
v29_	src/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray35
v29_	src/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray36
v29_	src/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray37
v29_	src/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray38
v29_	src/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray39
v29_	src/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray40
v29_	src/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray41
v29_	src/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray42
v29_	src/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray43
v29_	src/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray44
v29_	src/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray45
v29_	src/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray46
v29_	src/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray47
v29_	src/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray48
v29_	src/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray49
v29_	src/gtest/gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray50
v2_	src/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray10
v2_	src/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray11
v2_	src/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray12
v2_	src/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray13
v2_	src/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray14
v2_	src/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray15
v2_	src/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray16
v2_	src/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray17
v2_	src/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray18
v2_	src/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray19
v2_	src/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray2
v2_	src/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray20
v2_	src/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray21
v2_	src/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray22
v2_	src/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray23
v2_	src/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray24
v2_	src/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray25
v2_	src/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray26
v2_	src/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray27
v2_	src/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray28
v2_	src/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray29
v2_	src/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray3
v2_	src/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray30
v2_	src/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray31
v2_	src/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray32
v2_	src/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray33
v2_	src/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray34
v2_	src/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray35
v2_	src/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray36
v2_	src/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray37
v2_	src/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray38
v2_	src/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray39
v2_	src/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray4
v2_	src/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray40
v2_	src/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray41
v2_	src/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray42
v2_	src/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray43
v2_	src/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray44
v2_	src/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray45
v2_	src/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray46
v2_	src/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray47
v2_	src/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray48
v2_	src/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray49
v2_	src/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray5
v2_	src/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray50
v2_	src/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray6
v2_	src/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray7
v2_	src/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray8
v2_	src/gtest/gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray9
v30_	src/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray30
v30_	src/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray31
v30_	src/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray32
v30_	src/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray33
v30_	src/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray34
v30_	src/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray35
v30_	src/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray36
v30_	src/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray37
v30_	src/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray38
v30_	src/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray39
v30_	src/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray40
v30_	src/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray41
v30_	src/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray42
v30_	src/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray43
v30_	src/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray44
v30_	src/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray45
v30_	src/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray46
v30_	src/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray47
v30_	src/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray48
v30_	src/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray49
v30_	src/gtest/gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray50
v31_	src/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray31
v31_	src/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray32
v31_	src/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray33
v31_	src/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray34
v31_	src/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray35
v31_	src/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray36
v31_	src/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray37
v31_	src/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray38
v31_	src/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray39
v31_	src/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray40
v31_	src/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray41
v31_	src/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray42
v31_	src/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray43
v31_	src/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray44
v31_	src/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray45
v31_	src/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray46
v31_	src/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray47
v31_	src/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray48
v31_	src/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray49
v31_	src/gtest/gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray50
v32_	src/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray32
v32_	src/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray33
v32_	src/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray34
v32_	src/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray35
v32_	src/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray36
v32_	src/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray37
v32_	src/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray38
v32_	src/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray39
v32_	src/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray40
v32_	src/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray41
v32_	src/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray42
v32_	src/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray43
v32_	src/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray44
v32_	src/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray45
v32_	src/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray46
v32_	src/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray47
v32_	src/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray48
v32_	src/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray49
v32_	src/gtest/gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray50
v33_	src/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray33
v33_	src/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray34
v33_	src/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray35
v33_	src/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray36
v33_	src/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray37
v33_	src/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray38
v33_	src/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray39
v33_	src/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray40
v33_	src/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray41
v33_	src/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray42
v33_	src/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray43
v33_	src/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray44
v33_	src/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray45
v33_	src/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray46
v33_	src/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray47
v33_	src/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray48
v33_	src/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray49
v33_	src/gtest/gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray50
v34_	src/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray34
v34_	src/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray35
v34_	src/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray36
v34_	src/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray37
v34_	src/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray38
v34_	src/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray39
v34_	src/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray40
v34_	src/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray41
v34_	src/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray42
v34_	src/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray43
v34_	src/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray44
v34_	src/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray45
v34_	src/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray46
v34_	src/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray47
v34_	src/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray48
v34_	src/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray49
v34_	src/gtest/gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray50
v35_	src/gtest/gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray35
v35_	src/gtest/gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray36
v35_	src/gtest/gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray37
v35_	src/gtest/gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray38
v35_	src/gtest/gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray39
v35_	src/gtest/gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray40
v35_	src/gtest/gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray41
v35_	src/gtest/gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray42
v35_	src/gtest/gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray43
v35_	src/gtest/gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray44
v35_	src/gtest/gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray45
v35_	src/gtest/gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray46
v35_	src/gtest/gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray47
v35_	src/gtest/gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray48
v35_	src/gtest/gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray49
v35_	src/gtest/gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray50
v36_	src/gtest/gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray36
v36_	src/gtest/gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray37
v36_	src/gtest/gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray38
v36_	src/gtest/gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray39
v36_	src/gtest/gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray40
v36_	src/gtest/gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray41
v36_	src/gtest/gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray42
v36_	src/gtest/gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray43
v36_	src/gtest/gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray44
v36_	src/gtest/gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray45
v36_	src/gtest/gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray46
v36_	src/gtest/gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray47
v36_	src/gtest/gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray48
v36_	src/gtest/gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray49
v36_	src/gtest/gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray50
v37_	src/gtest/gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray37
v37_	src/gtest/gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray38
v37_	src/gtest/gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray39
v37_	src/gtest/gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray40
v37_	src/gtest/gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray41
v37_	src/gtest/gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray42
v37_	src/gtest/gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray43
v37_	src/gtest/gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray44
v37_	src/gtest/gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray45
v37_	src/gtest/gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray46
v37_	src/gtest/gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray47
v37_	src/gtest/gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray48
v37_	src/gtest/gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray49
v37_	src/gtest/gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray50
v38_	src/gtest/gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray38
v38_	src/gtest/gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray39
v38_	src/gtest/gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray40
v38_	src/gtest/gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray41
v38_	src/gtest/gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray42
v38_	src/gtest/gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray43
v38_	src/gtest/gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray44
v38_	src/gtest/gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray45
v38_	src/gtest/gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray46
v38_	src/gtest/gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray47
v38_	src/gtest/gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray48
v38_	src/gtest/gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray49
v38_	src/gtest/gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray50
v39_	src/gtest/gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray39
v39_	src/gtest/gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray40
v39_	src/gtest/gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray41
v39_	src/gtest/gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray42
v39_	src/gtest/gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray43
v39_	src/gtest/gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray44
v39_	src/gtest/gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray45
v39_	src/gtest/gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray46
v39_	src/gtest/gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray47
v39_	src/gtest/gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray48
v39_	src/gtest/gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray49
v39_	src/gtest/gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray50
v3_	src/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray10
v3_	src/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray11
v3_	src/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray12
v3_	src/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray13
v3_	src/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray14
v3_	src/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray15
v3_	src/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray16
v3_	src/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray17
v3_	src/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray18
v3_	src/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray19
v3_	src/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray20
v3_	src/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray21
v3_	src/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray22
v3_	src/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray23
v3_	src/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray24
v3_	src/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray25
v3_	src/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray26
v3_	src/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray27
v3_	src/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray28
v3_	src/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray29
v3_	src/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray3
v3_	src/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray30
v3_	src/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray31
v3_	src/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray32
v3_	src/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray33
v3_	src/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray34
v3_	src/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray35
v3_	src/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray36
v3_	src/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray37
v3_	src/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray38
v3_	src/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray39
v3_	src/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray4
v3_	src/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray40
v3_	src/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray41
v3_	src/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray42
v3_	src/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray43
v3_	src/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray44
v3_	src/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray45
v3_	src/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray46
v3_	src/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray47
v3_	src/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray48
v3_	src/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray49
v3_	src/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray5
v3_	src/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray50
v3_	src/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray6
v3_	src/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray7
v3_	src/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray8
v3_	src/gtest/gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray9
v40_	src/gtest/gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray40
v40_	src/gtest/gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray41
v40_	src/gtest/gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray42
v40_	src/gtest/gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray43
v40_	src/gtest/gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray44
v40_	src/gtest/gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray45
v40_	src/gtest/gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray46
v40_	src/gtest/gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray47
v40_	src/gtest/gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray48
v40_	src/gtest/gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray49
v40_	src/gtest/gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray50
v41_	src/gtest/gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray41
v41_	src/gtest/gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray42
v41_	src/gtest/gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray43
v41_	src/gtest/gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray44
v41_	src/gtest/gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray45
v41_	src/gtest/gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray46
v41_	src/gtest/gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray47
v41_	src/gtest/gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray48
v41_	src/gtest/gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray49
v41_	src/gtest/gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray50
v42_	src/gtest/gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray42
v42_	src/gtest/gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray43
v42_	src/gtest/gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray44
v42_	src/gtest/gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray45
v42_	src/gtest/gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray46
v42_	src/gtest/gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray47
v42_	src/gtest/gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray48
v42_	src/gtest/gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray49
v42_	src/gtest/gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray50
v43_	src/gtest/gtest.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray43
v43_	src/gtest/gtest.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray44
v43_	src/gtest/gtest.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray45
v43_	src/gtest/gtest.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray46
v43_	src/gtest/gtest.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray47
v43_	src/gtest/gtest.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray48
v43_	src/gtest/gtest.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray49
v43_	src/gtest/gtest.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray50
v44_	src/gtest/gtest.h	/^  const T44 v44_;$/;"	m	class:testing::internal::ValueArray44
v44_	src/gtest/gtest.h	/^  const T44 v44_;$/;"	m	class:testing::internal::ValueArray45
v44_	src/gtest/gtest.h	/^  const T44 v44_;$/;"	m	class:testing::internal::ValueArray46
v44_	src/gtest/gtest.h	/^  const T44 v44_;$/;"	m	class:testing::internal::ValueArray47
v44_	src/gtest/gtest.h	/^  const T44 v44_;$/;"	m	class:testing::internal::ValueArray48
v44_	src/gtest/gtest.h	/^  const T44 v44_;$/;"	m	class:testing::internal::ValueArray49
v44_	src/gtest/gtest.h	/^  const T44 v44_;$/;"	m	class:testing::internal::ValueArray50
v45_	src/gtest/gtest.h	/^  const T45 v45_;$/;"	m	class:testing::internal::ValueArray45
v45_	src/gtest/gtest.h	/^  const T45 v45_;$/;"	m	class:testing::internal::ValueArray46
v45_	src/gtest/gtest.h	/^  const T45 v45_;$/;"	m	class:testing::internal::ValueArray47
v45_	src/gtest/gtest.h	/^  const T45 v45_;$/;"	m	class:testing::internal::ValueArray48
v45_	src/gtest/gtest.h	/^  const T45 v45_;$/;"	m	class:testing::internal::ValueArray49
v45_	src/gtest/gtest.h	/^  const T45 v45_;$/;"	m	class:testing::internal::ValueArray50
v46_	src/gtest/gtest.h	/^  const T46 v46_;$/;"	m	class:testing::internal::ValueArray46
v46_	src/gtest/gtest.h	/^  const T46 v46_;$/;"	m	class:testing::internal::ValueArray47
v46_	src/gtest/gtest.h	/^  const T46 v46_;$/;"	m	class:testing::internal::ValueArray48
v46_	src/gtest/gtest.h	/^  const T46 v46_;$/;"	m	class:testing::internal::ValueArray49
v46_	src/gtest/gtest.h	/^  const T46 v46_;$/;"	m	class:testing::internal::ValueArray50
v47_	src/gtest/gtest.h	/^  const T47 v47_;$/;"	m	class:testing::internal::ValueArray47
v47_	src/gtest/gtest.h	/^  const T47 v47_;$/;"	m	class:testing::internal::ValueArray48
v47_	src/gtest/gtest.h	/^  const T47 v47_;$/;"	m	class:testing::internal::ValueArray49
v47_	src/gtest/gtest.h	/^  const T47 v47_;$/;"	m	class:testing::internal::ValueArray50
v48_	src/gtest/gtest.h	/^  const T48 v48_;$/;"	m	class:testing::internal::ValueArray48
v48_	src/gtest/gtest.h	/^  const T48 v48_;$/;"	m	class:testing::internal::ValueArray49
v48_	src/gtest/gtest.h	/^  const T48 v48_;$/;"	m	class:testing::internal::ValueArray50
v49_	src/gtest/gtest.h	/^  const T49 v49_;$/;"	m	class:testing::internal::ValueArray49
v49_	src/gtest/gtest.h	/^  const T49 v49_;$/;"	m	class:testing::internal::ValueArray50
v4_	src/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray10
v4_	src/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray11
v4_	src/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray12
v4_	src/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray13
v4_	src/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray14
v4_	src/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray15
v4_	src/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray16
v4_	src/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray17
v4_	src/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray18
v4_	src/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray19
v4_	src/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray20
v4_	src/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray21
v4_	src/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray22
v4_	src/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray23
v4_	src/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray24
v4_	src/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray25
v4_	src/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray26
v4_	src/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray27
v4_	src/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray28
v4_	src/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray29
v4_	src/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray30
v4_	src/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray31
v4_	src/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray32
v4_	src/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray33
v4_	src/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray34
v4_	src/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray35
v4_	src/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray36
v4_	src/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray37
v4_	src/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray38
v4_	src/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray39
v4_	src/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray4
v4_	src/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray40
v4_	src/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray41
v4_	src/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray42
v4_	src/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray43
v4_	src/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray44
v4_	src/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray45
v4_	src/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray46
v4_	src/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray47
v4_	src/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray48
v4_	src/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray49
v4_	src/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray5
v4_	src/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray50
v4_	src/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray6
v4_	src/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray7
v4_	src/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray8
v4_	src/gtest/gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray9
v50_	src/gtest/gtest.h	/^  const T50 v50_;$/;"	m	class:testing::internal::ValueArray50
v5_	src/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray10
v5_	src/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray11
v5_	src/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray12
v5_	src/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray13
v5_	src/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray14
v5_	src/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray15
v5_	src/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray16
v5_	src/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray17
v5_	src/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray18
v5_	src/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray19
v5_	src/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray20
v5_	src/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray21
v5_	src/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray22
v5_	src/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray23
v5_	src/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray24
v5_	src/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray25
v5_	src/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray26
v5_	src/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray27
v5_	src/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray28
v5_	src/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray29
v5_	src/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray30
v5_	src/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray31
v5_	src/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray32
v5_	src/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray33
v5_	src/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray34
v5_	src/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray35
v5_	src/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray36
v5_	src/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray37
v5_	src/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray38
v5_	src/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray39
v5_	src/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray40
v5_	src/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray41
v5_	src/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray42
v5_	src/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray43
v5_	src/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray44
v5_	src/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray45
v5_	src/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray46
v5_	src/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray47
v5_	src/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray48
v5_	src/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray49
v5_	src/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray5
v5_	src/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray50
v5_	src/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray6
v5_	src/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray7
v5_	src/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray8
v5_	src/gtest/gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray9
v6_	src/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray10
v6_	src/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray11
v6_	src/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray12
v6_	src/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray13
v6_	src/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray14
v6_	src/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray15
v6_	src/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray16
v6_	src/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray17
v6_	src/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray18
v6_	src/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray19
v6_	src/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray20
v6_	src/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray21
v6_	src/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray22
v6_	src/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray23
v6_	src/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray24
v6_	src/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray25
v6_	src/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray26
v6_	src/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray27
v6_	src/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray28
v6_	src/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray29
v6_	src/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray30
v6_	src/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray31
v6_	src/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray32
v6_	src/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray33
v6_	src/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray34
v6_	src/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray35
v6_	src/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray36
v6_	src/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray37
v6_	src/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray38
v6_	src/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray39
v6_	src/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray40
v6_	src/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray41
v6_	src/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray42
v6_	src/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray43
v6_	src/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray44
v6_	src/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray45
v6_	src/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray46
v6_	src/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray47
v6_	src/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray48
v6_	src/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray49
v6_	src/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray50
v6_	src/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray6
v6_	src/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray7
v6_	src/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray8
v6_	src/gtest/gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray9
v7_	src/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray10
v7_	src/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray11
v7_	src/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray12
v7_	src/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray13
v7_	src/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray14
v7_	src/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray15
v7_	src/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray16
v7_	src/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray17
v7_	src/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray18
v7_	src/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray19
v7_	src/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray20
v7_	src/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray21
v7_	src/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray22
v7_	src/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray23
v7_	src/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray24
v7_	src/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray25
v7_	src/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray26
v7_	src/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray27
v7_	src/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray28
v7_	src/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray29
v7_	src/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray30
v7_	src/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray31
v7_	src/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray32
v7_	src/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray33
v7_	src/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray34
v7_	src/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray35
v7_	src/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray36
v7_	src/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray37
v7_	src/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray38
v7_	src/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray39
v7_	src/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray40
v7_	src/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray41
v7_	src/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray42
v7_	src/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray43
v7_	src/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray44
v7_	src/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray45
v7_	src/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray46
v7_	src/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray47
v7_	src/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray48
v7_	src/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray49
v7_	src/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray50
v7_	src/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray7
v7_	src/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray8
v7_	src/gtest/gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray9
v8_	src/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray10
v8_	src/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray11
v8_	src/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray12
v8_	src/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray13
v8_	src/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray14
v8_	src/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray15
v8_	src/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray16
v8_	src/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray17
v8_	src/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray18
v8_	src/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray19
v8_	src/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray20
v8_	src/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray21
v8_	src/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray22
v8_	src/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray23
v8_	src/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray24
v8_	src/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray25
v8_	src/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray26
v8_	src/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray27
v8_	src/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray28
v8_	src/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray29
v8_	src/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray30
v8_	src/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray31
v8_	src/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray32
v8_	src/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray33
v8_	src/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray34
v8_	src/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray35
v8_	src/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray36
v8_	src/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray37
v8_	src/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray38
v8_	src/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray39
v8_	src/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray40
v8_	src/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray41
v8_	src/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray42
v8_	src/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray43
v8_	src/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray44
v8_	src/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray45
v8_	src/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray46
v8_	src/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray47
v8_	src/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray48
v8_	src/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray49
v8_	src/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray50
v8_	src/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray8
v8_	src/gtest/gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray9
v9_	src/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray10
v9_	src/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray11
v9_	src/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray12
v9_	src/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray13
v9_	src/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray14
v9_	src/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray15
v9_	src/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray16
v9_	src/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray17
v9_	src/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray18
v9_	src/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray19
v9_	src/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray20
v9_	src/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray21
v9_	src/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray22
v9_	src/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray23
v9_	src/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray24
v9_	src/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray25
v9_	src/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray26
v9_	src/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray27
v9_	src/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray28
v9_	src/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray29
v9_	src/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray30
v9_	src/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray31
v9_	src/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray32
v9_	src/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray33
v9_	src/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray34
v9_	src/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray35
v9_	src/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray36
v9_	src/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray37
v9_	src/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray38
v9_	src/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray39
v9_	src/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray40
v9_	src/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray41
v9_	src/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray42
v9_	src/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray43
v9_	src/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray44
v9_	src/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray45
v9_	src/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray46
v9_	src/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray47
v9_	src/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray48
v9_	src/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray49
v9_	src/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray50
v9_	src/gtest/gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray9
val	scripts/copy_notebook.py	/^                val = os.path.basename(filename)$/;"	v
valid	include/caffe/util/db_leveldb.hpp	/^  virtual bool valid() { return iter_->Valid(); }$/;"	f	class:caffe::db::LevelDBCursor
valid	include/caffe/util/db_lmdb.hpp	/^  virtual bool valid() { return valid_; }$/;"	f	class:caffe::db::LMDBCursor
valid_	include/caffe/util/db_lmdb.hpp	/^  bool valid_;$/;"	m	class:caffe::db::LMDBCursor
valid_dirname	scripts/download_model_binary.py	/^def valid_dirname(dirname):$/;"	f
value	include/caffe/util/db_leveldb.hpp	/^  virtual string value() { return iter_->value().ToString(); }$/;"	f	class:caffe::db::LevelDBCursor
value	include/caffe/util/db_lmdb.hpp	/^  virtual string value() {$/;"	f	class:caffe::db::LMDBCursor
value	src/gtest/gtest.h	/^  const char* value() const {$/;"	f	class:testing::TestProperty
value	src/gtest/gtest.h	/^  const char* value;$/;"	m	struct:testing::internal::ConstCharPtr
value	src/gtest/gtest.h	/^  static const bool value = __is_convertible(From, To);$/;"	m	class:testing::internal::ImplicitlyConvertible
value	src/gtest/gtest.h	/^  static const bool value = bool_value;$/;"	m	struct:std::tr1::bool_constant
value	src/gtest/gtest.h	/^  static const bool value =$/;"	m	class:testing::internal::ImplicitlyConvertible
value	src/gtest/gtest.h	/^const bool ImplicitlyConvertible<From, To>::value;$/;"	m	class:testing::internal::ImplicitlyConvertible
value	src/gtest/gtest.h	/^struct tuple_size<GTEST_0_TUPLE_(T)> { static const int value = 0; };$/;"	m	struct:std::tr1::tuple_size
value	src/gtest/gtest.h	/^struct tuple_size<GTEST_10_TUPLE_(T)> { static const int value = 10; };$/;"	m	struct:std::tr1::tuple_size
value	src/gtest/gtest.h	/^struct tuple_size<GTEST_1_TUPLE_(T)> { static const int value = 1; };$/;"	m	struct:std::tr1::tuple_size
value	src/gtest/gtest.h	/^struct tuple_size<GTEST_2_TUPLE_(T)> { static const int value = 2; };$/;"	m	struct:std::tr1::tuple_size
value	src/gtest/gtest.h	/^struct tuple_size<GTEST_3_TUPLE_(T)> { static const int value = 3; };$/;"	m	struct:std::tr1::tuple_size
value	src/gtest/gtest.h	/^struct tuple_size<GTEST_4_TUPLE_(T)> { static const int value = 4; };$/;"	m	struct:std::tr1::tuple_size
value	src/gtest/gtest.h	/^struct tuple_size<GTEST_5_TUPLE_(T)> { static const int value = 5; };$/;"	m	struct:std::tr1::tuple_size
value	src/gtest/gtest.h	/^struct tuple_size<GTEST_6_TUPLE_(T)> { static const int value = 6; };$/;"	m	struct:std::tr1::tuple_size
value	src/gtest/gtest.h	/^struct tuple_size<GTEST_7_TUPLE_(T)> { static const int value = 7; };$/;"	m	struct:std::tr1::tuple_size
value	src/gtest/gtest.h	/^struct tuple_size<GTEST_8_TUPLE_(T)> { static const int value = 8; };$/;"	m	struct:std::tr1::tuple_size
value	src/gtest/gtest.h	/^struct tuple_size<GTEST_9_TUPLE_(T)> { static const int value = 9; };$/;"	m	struct:std::tr1::tuple_size
value	src/gtest/gtest.h	/^template <bool bool_value> const bool bool_constant<bool_value>::value;$/;"	m	class:std::tr1::bool_constant
value_	src/gtest/gtest.h	/^    RawType value_;  \/\/ The raw floating-point number.$/;"	m	union:testing::internal::FloatingPoint::FloatingPointUnion
value_	src/gtest/gtest.h	/^    T value_;$/;"	m	class:std::tr1::ThreadLocal::ValueHolder
value_	src/gtest/gtest.h	/^    T value_;$/;"	m	class:testing::internal::RangeGenerator::Iterator
value_	src/gtest/gtest.h	/^    mutable scoped_ptr<const T> value_;$/;"	m	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
value_	src/gtest/gtest.h	/^  T value_;$/;"	m	class:std::tr1::ThreadLocal
value_	src/gtest/gtest.h	/^  T* value_;$/;"	m	class:testing::internal::linked_ptr
value_	src/gtest/gtest.h	/^  internal::String value_;$/;"	m	class:testing::TestProperty
value_param	src/gtest/gtest.h	/^  const char* value_param() const {$/;"	f	class:testing::TestInfo
value_param_	src/gtest/gtest.h	/^  const internal::scoped_ptr<const ::std::string> value_param_;$/;"	m	class:testing::TestInfo
value_type	src/gtest/gtest.h	/^  typedef Element value_type;$/;"	t	class:testing::internal::NativeArray
value_type	src/gtest/gtest.h	/^  typedef T value_type;$/;"	t	class:testing::internal::ParamIterator
value_type	src/gtest/gtest.h	/^  typedef T value_type;$/;"	t	struct:std::tr1::IteratorTraits
value_type	src/gtest/gtest.h	/^  typedef typename Iterator::value_type value_type;$/;"	t	struct:std::tr1::IteratorTraits
values	include/caffe/util/db_lmdb.hpp	/^  vector<string> keys, values;$/;"	m	class:caffe::db::LMDBTransaction
variance_	include/caffe/layers/batch_norm_layer.hpp	/^  Blob<Dtype> mean_, variance_, temp_, x_norm_;$/;"	m	class:caffe::BatchNormLayer
variance_	include/caffe/layers/mvn_layer.hpp	/^  Blob<Dtype> mean_, variance_, temp_;$/;"	m	class:caffe::MVNLayer
version	matlab/+caffe/private/caffe_.cpp	/^static void version(MEX_ARGS) {$/;"	f	file:
version	matlab/+caffe/version.m	/^function version_str = version()$/;"	f
vsnprintf	src/gtest/gtest-all.cpp	/^# define vsnprintf /;"	d	file:
weight_cpu_gemm	src/caffe/layers/base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::weight_cpu_gemm(const Dtype* input,$/;"	f	class:caffe::BaseConvolutionLayer
weight_gpu_gemm	src/caffe/layers/base_conv_layer.cpp	/^void BaseConvolutionLayer<Dtype>::weight_gpu_gemm(const Dtype* input,$/;"	f	class:caffe::BaseConvolutionLayer
weight_offset_	include/caffe/layers/base_conv_layer.hpp	/^  int weight_offset_;$/;"	m	class:caffe::BaseConvolutionLayer
werkzeug	examples/web_demo/app.py	/^import werkzeug$/;"	i
width	include/caffe/blob.hpp	/^  inline int width() const { return LegacyShape(3); }$/;"	f	class:caffe::Blob
width	include/caffe/layers/memory_data_layer.hpp	/^  int width() { return width_; }$/;"	f	class:caffe::MemoryDataLayer
width	src/caffe/test/test_data/generate_sample_data.py	/^width = 10$/;"	v
width	src/caffe/test/test_data/generate_sample_data.py	/^width = 5$/;"	v
width_	include/caffe/layers/lrn_layer.hpp	/^  int width_;$/;"	m	class:caffe::LRNLayer
width_	include/caffe/layers/memory_data_layer.hpp	/^  int batch_size_, channels_, height_, width_, size_;$/;"	m	class:caffe::MemoryDataLayer
width_	include/caffe/layers/pooling_layer.hpp	/^  int height_, width_;$/;"	m	class:caffe::PoolingLayer
width_	src/caffe/test/test_gradient_based_solver.cpp	/^  int num_, channels_, height_, width_;$/;"	m	class:caffe::GradientBasedSolverTest	file:
width_	src/caffe/test/test_hdf5_output_layer.cpp	/^  int width_;$/;"	m	class:caffe::HDF5OutputLayerTest	file:
width_	src/caffe/test/test_memory_data_layer.cpp	/^  int width_;$/;"	m	class:caffe::MemoryDataLayerTest	file:
workspace	include/caffe/layers/cudnn_conv_layer.hpp	/^  void **workspace;  \/\/ aliases into workspaceData$/;"	m	class:caffe::CuDNNConvolutionLayer
workspaceData	include/caffe/layers/cudnn_conv_layer.hpp	/^  void *workspaceData;  \/\/ underlying storage$/;"	m	class:caffe::CuDNNConvolutionLayer
workspaceSizeInBytes	include/caffe/layers/cudnn_conv_layer.hpp	/^  size_t workspaceSizeInBytes;  \/\/ size of underlying storage$/;"	m	class:caffe::CuDNNConvolutionLayer
workspace_bwd_data_sizes_	include/caffe/layers/cudnn_conv_layer.hpp	/^  size_t *workspace_bwd_data_sizes_;$/;"	m	class:caffe::CuDNNConvolutionLayer
workspace_bwd_filter_sizes_	include/caffe/layers/cudnn_conv_layer.hpp	/^  size_t *workspace_bwd_filter_sizes_;$/;"	m	class:caffe::CuDNNConvolutionLayer
workspace_fwd_sizes_	include/caffe/layers/cudnn_conv_layer.hpp	/^  size_t *workspace_fwd_sizes_;$/;"	m	class:caffe::CuDNNConvolutionLayer
write	examples/pycaffe/tools.py	/^    def write(self, filepath):$/;"	m	class:CaffeSolver
write_csv	tools/extra/parse_log.py	/^def write_csv(output_filename, dict_list, delimiter, verbose=False):$/;"	f
write_fd	src/gtest/gtest-all.cpp	/^  int write_fd() const { return write_fd_; }$/;"	f	class:testing::internal::DeathTestImpl
write_fd	src/gtest/gtest.h	/^  int write_fd() const { return write_fd_; }$/;"	f	class:testing::internal::InternalRunDeathTestFlag
write_fd_	src/gtest/gtest-all.cpp	/^  int write_fd_;$/;"	m	class:testing::internal::DeathTestImpl	file:
write_fd_	src/gtest/gtest.h	/^  int write_fd_;$/;"	m	class:testing::internal::InternalRunDeathTestFlag
write_handle_	src/gtest/gtest-all.cpp	/^  AutoHandle write_handle_;$/;"	m	class:testing::internal::WindowsDeathTest	file:
write_mean	matlab/+caffe/private/caffe_.cpp	/^static void write_mean(MEX_ARGS) {$/;"	f	file:
wsgi	examples/web_demo/app.py	/^import tornado.wsgi$/;"	i
x_input_blob_	include/caffe/layers/recurrent_layer.hpp	/^  Blob<Dtype>* x_input_blob_;$/;"	m	class:caffe::RecurrentLayer
x_norm_	include/caffe/layers/batch_norm_layer.hpp	/^  Blob<Dtype> mean_, variance_, temp_, x_norm_;$/;"	m	class:caffe::BatchNormLayer
x_static_input_blob_	include/caffe/layers/recurrent_layer.hpp	/^  Blob<Dtype>* x_static_input_blob_;$/;"	m	class:caffe::RecurrentLayer
xrange	scripts/cpp_lint.py	/^from six.moves import xrange$/;"	i
yaml	scripts/download_model_binary.py	/^import yaml$/;"	i
yaml_frontmatter	scripts/copy_notebook.py	/^    yaml_frontmatter = ['---']$/;"	v
zero	include/caffe/util/cudnn.hpp	/^  static const void *one, *zero;$/;"	m	class:caffe::cudnn::dataType
zero	src/caffe/util/cudnn.cpp	/^const void* dataType<double>::zero =$/;"	m	class:caffe::cudnn::dataType	file:
zero	src/caffe/util/cudnn.cpp	/^const void* dataType<float>::zero =$/;"	m	class:caffe::cudnn::dataType	file:
zeroval	include/caffe/util/cudnn.hpp	/^  static double oneval, zeroval;$/;"	m	class:caffe::cudnn::dataType
zeroval	include/caffe/util/cudnn.hpp	/^  static float oneval, zeroval;$/;"	m	class:caffe::cudnn::dataType
zeroval	src/caffe/util/cudnn.cpp	/^double dataType<double>::zeroval = 0.0;$/;"	m	class:caffe::cudnn::dataType	file:
zeroval	src/caffe/util/cudnn.cpp	/^float dataType<float>::zeroval = 0.0;$/;"	m	class:caffe::cudnn::dataType	file:
zoom	python/caffe/io.py	/^from scipy.ndimage import zoom$/;"	i
~AccuracyLayerTest	src/caffe/test/test_accuracy_layer.cpp	/^  virtual ~AccuracyLayerTest() {$/;"	f	class:caffe::AccuracyLayerTest
~ArgMaxLayerTest	src/caffe/test/test_argmax_layer.cpp	/^  virtual ~ArgMaxLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::ArgMaxLayerTest
~Arguments	src/gtest/gtest-all.cpp	/^  ~Arguments() {$/;"	f	class:testing::internal::Arguments
~AssertHelper	src/gtest/gtest-all.cpp	/^AssertHelper::~AssertHelper() {$/;"	f	class:testing::internal::AssertHelper
~AutoHandle	src/gtest/gtest-all.cpp	/^  ~AutoHandle() { Reset(); }$/;"	f	class:testing::internal::AutoHandle
~BatchNormLayerTest	src/caffe/test/test_batch_norm_layer.cpp	/^    virtual ~BatchNormLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::BatchNormLayerTest
~BatchReindexLayerTest	src/caffe/test/test_batch_reindex_layer.cpp	/^  virtual ~BatchReindexLayerTest() {$/;"	f	class:caffe::BatchReindexLayerTest
~BiasLayerTest	src/caffe/test/test_bias_layer.cpp	/^  virtual ~BiasLayerTest() {$/;"	f	class:caffe::BiasLayerTest
~BlobMathTest	src/caffe/test/test_blob.cpp	/^  virtual ~BlobMathTest() { delete blob_; }$/;"	f	class:caffe::BlobMathTest
~BlobSimpleTest	src/caffe/test/test_blob.cpp	/^  virtual ~BlobSimpleTest() { delete blob_; delete blob_preshaped_; }$/;"	f	class:caffe::BlobSimpleTest
~CPUTimer	include/caffe/util/benchmark.hpp	/^  virtual ~CPUTimer() {}$/;"	f	class:caffe::CPUTimer
~Caffe	src/caffe/common.cpp	/^Caffe::~Caffe() { }$/;"	f	class:caffe::Caffe
~Caffe	src/caffe/common.cpp	/^Caffe::~Caffe() {$/;"	f	class:caffe::Caffe
~CapturedStream	src/gtest/gtest-all.cpp	/^  ~CapturedStream() {$/;"	f	class:testing::internal::CapturedStream
~CartesianProductGenerator10	src/gtest/gtest.h	/^  virtual ~CartesianProductGenerator10() {}$/;"	f	class:testing::internal::CartesianProductGenerator10
~CartesianProductGenerator2	src/gtest/gtest.h	/^  virtual ~CartesianProductGenerator2() {}$/;"	f	class:testing::internal::CartesianProductGenerator2
~CartesianProductGenerator3	src/gtest/gtest.h	/^  virtual ~CartesianProductGenerator3() {}$/;"	f	class:testing::internal::CartesianProductGenerator3
~CartesianProductGenerator4	src/gtest/gtest.h	/^  virtual ~CartesianProductGenerator4() {}$/;"	f	class:testing::internal::CartesianProductGenerator4
~CartesianProductGenerator5	src/gtest/gtest.h	/^  virtual ~CartesianProductGenerator5() {}$/;"	f	class:testing::internal::CartesianProductGenerator5
~CartesianProductGenerator6	src/gtest/gtest.h	/^  virtual ~CartesianProductGenerator6() {}$/;"	f	class:testing::internal::CartesianProductGenerator6
~CartesianProductGenerator7	src/gtest/gtest.h	/^  virtual ~CartesianProductGenerator7() {}$/;"	f	class:testing::internal::CartesianProductGenerator7
~CartesianProductGenerator8	src/gtest/gtest.h	/^  virtual ~CartesianProductGenerator8() {}$/;"	f	class:testing::internal::CartesianProductGenerator8
~CartesianProductGenerator9	src/gtest/gtest.h	/^  virtual ~CartesianProductGenerator9() {}$/;"	f	class:testing::internal::CartesianProductGenerator9
~ConcatLayerTest	src/caffe/test/test_concat_layer.cpp	/^  virtual ~ConcatLayerTest() {$/;"	f	class:caffe::ConcatLayerTest
~ConstantFillerTest	src/caffe/test/test_filler.cpp	/^  virtual ~ConstantFillerTest() { delete blob_; }$/;"	f	class:caffe::ConstantFillerTest
~ContrastiveLossLayerTest	src/caffe/test/test_contrastive_loss_layer.cpp	/^  virtual ~ContrastiveLossLayerTest() {$/;"	f	class:caffe::ContrastiveLossLayerTest
~ConvolutionLayerTest	src/caffe/test/test_convolution_layer.cpp	/^  virtual ~ConvolutionLayerTest() {$/;"	f	class:caffe::ConvolutionLayerTest
~CropLayerTest	src/caffe/test/test_crop_layer.cpp	/^  virtual ~CropLayerTest() {$/;"	f	class:caffe::CropLayerTest
~CuDNNConvolutionLayer	src/caffe/layers/cudnn_conv_layer.cpp	/^CuDNNConvolutionLayer<Dtype>::~CuDNNConvolutionLayer() {$/;"	f	class:caffe::CuDNNConvolutionLayer
~CuDNNConvolutionLayerTest	src/caffe/test/test_convolution_layer.cpp	/^  virtual ~CuDNNConvolutionLayerTest() {$/;"	f	class:caffe::CuDNNConvolutionLayerTest
~CuDNNLCNLayer	src/caffe/layers/cudnn_lcn_layer.cpp	/^CuDNNLCNLayer<Dtype>::~CuDNNLCNLayer() {$/;"	f	class:caffe::CuDNNLCNLayer
~CuDNNLRNLayer	src/caffe/layers/cudnn_lrn_layer.cpp	/^CuDNNLRNLayer<Dtype>::~CuDNNLRNLayer() {$/;"	f	class:caffe::CuDNNLRNLayer
~CuDNNLRNLayerTest	src/caffe/test/test_lrn_layer.cpp	/^  virtual ~CuDNNLRNLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::CuDNNLRNLayerTest
~CuDNNNeuronLayerTest	src/caffe/test/test_neuron_layer.cpp	/^  virtual ~CuDNNNeuronLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::CuDNNNeuronLayerTest
~CuDNNPoolingLayer	src/caffe/layers/cudnn_pooling_layer.cpp	/^CuDNNPoolingLayer<Dtype>::~CuDNNPoolingLayer() {$/;"	f	class:caffe::CuDNNPoolingLayer
~CuDNNPoolingLayerTest	src/caffe/test/test_pooling_layer.cpp	/^  virtual ~CuDNNPoolingLayerTest() {$/;"	f	class:caffe::CuDNNPoolingLayerTest
~CuDNNReLULayer	src/caffe/layers/cudnn_relu_layer.cpp	/^CuDNNReLULayer<Dtype>::~CuDNNReLULayer() {$/;"	f	class:caffe::CuDNNReLULayer
~CuDNNSigmoidLayer	src/caffe/layers/cudnn_sigmoid_layer.cpp	/^CuDNNSigmoidLayer<Dtype>::~CuDNNSigmoidLayer() {$/;"	f	class:caffe::CuDNNSigmoidLayer
~CuDNNSoftmaxLayer	src/caffe/layers/cudnn_softmax_layer.cpp	/^CuDNNSoftmaxLayer<Dtype>::~CuDNNSoftmaxLayer() {$/;"	f	class:caffe::CuDNNSoftmaxLayer
~CuDNNSoftmaxLayerTest	src/caffe/test/test_softmax_layer.cpp	/^  virtual ~CuDNNSoftmaxLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::CuDNNSoftmaxLayerTest
~CuDNNTanHLayer	src/caffe/layers/cudnn_tanh_layer.cpp	/^CuDNNTanHLayer<Dtype>::~CuDNNTanHLayer() {$/;"	f	class:caffe::CuDNNTanHLayer
~Cursor	include/caffe/util/db.hpp	/^  virtual ~Cursor() { }$/;"	f	class:caffe::db::Cursor
~DB	include/caffe/util/db.hpp	/^  virtual ~DB() { }$/;"	f	class:caffe::db::DB
~DBTest	src/caffe/test/test_db.cpp	/^  virtual ~DBTest() { }$/;"	f	class:caffe::DBTest
~DataLayer	src/caffe/layers/data_layer.cpp	/^DataLayer<Dtype>::~DataLayer() {$/;"	f	class:caffe::DataLayer
~DataLayerTest	src/caffe/test/test_data_layer.cpp	/^  virtual ~DataLayerTest() { delete blob_top_data_; delete blob_top_label_; }$/;"	f	class:caffe::DataLayerTest
~DataTransformer	include/caffe/data_transformer.hpp	/^  virtual ~DataTransformer() {}$/;"	f	class:caffe::DataTransformer
~DeathTest	src/gtest/gtest.h	/^  virtual ~DeathTest() { }$/;"	f	class:testing::internal::DeathTest
~DeathTestFactory	src/gtest/gtest.h	/^  virtual ~DeathTestFactory() { }$/;"	f	class:testing::internal::DeathTestFactory
~DeathTestImpl	src/gtest/gtest-all.cpp	/^  ~DeathTestImpl() { GTEST_DEATH_TEST_CHECK_(read_fd_ == -1); }$/;"	f	class:testing::internal::DeathTestImpl
~DeconvolutionLayerTest	src/caffe/test/test_deconvolution_layer.cpp	/^  virtual ~DeconvolutionLayerTest() {$/;"	f	class:caffe::DeconvolutionLayerTest
~DummyDataLayerTest	src/caffe/test/test_dummy_data_layer.cpp	/^  virtual ~DummyDataLayerTest() {$/;"	f	class:caffe::DummyDataLayerTest
~EltwiseLayerTest	src/caffe/test/test_eltwise_layer.cpp	/^  virtual ~EltwiseLayerTest() {$/;"	f	class:caffe::EltwiseLayerTest
~EmbedLayerTest	src/caffe/test/test_embed_layer.cpp	/^  virtual ~EmbedLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::EmbedLayerTest
~Environment	src/gtest/gtest.h	/^  virtual ~Environment() {}$/;"	f	class:testing::Environment
~EuclideanLossLayerTest	src/caffe/test/test_euclidean_loss_layer.cpp	/^  virtual ~EuclideanLossLayerTest() {$/;"	f	class:caffe::EuclideanLossLayerTest
~Filler	include/caffe/filler.hpp	/^  virtual ~Filler() {}$/;"	f	class:caffe::Filler
~FilterLayerTest	src/caffe/test/test_filter_layer.cpp	/^  virtual ~FilterLayerTest() {$/;"	f	class:caffe::FilterLayerTest
~FlattenLayerTest	src/caffe/test/test_flatten_layer.cpp	/^  virtual ~FlattenLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::FlattenLayerTest
~GPUParams	src/caffe/parallel.cpp	/^GPUParams<Dtype>::~GPUParams() {$/;"	f	class:caffe::GPUParams
~GTestFlagSaver	src/gtest/gtest-all.cpp	/^  ~GTestFlagSaver() {$/;"	f	class:testing::internal::GTestFlagSaver
~GTestLog	src/gtest/gtest-all.cpp	/^GTestLog::~GTestLog() {$/;"	f	class:testing::internal::GTestLog
~GTestMutexLock	src/gtest/gtest.h	/^  ~GTestMutexLock() { mutex_->Unlock(); }$/;"	f	class:std::tr1::GTestMutexLock
~GaussianFillerTest	src/caffe/test/test_filler.cpp	/^  virtual ~GaussianFillerTest() { delete blob_; }$/;"	f	class:caffe::GaussianFillerTest
~GradientBasedSolverTest	src/caffe/test/test_gradient_based_solver.cpp	/^  ~GradientBasedSolverTest() {$/;"	f	class:caffe::GradientBasedSolverTest
~HDF5DataLayer	src/caffe/layers/hdf5_data_layer.cpp	/^HDF5DataLayer<Dtype>::~HDF5DataLayer<Dtype>() { }$/;"	f	class:caffe::HDF5DataLayer
~HDF5DataLayerTest	src/caffe/test/test_hdf5data_layer.cpp	/^  virtual ~HDF5DataLayerTest() {$/;"	f	class:caffe::HDF5DataLayerTest
~HDF5OutputLayer	src/caffe/layers/hdf5_output_layer.cpp	/^HDF5OutputLayer<Dtype>::~HDF5OutputLayer<Dtype>() {$/;"	f	class:caffe::HDF5OutputLayer
~HDF5OutputLayerTest	src/caffe/test/test_hdf5_output_layer.cpp	/^  virtual ~HDF5OutputLayerTest() {$/;"	f	class:caffe::HDF5OutputLayerTest
~HasNewFatalFailureHelper	src/gtest/gtest-all.cpp	/^HasNewFatalFailureHelper::~HasNewFatalFailureHelper() {$/;"	f	class:testing::internal::HasNewFatalFailureHelper
~HingeLossLayerTest	src/caffe/test/test_hinge_loss_layer.cpp	/^  virtual ~HingeLossLayerTest() {$/;"	f	class:caffe::HingeLossLayerTest
~Im2colLayerTest	src/caffe/test/test_im2col_layer.cpp	/^  virtual ~Im2colLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::Im2colLayerTest
~ImageDataLayer	src/caffe/layers/image_data_layer.cpp	/^ImageDataLayer<Dtype>::~ImageDataLayer<Dtype>() {$/;"	f	class:caffe::ImageDataLayer
~ImageDataLayerTest	src/caffe/test/test_image_data_layer.cpp	/^  virtual ~ImageDataLayerTest() {$/;"	f	class:caffe::ImageDataLayerTest
~InfogainLossLayerTest	src/caffe/test/test_infogain_loss_layer.cpp	/^  virtual ~InfogainLossLayerTest() {$/;"	f	class:caffe::InfogainLossLayerTest
~InnerProductLayerTest	src/caffe/test/test_inner_product_layer.cpp	/^  virtual ~InnerProductLayerTest() {$/;"	f	class:caffe::InnerProductLayerTest
~InternalRunDeathTestFlag	src/gtest/gtest.h	/^  ~InternalRunDeathTestFlag() {$/;"	f	class:testing::internal::InternalRunDeathTestFlag
~InternalThread	src/caffe/internal_thread.cpp	/^InternalThread::~InternalThread() {$/;"	f	class:caffe::InternalThread
~Iterator	src/gtest/gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
~Iterator	src/gtest/gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
~Iterator	src/gtest/gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
~Iterator	src/gtest/gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
~Iterator	src/gtest/gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
~Iterator	src/gtest/gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
~Iterator	src/gtest/gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
~Iterator	src/gtest/gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
~Iterator	src/gtest/gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
~Iterator	src/gtest/gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::RangeGenerator::Iterator
~Iterator	src/gtest/gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
~LMDB	include/caffe/util/db_lmdb.hpp	/^  virtual ~LMDB() { Close(); }$/;"	f	class:caffe::db::LMDB
~LMDBCursor	include/caffe/util/db_lmdb.hpp	/^  virtual ~LMDBCursor() {$/;"	f	class:caffe::db::LMDBCursor
~LRNLayerTest	src/caffe/test/test_lrn_layer.cpp	/^  virtual ~LRNLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::LRNLayerTest
~Layer	include/caffe/layer.hpp	/^  virtual ~Layer() {}$/;"	f	class:caffe::Layer
~LevelDB	include/caffe/util/db_leveldb.hpp	/^  virtual ~LevelDB() { Close(); }$/;"	f	class:caffe::db::LevelDB
~LevelDBCursor	include/caffe/util/db_leveldb.hpp	/^  ~LevelDBCursor() { delete iter_; }$/;"	f	class:caffe::db::LevelDBCursor
~MSRAFillerTest	src/caffe/test/test_filler.cpp	/^  virtual ~MSRAFillerTest() { delete blob_; }$/;"	f	class:caffe::MSRAFillerTest
~MVNLayerTest	src/caffe/test/test_mvn_layer.cpp	/^  virtual ~MVNLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::MVNLayerTest
~MathFunctionsTest	src/caffe/test/test_math_functions.cpp	/^  virtual ~MathFunctionsTest() {$/;"	f	class:caffe::MathFunctionsTest
~MaxPoolingDropoutTest	src/caffe/test/test_maxpool_dropout_layers.cpp	/^  virtual ~MaxPoolingDropoutTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::MaxPoolingDropoutTest
~MemoryDataLayerTest	src/caffe/test/test_memory_data_layer.cpp	/^  virtual ~MemoryDataLayerTest() {$/;"	f	class:caffe::MemoryDataLayerTest
~MultiDeviceTest	include/caffe/test/test_caffe_main.hpp	/^  virtual ~MultiDeviceTest() {}$/;"	f	class:caffe::MultiDeviceTest
~MultinomialLogisticLossLayerTest	src/caffe/test/test_multinomial_logistic_loss_layer.cpp	/^  virtual ~MultinomialLogisticLossLayerTest() {$/;"	f	class:caffe::MultinomialLogisticLossLayerTest
~Mutex	src/gtest/gtest.h	/^  ~Mutex() {$/;"	f	class:std::tr1::Mutex
~NCCL	src/caffe/parallel.cpp	/^NCCL<Dtype>::~NCCL() {$/;"	f	class:caffe::NCCL
~NativeArray	src/gtest/gtest.h	/^  ~NativeArray() {$/;"	f	class:testing::internal::NativeArray
~Net	include/caffe/net.hpp	/^  virtual ~Net() {}$/;"	f	class:caffe::Net
~NeuronLayerTest	src/caffe/test/test_neuron_layer.cpp	/^  virtual ~NeuronLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::NeuronLayerTest
~OsStackTraceGetterInterface	src/gtest/gtest-all.cpp	/^  virtual ~OsStackTraceGetterInterface() {}$/;"	f	class:testing::internal::OsStackTraceGetterInterface
~ParamGeneratorInterface	src/gtest/gtest.h	/^  virtual ~ParamGeneratorInterface() {}$/;"	f	class:testing::internal::ParamGeneratorInterface
~ParamIteratorInterface	src/gtest/gtest.h	/^  virtual ~ParamIteratorInterface() {}$/;"	f	class:testing::internal::ParamIteratorInterface
~ParameterizedTestCaseInfoBase	src/gtest/gtest.h	/^  virtual ~ParameterizedTestCaseInfoBase() {}$/;"	f	class:testing::internal::ParameterizedTestCaseInfoBase
~ParameterizedTestCaseRegistry	src/gtest/gtest.h	/^  ~ParameterizedTestCaseRegistry() {$/;"	f	class:testing::internal::ParameterizedTestCaseRegistry
~Params	include/caffe/parallel.hpp	/^  virtual ~Params() {$/;"	f	class:caffe::Params
~PoolingLayerTest	src/caffe/test/test_pooling_layer.cpp	/^  virtual ~PoolingLayerTest() {$/;"	f	class:caffe::PoolingLayerTest
~PositiveUnitballFillerTest	src/caffe/test/test_filler.cpp	/^  virtual ~PositiveUnitballFillerTest() { delete blob_; }$/;"	f	class:caffe::PositiveUnitballFillerTest
~PowerLayerTest	src/caffe/test/test_power_layer.cpp	/^  virtual ~PowerLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::PowerLayerTest
~RE	src/gtest/gtest-all.cpp	/^RE::~RE() {$/;"	f	class:testing::internal::RE
~RangeGenerator	src/gtest/gtest.h	/^  virtual ~RangeGenerator() {}$/;"	f	class:testing::internal::RangeGenerator
~ReductionLayerTest	src/caffe/test/test_reduction_layer.cpp	/^  virtual ~ReductionLayerTest() {$/;"	f	class:caffe::ReductionLayerTest
~ReshapeLayerTest	src/caffe/test/test_reshape_layer.cpp	/^  virtual ~ReshapeLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::ReshapeLayerTest
~ReturnSentinel	src/gtest/gtest.h	/^    ~ReturnSentinel() { test_->Abort(TEST_ENCOUNTERED_RETURN_STATEMENT); }$/;"	f	class:testing::internal::DeathTest::ReturnSentinel
~SPPLayerTest	src/caffe/test/test_spp_layer.cpp	/^  virtual ~SPPLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::SPPLayerTest
~ScaleLayerTest	src/caffe/test/test_scale_layer.cpp	/^  virtual ~ScaleLayerTest() {$/;"	f	class:caffe::ScaleLayerTest
~ScopedFakeTestPartResultReporter	src/gtest/gtest-all.cpp	/^ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {$/;"	f	class:testing::ScopedFakeTestPartResultReporter
~ScopedTrace	src/gtest/gtest-all.cpp	/^ScopedTrace::~ScopedTrace() {$/;"	f	class:testing::internal::ScopedTrace
~SigmoidCrossEntropyLossLayerTest	src/caffe/test/test_sigmoid_cross_entropy_loss_layer.cpp	/^  virtual ~SigmoidCrossEntropyLossLayerTest() {$/;"	f	class:caffe::SigmoidCrossEntropyLossLayerTest
~SignalHandler	src/caffe/util/signal_handler.cpp	/^SignalHandler::~SignalHandler() {$/;"	f	class:caffe::SignalHandler
~SingleFailureChecker	src/gtest/gtest-all.cpp	/^SingleFailureChecker::~SingleFailureChecker() {$/;"	f	class:testing::internal::SingleFailureChecker
~SliceLayerTest	src/caffe/test/test_slice_layer.cpp	/^  virtual ~SliceLayerTest() {$/;"	f	class:caffe::SliceLayerTest
~SoftmaxLayerTest	src/caffe/test/test_softmax_layer.cpp	/^  virtual ~SoftmaxLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::SoftmaxLayerTest
~SoftmaxWithLossLayerTest	src/caffe/test/test_softmax_with_loss_layer.cpp	/^  virtual ~SoftmaxWithLossLayerTest() {$/;"	f	class:caffe::SoftmaxWithLossLayerTest
~Solver	include/caffe/solver.hpp	/^  virtual ~Solver() {}$/;"	f	class:caffe::Solver
~SplitLayerTest	src/caffe/test/test_split_layer.cpp	/^  virtual ~SplitLayerTest() {$/;"	f	class:caffe::SplitLayerTest
~StochasticPoolingLayerTest	src/caffe/test/test_stochastic_pooling.cpp	/^  virtual ~StochasticPoolingLayerTest() {$/;"	f	class:caffe::StochasticPoolingLayerTest
~StreamingListener	src/gtest/gtest-all.cpp	/^  virtual ~StreamingListener() {$/;"	f	class:testing::internal::StreamingListener
~String	src/gtest/gtest.h	/^  ~String() { delete[] c_str_; }$/;"	f	class:testing::internal::String
~SyncedMemory	src/caffe/syncedmem.cpp	/^SyncedMemory::~SyncedMemory() {$/;"	f	class:caffe::SyncedMemory
~TanHLayerTest	src/caffe/test/test_tanh_layer.cpp	/^  virtual ~TanHLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::TanHLayerTest
~Test	src/gtest/gtest-all.cpp	/^Test::~Test() {$/;"	f	class:testing::Test
~TestCase	src/gtest/gtest-all.cpp	/^TestCase::~TestCase() {$/;"	f	class:testing::TestCase
~TestEventListener	src/gtest/gtest.h	/^  virtual ~TestEventListener() {}$/;"	f	class:testing::TestEventListener
~TestEventListeners	src/gtest/gtest-all.cpp	/^TestEventListeners::~TestEventListeners() { delete repeater_; }$/;"	f	class:testing::TestEventListeners
~TestEventRepeater	src/gtest/gtest-all.cpp	/^TestEventRepeater::~TestEventRepeater() {$/;"	f	class:testing::internal::TestEventRepeater
~TestFactoryBase	src/gtest/gtest.h	/^  virtual ~TestFactoryBase() {}$/;"	f	class:testing::internal::TestFactoryBase
~TestInfo	src/gtest/gtest-all.cpp	/^TestInfo::~TestInfo() { delete factory_; }$/;"	f	class:testing::TestInfo
~TestMetaFactoryBase	src/gtest/gtest.h	/^  virtual ~TestMetaFactoryBase() {}$/;"	f	class:testing::internal::TestMetaFactoryBase
~TestPartResultReporterInterface	src/gtest/gtest.h	/^  virtual ~TestPartResultReporterInterface() {}$/;"	f	class:testing::TestPartResultReporterInterface
~TestResult	src/gtest/gtest-all.cpp	/^TestResult::~TestResult() {$/;"	f	class:testing::TestResult
~ThreadLocal	src/gtest/gtest.h	/^  ~ThreadLocal() {$/;"	f	class:std::tr1::ThreadLocal
~ThreadLocalValueHolderBase	src/gtest/gtest.h	/^  virtual ~ThreadLocalValueHolderBase() {}$/;"	f	class:std::tr1::ThreadLocalValueHolderBase
~ThreadWithParam	src/gtest/gtest.h	/^  ~ThreadWithParam() { Join(); }$/;"	f	class:std::tr1::ThreadWithParam
~ThreadWithParamBase	src/gtest/gtest.h	/^  virtual ~ThreadWithParamBase() {}$/;"	f	class:std::tr1::ThreadWithParamBase
~ThresholdLayerTest	src/caffe/test/test_threshold_layer.cpp	/^  virtual ~ThresholdLayerTest() { delete blob_bottom_; delete blob_top_; }$/;"	f	class:caffe::ThresholdLayerTest
~TileLayerTest	src/caffe/test/test_tile_layer.cpp	/^  virtual ~TileLayerTest() {$/;"	f	class:caffe::TileLayerTest
~Timer	src/caffe/util/benchmark.cpp	/^Timer::~Timer() {$/;"	f	class:caffe::Timer
~Transaction	include/caffe/util/db.hpp	/^  virtual ~Transaction() { }$/;"	f	class:caffe::db::Transaction
~UniformFillerTest	src/caffe/test/test_filler.cpp	/^  virtual ~UniformFillerTest() { delete blob_; }$/;"	f	class:caffe::UniformFillerTest
~UnitTest	src/gtest/gtest-all.cpp	/^UnitTest::~UnitTest() {$/;"	f	class:testing::UnitTest
~UnitTestImpl	src/gtest/gtest-all.cpp	/^UnitTestImpl::~UnitTestImpl() {$/;"	f	class:testing::internal::UnitTestImpl
~ValuesInIteratorRangeGenerator	src/gtest/gtest.h	/^  virtual ~ValuesInIteratorRangeGenerator() {}$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator
~WindowDataLayer	src/caffe/layers/window_data_layer.cpp	/^WindowDataLayer<Dtype>::~WindowDataLayer<Dtype>() {$/;"	f	class:caffe::WindowDataLayer
~WithParamInterface	src/gtest/gtest.h	/^  virtual ~WithParamInterface() {}$/;"	f	class:testing::WithParamInterface
~Worker	src/caffe/parallel.cpp	/^  virtual ~Worker() {}$/;"	f	class:caffe::Worker
~XavierFillerTest	src/caffe/test/test_filler.cpp	/^  virtual ~XavierFillerTest() { delete blob_; }$/;"	f	class:caffe::XavierFillerTest
~linked_ptr	src/gtest/gtest.h	/^  ~linked_ptr() { depart(); }$/;"	f	class:testing::internal::linked_ptr
