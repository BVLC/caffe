name: "TestLayer-SlicingData"

layer {
  name: "train-data"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  data_param {
    source: "/data1/Abraham/SaliencyPoolingExperiments/MyLMDB-training-t"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "val-data"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  data_param {
    source: "/data1/Abraham/SaliencyPoolingExperiments/MyLMDB-validation-t"
    batch_size: 64
    backend: LMDB
  }
}

layer {
  name: "slice-data"
  type: "Slice"
  bottom: "data"
  top: "image"
  top: "saliency_map"
  slice_param {
    axis: 1
    slice_point: 3
  }
}

layer {
  name: "conv"
  type: "Convolution"
  bottom: "image"
  top: "conv1_features"
  convolution_param {
    num_output: 9
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1_features"
  top: "relu1_activation"
}

layer {
  type: "Python"                        		# Layer type
  name: "Saliency_Pooling"              		# Layer name
  bottom: "relu1_activation"                     	# Input 1 - features to pool
  bottom: "saliency_map"                       		# Input 2 - Saliency map
  top: "pooling1"                         		# Output 1 - Pooled features
  top: "saliency_map_1_out"                     	# Output 2 - Saliency map resized
  python_param {
    module: "custom_layers"      			# The module name (python script)
    layer: "Saliency_Pooling_Layer"            		# The layer name in python script
    param_str: '{"kernel_size":"3","stride":"2"}' 	# Pooling parameters
  }
}


layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pooling1"
  top: "conv2_features"
  convolution_param {
    num_output: 9
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}


layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2_features"
  top: "relu2_activation"
}

layer {
  type: "Python"                        		# Layer type
  name: "Saliency_Pooling2"              		# Layer name
  bottom: "relu2_activation"                     	# Input 1 - features to pool
  bottom: "saliency_map_1_out"                       	# Input 2 - Saliency map
  top: "pooling2"                         		# Output 1 - Pooled features
  python_param {
    module: "custom_layers"      			# The module name (python script)
    layer: "Saliency_Pooling_Layer"            		# The layer name in python script
    param_str: '{"kernel_size":"3","stride":"2"}' 	# Pooling parameters
  }
}

layer {
  name: "fc6"
  type: "InnerProduct"
  bottom: "pooling2"
  top: "fc6"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 1000
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6"
  top: "fc6"
}
layer {
  name: "drop6"
  type: "Dropout"
  bottom: "fc6"
  top: "fc6"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7"
  type: "InnerProduct"
  bottom: "fc6"
  top: "fc7"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 1000
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc7"
  top: "fc7"
}
layer {
  name: "drop7"
  type: "Dropout"
  bottom: "fc7"
  top: "fc7"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc8"
  type: "InnerProduct"
  bottom: "fc7"
  top: "fc8"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "fc8"
  bottom: "label"
  top: "accuracy"
  include { stage: "val" }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "fc8"
  bottom: "label"
  top: "loss"
  exclude { stage: "deploy" }
}
layer {
  name: "softmax"
  type: "Softmax"
  bottom: "fc8"
  top: "softmax"
  include { stage: "deploy" }
}
