# AlexNet
name: "AlexNet (Saliency Pooling)"
layer {
  name: "train_data"
  type: "Data"
  top: "data"
  top: "label"
  data_param {
    source: "/data3/Abraham/SaliencyPoolingExperiments/MyLMDB-training-t"
    batch_size: 3
    backend: LMDB
  }
  include { phase: TRAIN }
}
layer {
  name: "val_data"
  type: "Data"
  top: "data"
  top: "label"
  data_param {
    source: "/data3/Abraham/SaliencyPoolingExperiments/MyLMDB-validation-t"
    batch_size: 3
    backend: LMDB
  }
  include { phase: TEST }
}

layer {
  name: "slice-data"
  type: "Slice"
  bottom: "data"
  top: "image"
  top: "sm"
  slice_param {
    axis: 1
    slice_point: 3
  }
}

layer {
  name: "conv1"
  type: "Convolution"
  bottom: "image"
  top: "conv1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 96
    kernel_size: 11
    stride: 4
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "norm1"
  type: "LRN"
  bottom: "conv1"
  top: "norm1"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}

layer {
  type: "Python"                        		# Layer type
  name: "Saliency_Pooling_1"              		# Layer name
  bottom: "norm1"                     			# Input 1 - features to pool
  bottom: "sm"                       		# Input 2 - Saliency map
  top: "pool1"                         		# Output 1 - Pooled features
  top: "saliency_map_1"                     	# Output 2 - Saliency map resized
  python_param {
    module: "custom_layers"      			# The module name (python script)
    layer: "Saliency_Pooling_Layer"            		# The layer name in python script
    param_str: '{"kernel_size":"3","stride":"2"}' 	# Pooling parameters
  }
}

layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "norm2"
  type: "LRN"
  bottom: "conv2"
  top: "norm2"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}

layer {
  type: "Python"                        		# Layer type
  name: "Saliency_Pooling_2"              		# Layer name
  bottom: "norm2"                     			# Input 1 - features to pool
  bottom: "saliency_map_1"                       		# Input 2 - Saliency map
  top: "pool2"                         		# Output 1 - Pooled features
  top: "saliency_map_2"                     	# Output 2 - Saliency map resized
  python_param {
    module: "custom_layers"      			# The module name (python script)
    layer: "Saliency_Pooling_Layer"            		# The layer name in python script
    param_str: '{"kernel_size":"3","stride":"2"}' 	# Pooling parameters
  }
}

layer {
  name: "conv3"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "conv3"
  top: "conv4"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "conv4"
  top: "conv4"
}
layer {
  name: "conv5"
  type: "Convolution"
  bottom: "conv4"
  top: "conv5"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "relu5"
  type: "ReLU"
  bottom: "conv5"
  top: "conv5"
}


layer {
  type: "Python"                        		# Layer type
  name: "Saliency_Pooling_5"              		# Layer name
  bottom: "conv5"                     			# Input 1 - features to pool
  bottom: "saliency_map_2"                       		# Input 2 - Saliency map
  top: "pool5"                         		# Output 1 - Pooled features
  python_param {
    module: "custom_layers"      			# The module name (python script)
    layer: "Saliency_Pooling_Layer"            		# The layer name in python script
    param_str: '{"kernel_size":"3","stride":"2"}' 	# Pooling parameters
  }
}



layer {
  name: "fc6"
  type: "InnerProduct"
  bottom: "pool5"
  top: "fc6"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6"
  top: "fc6"
}
layer {
  name: "drop6"
  type: "Dropout"
  bottom: "fc6"
  top: "fc6"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7"
  type: "InnerProduct"
  bottom: "fc6"
  top: "fc7"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc7"
  top: "fc7"
}
layer {
  name: "drop7"
  type: "Dropout"
  bottom: "fc7"
  top: "fc7"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc8"
  type: "InnerProduct"
  bottom: "fc7"
  top: "fc8"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "fc8"
  bottom: "label"
  top: "accuracy"
  include { phase: TEST }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "fc8"
  bottom: "label"
  top: "loss"
  exclude { stage: "deploy" }
}
layer {
  name: "softmax"
  type: "Softmax"
  bottom: "fc8"
  top: "softmax"
  include { stage: "deploy" }
}
