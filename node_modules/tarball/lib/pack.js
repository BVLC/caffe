(function() {
  var BufferedStream, DEFAULTS, EventEmitter, Pack, UnbufferedStream, getTime, tar, zlib, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('events').EventEmitter;

  zlib = require('zlib');

  tar = require('tar');

  _ref = require('./util'), getTime = _ref.getTime, BufferedStream = _ref.BufferedStream, UnbufferedStream = _ref.UnbufferedStream;

  DEFAULTS = {
    mode: 0x1ed,
    uid: 1000,
    gid: 1000,
    uname: 'nouser',
    gname: 'nogroup',
    type: 'File'
  };

  Pack = (function(_super) {
    __extends(Pack, _super);

    function Pack(params, opts) {
      var key, value, _ref1;
      if (opts == null) {
        opts = {};
      }
      this.onError = __bind(this.onError, this);
      this.flush = __bind(this.flush, this);
      this.onPipe = __bind(this.onPipe, this);
      this.onDrain = __bind(this.onDrain, this);
      this.defaults = {};
      for (key in DEFAULTS) {
        value = DEFAULTS[key];
        this.defaults[key] = value;
      }
      _ref1 = opts.defaults;
      for (key in _ref1) {
        value = _ref1[key];
        this.defaults[key] = value;
      }
      this.on('pipe', this.onPipe);
      this.pending = [];
      this.idle = true;
      this.pack = this.output = new tar.Pack(params).on('error', this.onError).on('drain', this.onDrain);
      if (opts.compress) {
        this.output = this.pack.pipe(zlib.Gzip()).on('error', this.onError);
      }
      if (opts.done != null) {
        this.pack.on('close', opts.done);
      }
      Pack.__super__.constructor.apply(this, arguments);
    }

    Pack.prototype.onDrain = function() {
      if (this.current == null) {
        return;
      }
      this.current.drained = true;
      this.current.flushed = true;
      return process.nextTick(this.flush);
    };

    Pack.prototype.onPipe = function(source) {
      var _this = this;
      if (this.idle) {
        this.idle = false;
        return this.current = this.check(source).once('full', function() {
          _this.current.flushed = _this.pack.add(_this.current);
          if (_this.current.flushed && !_this.current.drained) {
            return process.nextTick(_this.flush);
          }
        });
      } else {
        source.pause();
        return this.pending.push(source);
      }
    };

    Pack.prototype.flush = function() {
      var next, old,
        _this = this;
      if ((this.current != null) && !this.current.flushed) {
        return;
      }
      old = this.current;
      next = this.pending.shift();
      if (next != null) {
        this.idle = false;
        this.current = this.check(next).once('full', function() {
          _this.current.flushed = _this.pack.add(_this.current);
          if (!_this.current.flushed) {
            _this.current.resume();
          }
          if (_this.current.flushed && !_this.current.drained) {
            return process.nextTick(_this.flush);
          }
        });
      } else {
        this.current = null;
        this.idle = true;
        if (this.shutdown) {
          this.end();
        }
      }
      return old != null ? old.emit('accepted') : void 0;
    };

    Pack.prototype.onError = function(err) {
      return this.emit('error', err);
    };

    Pack.prototype.append = function(stream, callback) {
      if (callback != null) {
        stream.once('accepted', callback);
      }
      return stream.pipe(this, {
        end: false
      });
    };

    Pack.prototype.pipe = function(source) {
      return this.output.pipe(source);
    };

    Pack.prototype.end = function() {
      if (this.idle) {
        return this.pack.end();
      } else {
        return this.shutdown = true;
      }
    };

    Pack.prototype.check = function(source) {
      var key, stream, time, value, _base, _base1, _base2, _base3, _base4, _ref1, _ref2, _ref3, _ref4;
      if (source.path == null) {
        throw new Error("no path");
      }
      if (source.props == null) {
        source.props = {};
      }
      _ref1 = this.defaults;
      for (key in _ref1) {
        value = _ref1[key];
        if ((_base = source.props)[key] == null) {
          _base[key] = value;
        }
      }
      if (source.props.size != null) {
        if (typeof source.props.size !== 'number') {
          source.props.size = parseInt(source.props.size);
        }
        if (isNaN(source.props.size)) {
          source.props.size = void 0;
        }
      }
      if ((source.props.size != null) && false) {
        stream = new UnbufferedStream(source);
      } else {
        stream = new BufferedStream(source);
      }
      time = getTime(stream.time);
      if ((_base1 = stream.props).mtime == null) {
        _base1.mtime = (_ref2 = getTime(stream.props.mtime)) != null ? _ref2 : time;
      }
      if ((_base2 = stream.props).atime == null) {
        _base2.atime = (_ref3 = getTime(stream.props.atime)) != null ? _ref3 : time;
      }
      if ((_base3 = stream.props).ctime == null) {
        _base3.ctime = (_ref4 = getTime(stream.props.ctime)) != null ? _ref4 : time;
      }
      if ((_base4 = stream.props).path == null) {
        _base4.path = stream.path;
      }
      (stream.root != null ? stream.root : stream.root = {}).path = ".";
      return stream;
    };

    return Pack;

  })(EventEmitter);

  module.exports = Pack;

}).call(this);
