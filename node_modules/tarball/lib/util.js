(function() {
  var BufferedStream, PostBuffer, Stream, UnbufferedStream, getTime,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Stream = require('stream').Stream;

  PostBuffer = require('bufferstream/postbuffer');

  getTime = function(date) {
    date = new Date(date).getTime() / 1000;
    if (isNaN(date)) {
      return Date.now() / 1000;
    } else {
      return date;
    }
  };

  UnbufferedStream = (function(_super) {
    __extends(UnbufferedStream, _super);

    function UnbufferedStream(source) {
      var _this = this;
      UnbufferedStream.__super__.constructor.apply(this, arguments);
      this.closed = false;
      this.props = source.props, this.root = source.root, this.path = source.path;
      source.once('end', function() {});
      this.once('accepted', function() {
        return source.emit('accepted');
      });
      source.pipe(this);
    }

    UnbufferedStream.prototype.end = function() {
      var _this = this;
      this.emit('full');
      return process.nextTick(function() {
        _this.emit('end');
        return _this.closed = true;
      });
    };

    UnbufferedStream.prototype.resume = function() {};

    UnbufferedStream.prototype.pause = function() {};

    return UnbufferedStream;

  })(Stream);

  BufferedStream = (function(_super) {
    __extends(BufferedStream, _super);

    function BufferedStream(source) {
      var _this = this;
      BufferedStream.__super__.constructor.apply(this, arguments);
      this.closed = false;
      this.buffer = new PostBuffer(source);
      this.props = source.props, this.root = source.root, this.path = source.path;
      this.buffer.onEnd(function(data) {
        _this.props.size = data.length;
        _this.emit('full');
        return process.nextTick(function() {
          return _this.flush(data);
        });
      });
      this.once('accepted', function() {
        return source.emit('accepted');
      });
    }

    BufferedStream.prototype.flush = function(body) {
      var _this = this;
      this.emit('data', body);
      return process.nextTick(function() {
        _this.closed = true;
        return _this.emit('end');
      });
    };

    BufferedStream.prototype.resume = function() {};

    BufferedStream.prototype.pause = function() {};

    return BufferedStream;

  })(Stream);

  module.exports = {
    UnbufferedStream: UnbufferedStream,
    BufferedStream: BufferedStream,
    getTime: getTime
  };

}).call(this);
