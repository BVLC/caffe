(function() {
  var EventEmitter, Extract, tar, zlib,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('events').EventEmitter;

  zlib = require('zlib');

  tar = require('tar');

  Extract = (function(_super) {
    __extends(Extract, _super);

    function Extract(stream, opts) {
      if (opts == null) {
        opts = {};
      }
      this.extract = new tar.Extract(opts.path).on('error', this.emit.bind(this, 'error'));
      if (opts.uncompress) {
        this.extract.pipe(zlib.Gunzip()).on('error', this.emit.bind(this, 'error'));
      }
      this.extract.on('close', opts.done);
      Extract.__super__.constructor.apply(this, arguments);
    }

    return Extract;

  })(EventEmitter);

  module.exports = Extract;

}).call(this);
