var cp = require('child_process');

function command(c) {
    return {type: 'command', command: c};
}

function str(s) {
    return {type: 'string', value: s};
}

function ref(c, v) {
    return {type: 'ref', variable: c, value: v[c]};
}

function args(a) {
    return {type: 'arguments', value: a};
}

ometa Expansion {
    flag = '<' ?{this._options.phase == 'pre'}
        | '>' ?{this._options.phase == 'post'},

    ref = flag ('@' | empty) '(' ( ~')' char)*:c ')' -> ref(c.join(''), this._options.variables)
        | (flag | empty) '!' ('@' | empty) '(' command:c ')' -> command(c),

    command = '[' listOf(`string, ','):a ']' -> args(a)
        | stringInside(')')*:s    -> s,

    string = '"' stringInside('"')*:c '"'    -> c
        | '\'' stringInside('\'')*:c '\''    -> c,

    stringInside :x = ref:r       -> r
        | (~ref stringInsideParts(x))+:p -> str(p.join('')),

    stringInsideRaw = ref:r -> r
        | (~ref stringInsidePartsRaw)+:p -> str(p.join('')),

    stringInsidePartsRaw = '\\' char:y -> y
        | char:c -> c,

    stringInsideParts :x = '\\' char:y -> y
        | (~seq(x) char):c      -> c,

    stringRaw = stringInsideRaw*:c -> c
}

function iter(array, proc, cb) {
    var done = 0;
    var result = [];
    for (var i = 0; i < array.length; i++) {
        (function(j) {
            setImmediate(function() {
                proc(array[j], function(err, res) {
                    if (err) cb(err);

                    result[j] = res;
                    if (++done == array.length) cb(null, result);
                });
            });
        })(i);
    }
}

function handleNode(e, cb) {
    if (e.type == 'command') {
        if (Array.isArray(e.command)) {
            iter(e.command, handleNode, function(err, res) {
                if (err) return cb(err);
                cp.exec(res.join(''), function(err, stdout) {
                    if (err) return cb(err);
                    cb(null, stdout[stdout.length - 1] == '\n' ? stdout.slice(0, stdout.length - 1) : stdout);
                });
            });
        } else if (e.command.type == 'arguments') {
            iter(e.command.value, function(n, cb) {
                iter(n, handleNode, function(err, res) {
                    if (err) return cb(err);
                    cb(null, res.join(''));
                });
            }, function (err, res) {
                cp.execFile(res[0], res.slice(1), function (err, stdout) {
                    if (err) return cb(err);
                    cb(null, stdout[stdout.length - 1] == '\n' ? stdout.slice(0, stdout.length - 1) : stdout);
                });
            });
        } else {
            cb(new Error("unknown command node type"));
        }
    } else if (e.type == 'ref') {
        cb (null, e.value);
    } else if (e.type == 'string') {
        cb (null, e.value);
    } else {
        cb(null, e);
    }
}

var expansions = module.exports = {
    parser: Expansion,

    expandString: function (s, variables, which, cb) {
        var tree = Expansion.matchAll(s, 'stringRaw', {variables: variables, phase: which});
        iter(tree, handleNode, function (err, res) {
            if (err) return cb(err);
            setImmediate(function() {
                cb(null, res.join(''));
            });
        });
    },

    expandArray: function (a, variables, which, cb) {
        var re = which == 'pre' ? /^<@\((.*)\)$/ : /^>@\((.*)\)$/;
        var out = [];
        var m;
        for (var i = 0; i < a.length; i++) {
            if (m = re.exec(a[i])) {
                if (Array.isArray(variables[m[1]])) {
                    variables[m[1]].forEach(function(e) {
                        out.push(e);
                    });
                } else {
                    out.push(variables[m[1]]);
                }
            } else {
                out.push(a[i]);
            }
        }

        cb(null, out);
    }
};
