{
  "name": "pinkie",
  "version": "1.0.0",
  "description": "Itty bitty little wittle twinkie pinkie ES6 Promise implementation",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/floatdrop/pinkie.git"
  },
  "author": {
    "name": "Vsevolod Strukchinsky",
    "email": "floatdrop@gmail.com",
    "url": "github.com/floatdrop"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "scripts": {
    "test": "mocha"
  },
  "files": [
    "index.js"
  ],
  "keywords": [
    "promise",
    "es6"
  ],
  "dependencies": {},
  "devDependencies": {
    "mocha": "*",
    "promises-aplus-tests": "*"
  },
  "readme": "<h1 align=\"center\">\n\t<br>\n\t<img width=\"300\" src=\"https://rawgit.com/floatdrop/pinkie/master/media/logo.png\" alt=\"pinkie\">\n\t<br>\n\t<br>\n</h1>\n\n> Itty bitty little wittle twinkie pinkie [ES6 Promise](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-objects) implementation\n\n[![Build Status](https://travis-ci.org/floatdrop/pinkie.svg?branch=master)](https://travis-ci.org/floatdrop/pinkie)\n\nThere are [tons of Promise implementations](https://github.com/sorrycc/awesome-javascript#control-flow) out there, but all of them focused on browser compatibility and often bloated with functionality.\n\nThis module focused to be exactly Promise specification polyfill (like [native-promise-only](https://github.com/getify/native-promise-only)), but in NodeJS land (it should be browserify-able thou).\n\n\n## Install\n\n```\n$ npm install --save pinkie\n```\n\n\n## Usage\n\n```js\nvar Promise = require('pinkie');\n\nnew Promise(function (resolve, reject) {\n\tgot('google.com', function (err, data) {\n\t\tif (err) {\n\t\t\treturn reject(err);\n\t\t}\n\n\t\tresolve(data);\n\t});\n});\n//=> Promise\n```\n\n\n### API\n\n`pinkie` exports bare [ES6 Promise](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-objects) implementation. In case you forgot:\n\n#### new Promise(executor)\n\nReturns new instance of `Promise`.\n\n##### executor\n\n*Required*  \nType: `function`\n\nFunction with two arguments resolve and reject. The first argument fulfills the promise, the second argument rejects it.\n\n#### pinkie.all(promises)\n\nReturns a promise that resolves when all of the promises in the `promises` Array argument have resolved.\n\n#### pinkie.race(promises)\n\nReturns a promise that resolves or rejects as soon as one of the promises in the `promises` Array resolves or rejects, with the value or reason from that promise.\n\n#### pinkie.reject(reason)\n\nReturns a Promise object that is rejected with the given `reason`.\n\n#### pinkie.resolve(value)\n\nReturns a Promise object that is resolved with the given `value`. If the `value` is a thenable (i.e. has a then method), the returned promise will \"follow\" that thenable, adopting its eventual state; otherwise the returned promise will be fulfilled with the `value`.\n\n## License\n\nMIT Â© [Vsevolod Strukchinsky](http://github.com/floatdrop)\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/floatdrop/pinkie/issues"
  },
  "homepage": "https://github.com/floatdrop/pinkie#readme",
  "_id": "pinkie@1.0.0",
  "_shasum": "5a47f28ba1015d0201bda7bf0f358e47bec8c7e4",
  "_resolved": "https://registry.npmjs.org/pinkie/-/pinkie-1.0.0.tgz",
  "_from": "pinkie@>=1.0.0 <2.0.0"
}
