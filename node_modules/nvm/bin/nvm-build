#! /usr/bin/env node
var fs = require('fs');
var cp = require('child_process');
var path = require('path');
var util = require('util');
fs.existsSync = fs.existsSync || path.existsSync;

var VERSION = process.argv[2];
if (!VERSION) {
  console.error('You must pass a VERSION number');
  process.exit(1);
}
var HOME = process.env.HOME;
if (!HOME) {
  console.error('There must be a `HOME` set in your environment');
  process.exit(0);
}
var DIRECTORY = path.join(HOME, '.nvm', util.format('node-v%s', VERSION));
if (!fs.existsSync(DIRECTORY)) {
  console.error('%s doesn\'t exist, (need to downloaded first?)', DIRECTORY, VERSION);
  process.exit(1);
}
var EXECUTABLE = path.join(DIRECTORY, 'node');
if (fs.existsSync(EXECUTABLE)) {
  console.error('Already built');
  process.exit(1);
}

function configure(callback) {
  var cmd = 'python';

  if (VERSION.match(/^0.6/))
    cmd = 'bash'

  process.stderr.write('Configuring... ');
  var configure = cp.spawn(cmd, [path.join(DIRECTORY, 'configure')], { cwd: DIRECTORY });
  configure.stderr.pipe(process.stderr);
  configure.stdout.pipe(process.stdout);
  configure.on('exit', function (code) {
    process.stderr.write(util.format('Done [%s]', code));
    if (code === 0) callback();
  });
};

function make() {
  process.stderr.write('Building... ');
  var make = cp.spawn('make', [], { cwd: DIRECTORY });
  make.stderr.pipe(process.stderr);
  make.stdout.pipe(process.stdout);
  make.on('exit', function (code) {
    process.stderr.write(util.format('Done [%s]', code));
  });
};

configure(make);