%%
%% Prepopulate database to ~0.5Tb using 1k objects - using 500 million keys
%%

%% Make sure this is max/infinity so the populate completes
{mode, max}.
{duration, infinity}.
%% Make this a multiple of final key size - partitioned_sequential_int keygen is fussy
{concurrent, 100}.

%% Set up bucket to use - configure with n_val=1
%% using riak_core_bucket:set_bucket(<<"b1">>,[{n_val,1}]).
%% from riak console
{riakc_pb_bucket, <<"b1">>}.
{key_generator, {int_to_bin, {partitioned_sequential_int, 0, 500000000}}}.
{value_generator, {fixed_bin, 1000}}.
{operations, [{put, 1}]}.

%% To permit the sequential_int and partitioned_sequential_int
%% key generators to be able to resume where they left off after a
%% crash (of the client or of the server), uncomment the
%% sequential_int_state_dir and edit path accordingly.
{sequential_int_state_dir, "/tmp/bench9"}.

%% Riak connection info
{riakc_pb_ips, [ "10.0.24.19" ]}.
{riakc_pb_replies, default}.

%% Setup cruft
{driver, basho_bench_driver_riakc_pb}.
{code_paths, ["deps/riakc",
              "deps/protobuffs"]}.
