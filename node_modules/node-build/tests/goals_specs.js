var sys = require('sys');
var goals = require('../lib/node-build/goals');

describe('node-build maker/goals.js', function(){
  it('global interface should allow for achieve of a goal', function(){
    expect(goals.achieve).toBeDefined();
  });
  it('global interface should allow for registration of goal', function(){
    expect(goals.register).toBeDefined();
  });
  it('global interface should allow for get of task definition', function(){
    expect(goals.get).toBeDefined();
  });
  it('global interface should allow for clearing of registered goals', function(){
    expect(goals.clear).toBeDefined();
  });  
  describe('when defining a target', function(){
      afterEach(function(){
          goals.clear();
      })
      it('should become a known goal', function(){
        //GIVEN
        expect(goals.get("test")).not.toBeDefined();

        //WHEN
        goals.define("test").perform.echo("Test ping")

        //THEN
        expect(goals.get("test")).toBeDefined();
      });
      it('should register the tasks under the registered name', function(){
        //GIVEN
        expect(goals.get("test")).not.toBeDefined();

        //WHEN
        goals.define("test").perform.echo("Test ping")

        //THEN
        expect(goals.get("test").tasks).toBeDefined();
        expect(goals.get("test").tasks.length).toEqual(1);
        expect(goals.get("test").tasks[0].name).toEqual("echo");
        expect(goals.get("test").tasks[0].options.msg).toEqual("Test ping");
      });
  });
  describe('when achieving a target', function(){
      it("should fail when the goal doesn't exist", function(){
        //GIVEN
        var cb = {fail: function(){}}
        spyOn(cb,'fail');
        goals.register(null, cb.fail);
        expect(goals.get("test")).not.toBeDefined();

        //WHEN
        goals.achieve("test");

        //THEN
        expect(cb.fail).wasCalledWith("No such goal test");
      });
      it("should substitute with no tasks for empty goal", function(){
        //GIVEN
        var cb = {substitute: function(goals){}}
        spyOn(cb,'substitute');
        spyOn(sys,'log');
        goals.register(cb.substitute, null);
        goals.define("test");

        //WHEN
        goals.achieve("test");

        //THEN
        expect(cb.substitute).wasCalledWith([]);
      });
      it("should schedule goals on which the current target depends", function(){
        //GIVEN
        var cb = {substitute: function(goals){}}
        spyOn(cb,'substitute');
        spyOn(sys,'log');
        goals.register(cb.substitute, null);
        goals.define("test",null, ["depends"]);

        //WHEN
        goals.achieve("test");

        //THEN
        expect(cb.substitute).wasCalledWith([{type: 'goal', action: "depends"}]);
      });
      it("should schedule tasks to be performed for this task", function(){
        //GIVEN
        var cb = {substitute: function(goals){}}
        spyOn(cb,'substitute');
        spyOn(sys,'log');
        goals.register(cb.substitute, null);
        goals.define("test",["a task"]);

        //WHEN
        goals.achieve("test");

        //THEN
        expect(cb.substitute).wasCalledWith([{type: 'task', action: "a task"}]);
      });
      it("should schedule depending tasks before goals on tasks", function(){
        //GIVEN
        var cb = {substitute: function(goals){}}
        spyOn(cb,'substitute');
        spyOn(sys,'log');
        goals.register(cb.substitute, null);
        goals.define("test",["after"], ["before"]);

        //WHEN
        goals.achieve("test");

        //THEN
        expect(cb.substitute).wasCalledWith([{type: 'goal', action: "before"},{type: 'task', action: "after"}]);
      });
  });
});
