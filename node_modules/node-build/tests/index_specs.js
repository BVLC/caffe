var maker = require('../lib/node-build');
var sys = require('sys');
var goals = require('../lib/node-build/goals');
var tasks = require('../lib/node-build/tasks');

describe('node-build maker/index.js', function(){
  it('global interface should allow for define', function(){
    expect(maker.define).toBeDefined();
  });
  it('global interface should allow for achieve', function(){
    expect(maker.achieve).toBeDefined();
  });
  it('global interface should allow for when clauses', function(){
    expect(maker.when).toBeDefined();
  });
  it('should delegate definition of a goal to goal', function(){
    //GIVEN
    spyOn(goals, 'define');

    //WHEN
    maker.define("test", "tasks", "depends");

    //THEN
    expect(goals.define).wasCalledWith("test", "tasks", "depends");
 });
 it('should delegate achieve of a goal to goal', function(){
    //GIVEN
    spyOn(goals, 'achieve');
    spyOn(sys, 'log');

    //WHEN
    maker.achieve("test");

    //THEN
    expect(goals.achieve).wasCalledWith("test");
 });
  it('should log the executed goal', function(){
    //GIVEN
    spyOn(goals, 'achieve');
    spyOn(sys, 'log');

    //WHEN
    maker.achieve("test");

    //THEN
    expect(sys.log).wasCalledWith("Building target :test");
 });
 describe('failure listener', function(){
     it('should exit the process on a failure', function(){
            //Given
            spyOn(process, 'exit');
            spyOn(sys,'log');

            //When
            maker.emitter.emit("fail", "Booboo")

            //Then
            expect(process.exit).wasCalledWith(1);
     });
     it('should log the failure reason', function(){
            //Given
            spyOn(process, 'exit');
            spyOn(sys,'log');

            //When
            maker.emitter.emit("fail", "Booboo")

            //Then
            expect(sys.log).wasCalledWith("Error Booboo");
     });
 });
 describe('done listener', function(){
     it("should exit the process when there's no work left" , function(){
            //Given
            spyOn(process, 'exit');
            spyOn(sys,'log');

            //When
            maker.emitter.emit("done")

            //Then
            expect(process.exit).wasCalledWith(0);
     });
     it("should report completion when there's no work left", function(){
            //Given
            spyOn(process, 'exit');
            spyOn(sys,'log');

            //When
            maker.emitter.listeners("done")[0]();

            //Then
            expect(sys.log).wasCalledWith("Complete");
     });
     it("should delegate execution of a goal to goals", function(){
            //Given
            maker.workItems.push({type: 'goal', action: 'some action'})
            spyOn(goals,'achieve');

            //When
            maker.emitter.listeners("done")[0]();
            
            //Then
            expect(goals.achieve).wasCalledWith('some action');
     });
     it("should delegate execution of a task to tasks", function(){
            //Given
            maker.workItems.push({type: 'task', action: 'some action'});
            spyOn(tasks,'achieve');

            //When
            maker.emitter.listeners("done")[0]();

            //Then
            expect(tasks.achieve).wasCalledWith('some action');
     });
 });
//  it('shows asynchronous test', function(){
//    setTimeout(function(){
//      expect('second').toEqual('second');
//      asyncSpecDone();
//    }, 1);
//    expect('first').toEqual('first');
//    asyncSpecWait();
//  });
});
