var sys = require('sys'), fs = require('fs'), Script = process.binding('evals').Script;

function loadFile(fileName) {
    var source = fs.readFileSync(fileName).toString();
    Script.runInThisContext(source, fileName);
};

loadFile(__dirname + '/lib/tokens.js');
loadFile(__dirname + '/lib/parse.js');
loadFile(__dirname + '/lib/complexity.js');
loadFile(__dirname + '/lib/fulljslint.js');

/*jslint evil: true */

/*members create, error, message, name, prototype, stringify, toSource,
    toString, write
*/

/*global JSON, make_parse, parse, source, tree */

// Make a new object that inherits members from an existing object.

if (typeof Object.create !== 'function') {
    Object.create = function (o) {
        function F() {}
        F.prototype = o;
        return new F();
    };
}

// Transform a token object into an exception object and throw it.

Object.prototype.error = function (message, t) {
    t = t || this;
    t.name = "SyntaxError";
    t.message = message;
    debugger;
    throw t;
};
    
function run(source, sourceFile) {
    try {
        parse = make_parse();
        tree = parse(source);
        COMPLEXITY.complexity(tree, sourceFile);

        var result = [];
        var fns = COMPLEXITY.getFunctions();
        for (var i in fns) {
            if (!Array[i] && !Array.prototype[i]) {
                var f = fns[i];
                result.push({
                    name: f.name,
                    complexity: f.complexity()
                });
            }
        }
        return result;
        //        COMPLEXITY.renderStats(document.getElementById("results"));

    } catch (e) {
        return e;
//        document.getElementById("results").innerText = JSON.stringify(e, ['name', 'message', 'from', 'to', 'line', 'key',
//                'value', 'arity', 'first', 'second', 'third', 'fourth'], 4);
    }

    delete parse;
    delete source;
    delete tree;
}

exports.run = run;