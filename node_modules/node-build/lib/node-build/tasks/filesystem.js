global.findFiles =function (pathname, fileMatcher) {
    var result = [];
    var files = fs.readdirSync(pathname);
    for(var i=0; i < files.length; i++) {
        var fullname = path.join(pathname, files[i]);
        var filestat = fs.statSync(fullname);
        if (filestat.isDirectory())
            result = result.concat(findFiles(fullname, fileMatcher));
        else if (fileMatcher.test(fullname))
            result.push(fullname);
    }
    return result;
}

global.removeDirs=function(pathname) {
    var dirs = fs.readdirSync(pathname);
    for (var j = 0; j < dirs.length; j++) {
        var dirName = path.join(pathname, dirs[j]);
        var childs = fs.readdirSync(dirName);
        if (childs.length > 0) {
            removeDirs(dirName);
        }
        fs.rmdirSync(dirName);
    }
}

global.createDirectory=function(dirName) {
    if (!exists(dirName)) {
        var directory = dirName.split('/');
        directory.pop();
        var dir = directory.join('/');
        createDirectory(dir);
        fs.mkdirSync(dirName,0777 ^ process.umask());
    }
}

global.exists=function(path){
    try {
        fs.statSync(path);
        return true;
    } catch (e){
        return false;
    }
}

tasks.exists=function(options){
    path.exists(options.path, function(exists){
        if(exists) done()
        else fail("No such dir "+options.path);
    });
};
tasks.mkDir=function(options){
    sys.log("Making dir "+options.path);
    path.exists(options.path, function(exists){
        if(!exists) fs.mkdirSync(options.path, 0777);
        done();
    });
};
tasks.rmDir=function(options){
    sys.log("Removing dir "+options.path);

    if(options.recursive) {
        var files = findFiles(options.path,/.*/);
        for(var i=0; i < files.length; i++) {
            var file = files[i];
            var fileToStat = file;
            var stat = fs.statSync(fileToStat);
            fs.unlinkSync(file);
        }
        var dirs = removeDirs(options.path);
    }
    fs.rmdirSync(options.path);
    done();
};
tasks.copyFiles=function(options) {
    var from = options.fromPath;
    var to   = options.toPath;
    var files = findFiles(from,/.*/);
    for (var i = 0; i < files.length; i++) {
        var filename = files[i];
        if(options.exclude && options.exclude(filename)) continue;
        var stripped = filename.replace(from,'');
        var dirName = path.dirname(filename);
        createDirectory(path.join(to, dirName.replace(from,'')));
        var data = fs.readFileSync(filename,'binary');
        fs.writeFileSync(path.join(to,stripped), data,'binary');
    }
    done();
};
tasks.copyFile=function(options){
    var data = fs.readFileSync(options.file,'binary');
    var fileName = path.basename(options.file)
    fs.writeFileSync(options.toPath+"/"+fileName, data, 'binary');
    done();
};
tasks.tar=function(options) {
    sys.log("Archiving "+options.path+ " to "+options.archive);
    tasks.exec({cmd : "tar cf '"+options.archive+"' -C '"+options.path+"/' ."});
};

language_definition.exists={
    name: "exists",
    description: "Fails the build if the requested path doesn't exist. \
                  It's a short hand for fail('No such path '+SOMEPATH, {condition: unless.exists(SOMEPATH)})",
    arguments: [{type: "direct", name: "path", description: "Path that must exist"}],
    example:
    'maker.define("exists").perform.\n\
        exists(environment.buildir).\n\
        echo("We can relax we have a build dir")'
};
language_definition.mkDir={
    name: "mkDir",
    description: "Creates a folder.",
    arguments: [{type: "direct", name: "path", description: "Path to create"}],
    example:
    'maker.define("mkdir").perform.\n\
        mkdir("build");'
};
language_definition.rmDir={
    name: "mkDir",
    description: "Remove a folder.",
    arguments: [{type: "direct", name: "path", description: "Path to remove"}, {type: "options", options: [{name: "recursive", description: "{true|false}"}]}],
    example:
    'maker.define("rmdir").perform.\n\
        rmdir("build", {recursive: true});'
};
language_definition.copyFiles={
    name: "copyFiles",
    description: "Multiple file copy command",
    arguments: [
            {type: "direct", name: "fromPath", description: "From folder"},
            {type: "direct", name: "toPath", description: "To folder"},
            {type: "direct", name: "exclude", description: "An optional function to exclude files. The function receives the relative path. When the function returns true the file is excluded."}
    ],
    example:
    'maker.define("copyFiles").perform.\n\
	    .copyFiles("./app","./deploy",\n\
		function(filename){\n\
			return (/\/etc\//.test(filename)) ||\n\
				   (/\/database\/fixtures\//.test(filename))\n\
	});'

};
language_definition.copyFile={
    name: "copyFile",
    description: "File copy command",
    arguments: [
        {type: "direct", name: "file", description: "File to copy"},
        {type: "direct", name: "toPath", description: "To folder"}],
    example:
    'maker.define("copyFile").perform.\n\
        .copyFile("deploy.js","./deploy")\n\
    });'
};
language_definition.tar={
    name: "tar",
    description: "Create a tar file based on a path",
    arguments: [
        {type: "direct", name: "archive", description: "file name of the created archive file"},
        {type: "direct", name: "path", description: "Path(directory) to archive"}],
    example:
    'maker.define("tar").perform.\n\
        tar(environment.tarballPath, "build/deploy")'
}