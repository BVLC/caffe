var child_process  = require('child_process');

var lastSpawnedProcess = undefined;

tasks.exec=function(options){
        sys.puts(options.cmd);
        var child = child_process.exec(options.cmd,
                function (error, stdout, stderr) {
                    if (error !== null) {
                        fail("Error executing "+options.cmd+", "+error);
                    }
                    else {
                        done(stdout);
                    }
                });
    };
tasks.spawn=function(options){
        var child = child_process.spawn(options.cmd, options.args);
        child.stderr.addListener('data', function (data) {
            sys.log('stderr: ' + data);
        });
        lastSpawnedProcess = child;
        done();
    };
tasks.kill=function() {
        if(lastSpawnedProcess) {
            lastSpawnedProcess.kill("SIGHUP");
        }
        lastSpawnedProcess = undefined;
        done();
    };

language_definition.exec={
    name: "exec",
    description: "Executes a command. Node-build will wait for completion of the proces. Any exit code other that 0 will fail the build. On a successfull build the console output will be handed over to the next task." ,
    arguments: [{type: "direct", name: "cmd", description: "Command to perform (including arguments)"}],
    example:
'maker.define("buzz").perform.\n\
    exec("echo Buzz");'
};
language_definition.spawn={
    name: "spawn",
    description: "Spawns a process. Spawned processes run as a daemon. This means that the process runs in the background" ,
    arguments: [{type: "direct", name: "cmd", description: "Process to spawn."},
                {type: "options", options: [{name: "args", description: "An optional array of arguments to start the process with."}]}],
    example:
    'maker.define("start-server").perform. \n\
        spawn("node", {args: ["appserver.js", "start"]}). \n\
        echo("Allow node server to start"). \n\
        sleep(2000);'

};
language_definition.kill={
    name: "kill",
    description: "Kills the last spawned process.",
    arguments: [],
    example:
    'maker.define("stop-server").perform. \n\
        kill(). \n\
        echo("Node server stopped");'
};
    