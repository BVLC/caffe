var couchdb = require('./dep/couchdb');


tasks.db=function (options){
        sys.log("Configuring database "+JSON.stringify(options));
        client = couchdb.createClient(options.port?options.port:5984, options.host?options.host:"localhost",options.username,options.password);
        db = client.db(options.db);
        done();
};
tasks.createDb=function (options){
        guardDb();
        passed = function(){
            sys.log("Creating database");
            db.create(function(error, ok){
                if (error) fail(JSON.stringify(error));
                done();
            });
        }
        failed = function(){
            sys.log("Skipping creating of database");
            done();
        }
        if(options.condition){
            options.condition({db: db, failed: failed, passed: passed});
        } else {
            passed();
        };
};
tasks.dropDb=function (options){
        guardDb();
        sys.log("Dropping database");
        db.remove(function(error, ok){
            if (error){
                if(error["error"] && error["error"]=="not_found"){
                    sys.log("Database doesn't exist, skipping drop");
                } else {
                    fail(JSON.stringify(error));
                }
            }
            done();
        });
};
tasks.storeFileInDb=function (options){
        guardDb();
        db.saveDoc(options.id, fs.readFileSync(options.file, options.encoding?options.encoding:'utf8'), function(error, ok) {
            if (error) fail(JSON.stringify(error));
            sys.log('Saved '+options.file+' as '+options.id);
            done();
        });
};
tasks.loadFixtures=function (options){
        function loadFixture(index, filename, last){
            var fileContents = fs.readFileSync(filename, options.encoding?options.encoding:'utf8')
            var fixture = JSON.parse(fileContents);
            var id = fixture._id ? fixture._id : 'fixture' + index;
            db.saveDoc(id, fileContents , function(error, ok) {
                if (error) fail("Error on "+filename+" : "+JSON.stringify(error));
                sys.log('Saved fixture '+filename+' as '+id);
                if(last){
                    sys.puts("Done");
                    done();
                }
            });
        };
        guardDb();
        var fixtures = findFiles(options.path, /.*\.json/);
        for(var i=0; i<fixtures.length; i++){
            loadFixture(i, fixtures[i] , i==fixtures.length-1);
        }
};
tasks.uploadDbDesign=function (options){
        var revision = options.revision ? options.revision : callBacks.previousResult();
        guardDb();
        var design_name='_design/'+options.name;
        var design = JSON.parse(fs.readFileSync(options.file));
        if(revision){
            sys.log("Updating revision "+revision)
            design._rev=revision;
        } else {
            sys.log("Creating new version")
        }
        db.saveDoc(design_name, JSON.stringify(design), function(error, ok) {
            if (error) fail(JSON.stringify(error));
            sys.log('Saved design as '+design_name);
            done();
        });
};
tasks.dbRevisionOf=function (options){
        guardDb();
        db.getDoc(options.docId, function(error, ok) {
            if (error) {
                sys.puts("Document could not be retrieved");
                done();
                return;
            };
            done(ok._rev);
        });
};
tasks.buildDbDesign=function (options){
        sys.log("Building db design file "+options.file);
        var version_path = path.join(options.path, 'version.json')
        var version_file_content = JSON.parse(fs.readFileSync(version_path, 'utf8'));
        var version = version_file_content.version;

        var views_path=options.path+"/views";
        var updates_path=options.path+"/updates";

        var design = { "language": "javascript", version: version, "views": {}, "updates": {} };

        var view_files = fs.readdirSync(views_path);
        var update_files = fs.readdirSync(updates_path);

        for(var i=0; i < view_files.length; i++) {
            var view_name = view_files[i];
            var view_fullpath = path.join(views_path, view_name);
            var filestat = fs.statSync(view_fullpath);
            if (filestat.isDirectory()){
                sys.log("\tAdding view "+view_name);
                var query ={};
                var map_path = path.join(view_fullpath, 'map.js')
                var reduce_path = path.join(view_fullpath, 'reduce.js');

                if(exists(map_path)) query.map = fs.readFileSync(map_path, 'utf8');
                if(exists(reduce_path)) query.map = fs.readFileSync(reduce_path, 'utf8');

                design.views[view_name]=query;
            }
        }
        for(var i=0; i < update_files.length; i++) {
            var update_name = update_files[i];
            var update_fullpath = path.join(updates_path, update_name);
            var filestat = fs.statSync(update_fullpath);
            if (filestat.isDirectory()){
                sys.log("\tAdding update "+update_name);
                var query ={};
                var update_path = path.join(update_fullpath, 'update.js')

                if(exists(update_path)) query = fs.readFileSync( update_path, 'utf8');

                design.updates[update_name]=query;
            }
        }
        if(options.validation){
            var validation_files = ["validator.js", "definitions.js"];
            var validations_path=options.path+"/"+options.validation;
            sys.log("\tAdding validation ");
            var validationFunction = "function (newDoc, oldDoc, userContext){\n"
            for(var i=0; i < validation_files.length; i++) {
                var validation_name = validation_files[i];
                var validation_fullpath = path.join(validations_path, validation_name);
                validationFunction += fs.readFileSync(validation_fullpath, 'utf8');
                validationFunction += " \n"
            }
            validationFunction += " \n\
                 if(newDoc.type){ \n\
                    validationDefinitionsFor('back-end'); \n\
                    var definition = definitions[newDoc.type]; \n\
                    var errors = new Validator(definition).validate(newDoc); \n\
                    if(errors) throw({forbidden: JSON.stringify(errors)}); \n\
                 } \n\
            }";
            design.validate_doc_update = validationFunction;
        }
        fs.writeFileSync(options.file, JSON.stringify(design));
        done();
};
tasks.migrateData=function(options){
        function insertTransformations(from, to){
            var migration_path = path.join(options.path, 'migration/'+from+'-'+to);
            var filestat = fs.statSync(migration_path);
            if (filestat.isDirectory()){
                sys.log("\tAdding transformation "+from+'-'+to);
                callBacks.insert(command("applyTransformation",{path: migration_path, db_version: to}))
            }
        }
        function determineTransformations(from, to){
            if(from==to){
                sys.log("Nothing to migrate")
                done();
                return;
            }
            if(from>to){
                fail("Can't downgrade from "+from+" to "+to)
                return;
            }
            sys.log("Migrating from "+from+ " to "+to);
            for(var step=from; step<to; step++){
                sys.log("Performing migration step "+step)
                insertTransformations(step, step+1);
            }
            done();
        }
        sys.log("Migration db design");
        var version_path = path.join(options.path, 'version.json')
        var version_file_content = JSON.parse(fs.readFileSync(version_path, 'utf8'));
        var target_version = version_file_content.version;
        sys.log("Target version "+target_version);
        guardDb();
        db.getDoc(options.docId, function(error, doc) {
            if (error) {
                fail("Document "+doc.id+" could not be retrieved");
                return;
            };
            determineTransformations(doc.version?doc.version:1, target_version);
        });
    };
tasks.applyTransformation=function(options){
        var count=0;
        var current=0;
        function transformRow(row, db_version, transformation){
            try {
                transformation(row, function(){
                    row.db_version=db_version;
                    db.saveDoc(row._id, row , function(error, ok) {
                        if (error) fail("Could not apply transformation on  "+sys.inspect(row)+"." +JSON.stringify(error));
                        current+=1;
                        sys.log("\t"+row._id+" transformed and saved.");
                        if(current==(count-1)) done();
                    });
                });
            } catch (e){
                fail(e);
            }

        };
        guardDb()
        sys.log("Applying transfomation "+options.path)
        var transform_path = path.join(options.path, "transform.js");
        var transform = {db: db, fail: fail}
        Script.runInNewContext("apply="+fs.readFileSync(transform_path, encoding='utf8'),transform, transform_path);
        var query = "function(doc){if(!doc.db_version || doc.db_version!="+ options.db_version+"){emit(doc._id, doc)}}"
        db.tempView({language: "javascript", map: query}, {}, function(error, result) {
            if (error) {
                sys.log(sys.inspect(error))
                fail("Document could not run view. ");
                return;
            };
            if(result.rows.length==0){
                sys.log("Nothing to transform")
                done();
                return;
            }
            sys.log("Transforming "+result.total_rows)
            count = result.rows.length;
            for(var i=0; i<count; i++){
                var row = result.rows[i].value;
                transformRow(row, options.db_version, transform.apply, i, count)
            }
        })
    };

function guardDb(){
    if(!db) fail("Configure db first");
}

language_definition.db = {arguments: [{type: "direct", name: "db"},{type: "direct", name: "host"},{type: "direct", name: "port"},{type: "direct", name: "username"},{type: "direct", name: "password"}]};
language_definition.dropDb = {arguments: []};
language_definition.createDb = {arguments: [{type: "options", options: [{name: "args"}]}]};
language_definition.storeFileInDb ={arguments: [{type: "direct", name: "id"},{type: "direct", name: "file"},{type: "direct", name: "encoding"}]};
language_definition.loadFixtures ={arguments: [{type: "direct", name: "path"},{type: "direct", name: "encoding"}]};
language_definition.uploadDbDesign = {arguments: [{type: "direct", name: "name"},{type: "direct", name: "file"},{type: "direct", name: "revision"}]};
language_definition.buildDbDesign = {arguments: [{type: "direct", name: "file"},{type: "direct", name: "path"},{type: "options", options: [{name: "validation"}]}]};
language_definition.dbRevisionOf ={arguments: [{type: "direct", name: "docId"}]};
language_definition.migrateData = {arguments: [{type: "direct", name: "docId"},{type: "direct", name: "path"}]};