tasks.echo=function(options){
        sys.log(options.msg?options.msg:callBacks.previousResult());
        done();
    };
tasks.fail=function(options){
        fail(options.msg);
    };
tasks.sleep=function(options){
        sys.log("Waiting for "+options.time+" msec");
        setTimeout(done, options.time);
    };
tasks.waitFor=function(options){
        options.condition({passed: done, failed: function(){setTimeout(function(){tasks.waitFor(options)}, 666)}});

    };
tasks.call=function(options){
        sys.puts(options.goal);
        callBacks.achieve(options.goal);
};


tasks.generate_reference_documentation=function(options){
    this.html = "";
    function appendLine(line, indent){
        if(indent) for(var i=0; i<indent; i++) this.html=this.html+'\t';
        this.html=this.html+line+"\n";
    }
    appendLine('<html><body>');
    appendLine('<h1>Task Reference Documenation</h1>');
    appendLine('<div id="references"><h2>Task list</h2>');
    appendLine('<ul class="tasks">');
    for (var taskname in language_definition) {
        if(!language_definition.hasOwnProperty(taskname)) continue;
        appendLine('<li><a href="#'+taskname+'">'+taskname+'</a></li>',1);
    }
    appendLine('</ul></div>');
    appendLine('<div id="documentation"><h2>Task documentation</h2>');
    for (var taskname in language_definition) {
        if(!language_definition.hasOwnProperty(taskname)) continue;
        var definition = language_definition[taskname];
        appendLine('<a name="'+taskname+'"/>');
        appendLine('<h3>'+taskname+'</h3>');
        if(definition.description) appendLine('<p>'+definition.description+'</p>');
        appendLine('<table>');
        appendLine('<tr><th>Position</th><th>type</th><th>Name</th><th>Description</th></tr>',1);
        definition.arguments.forEach(function (mapping, index){
            var pos = index +1;
            switch(mapping.type){
                case 'direct':
                    appendLine('<tr><td>'+pos+'</td><td>&nbsp;</td><td>'+mapping.name+'</td><td>'+(mapping.description?mapping.description:'')+'</td></tr>',1);
                    break;
                case 'options':
                    var first = true;
                    mapping.options.forEach(function (option, _){
                        if(first){
                            first = false;
                            appendLine('<tr><td>'+pos+'</td><td>hash</td><td>'+option.name+'</td><td>'+(option.description?option.description:'')+'</td></tr>',1);
                        } else {
                            appendLine('<tr><td></td><td>option</td><td>'+option.name+'</td><td>'+option.description+'</td></tr>',1);
                        }
                    });
                    break;
                default:
                break;
            }
        });
        appendLine('</table>');
        if(definition.example) {
            appendLine('Example:');
            appendLine('<pre>'+definition.example+'</pre>');
        }
    }

    appendLine('</div></body></html>');
    if(options.file) fs.writeFileSync(options.file, this.html, 'utf8');

    done(this.html);
}


language_definition.echo={
    name: "echo",
    description: "The echo task allows you to echo message to the console.",
    arguments: [{type: "direct", name: "msg", description: "The text to be echoed. If none provided the result of the previous task will be echoed"}],
    example:
    'maker.define("all").dependsOn("init").perform.\n\
        echo("Will add test here");' 
};
language_definition.fail={
    name: "fail",
    description: "The fail task will stop execution of the build file.",
    arguments: [{type: "direct", name: "msg", description: "The failure reason"}],
    example:
    'maker.define("fail").perform.\n\
        fail("Broken");'
};
language_definition.sleep={
    name: "sleep",
    description: "Will suspend(sleep) the build script for the requested number of seconds.",
    arguments: [{type: "direct", name: "time", description: "Time in milliseconds to sleep"}],
    example:
    'maker.define("sleep").perform.\n\
         echo("now").\n\
         sleep(2000).\n\
         echo("2 secs later");'
};
language_definition.waitFor={
    name: "waitFor",
    description: "Pause the execution of the build script until the condition is met.",
    arguments: [{type: "options", options: [{name: "condition", description: "(Required) condition which must be true to continue"}]}],
    example:
    'maker.define("sleep").perform.\n\
        echo("Waiting for test results").\n\
        waitFor({condition: when.exists("build/test_results.json")});'
};
language_definition.call={
    name: "call",
    description: "Call a defined target.",
    arguments: [{type: "direct", name: "goal", description: 'goal to call'}],
    example:
'maker.define("call").perform.\n\
    waitFor({condition: when.exists(environment.test_result_file)}).\n\
    call("processTestResults")'
};
language_definition.generate_reference_documentation={
    name: "generate_reference_documentation",
    description: "Generates this task reference html help file.",
    arguments: [{type: "direct", name: "file"},{type: "options", options: [{name: "fragment", description: "When true html and body tags are omitted"}]}]
};
