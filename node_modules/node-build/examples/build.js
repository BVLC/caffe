#!/usr/bin/env node

var sys = require('sys'),
    fs = require('fs'),
    maker = require('node-build'),
    when  = maker.when,
    child_process  = require('child_process'),
    Script = process.binding('evals').Script;


var configFile="default";
var target="all";
if(process.argv.length>=3){
    target=process.argv[2];
}
if(process.argv.length>=4){
   configFile=process.argv[3];
}
var environment = {__dirname: __dirname}
Script.runInNewContext(fs.readFileSync(configFile+'.js', encoding='utf8'),environment,configFile+'.js');

var specificFiles = {
    "app/web/scripts.js" : "jmvc file",
    "app/web/apps/some-sample-project/compress.js" : "generated by jmvc, compressed file of all javascript files",
    "app/web/jmvc/end.js" : "jmvc file",
    "app/web/jmvc/include.js" : "jmvc file",
    "app/web/jmvc/plugins/yapi/init.js" : "covered by loading of jasmine test suite",
	"app/web/jmvc/plugins/json/init.js" : "includes json2 for IE",
    "app/server/common/some-sample-project_db.js" : "todo, testing nodejs files",
    "app/server/common/some-sample-project_mailer.js" : "todo, testing nodejs files",
    "app/server/common/some-sample-project_ejs.js" : "todo, testing nodejs files",
    "app/server/common/password_digester.js" : "crypto library cannot be tested from firefox",
    "app/server/server.js" : "todo, testing nodejs files",
	"app/web/apps/some-sample-project/production.js" : "generated file by jmvc containing all script files"
}

var defaultExcludes = function(filename){
           return ((/\/plugins\//.test(filename) && !/\/yapi\//.test(filename))) ||
                  (/\/rhino\//.test(filename)) ||
                  //(/\/jquerytools\//.test(filename)) ||
                  (/app\/database/.test(filename)) ||
                  (/tests/.test(filename)) ||
                  (/app\/server\/lib/.test(filename)) ||
                  (/app\/server\/default.config.js/.test(filename)) || 
                  (/generate/.test(filename)) ||
                  (/app\/web\/resources/.test(filename)) ||
                  (specificFiles[filename]!=null) 
        };

maker.define("init").perform.
    exists(environment.baseDir).
    db(environment.db,environment.db_host,environment.db_port,environment.db_user,environment.db_password).
    mkDir(environment.buildDir).
    rmDir(environment.integrationDir, {recursive: true, condition: when.exists(environment.integrationDir)}).
    mkDir(environment.integrationDir).    
    rmDir(environment.reportDir, {recursive: true, condition: when.exists(environment.reportDir)});
    
maker.define("guardFireFox").perform.
    exec("ps -ae").
    fail("Quit all running firefox instances", {condition: when.contains(environment.binName)});

maker.define("test").perform.
    call("check-complexity").
    call("start-jscoverage").
    echo("Starting browser").
    spawn(environment.firefox, {args: ["http://localhost:9090/jscoverage.html?TestSuite.html"]}).
    echo("Waiting for test results").
    waitFor({condition: when.exists(environment.reportDir)}).
    sleep(2000).
    echo("Stopping browser").
    exec("killall "+environment.binName).
    call("shutdown-jscoverage");

maker.define("check-complexity").perform.
        demandComplexity(10, "./app", defaultExcludes);

maker.define("start-jscoverage").perform.
        spawn(environment.jsCoverageServer,
        {args:  ["--document-root="+environment.baseDir,
                 "--ip-address=0.0.0.0",
                 "--no-instrument=/test",
                 "--no-instrument=/app/database",
                 "--no-instrument=/app/web/jmvc/include.js",
                 "--no-instrument=/app/web/resources",
                 "--no-instrument=/app/web/jmvc/plugins/controller",
                 "--no-instrument=/app/web/jmvc/plugins/dom",
                 "--no-instrument=/app/web/jmvc/plugins/jquery",
				 "--no-instrument=/app/web/jmvc/plugins/json",
                 "--no-instrument=/app/web/jmvc/plugins/lang",
                 "--no-instrument=/app/web/jmvc/plugins/model",
                 "--no-instrument=/app/web/jmvc/plugins/view",
                 "--port=9090",
                 "--report-dir="+environment.reportDir]}).
        echo("Allow jscoverage server to start").
        sleep(2000);

maker.define("shutdown-jscoverage").perform.
        echo("Stopping jscoverage").
        exec(environment.jsCoverageServer+" --shutdown --port=9090 --ip-address=0.0.0.0");


maker.define("db").perform.
    dropDb().
    createDb().
	buildDbDesign("build/db_design.json", "./app/database").
    uploadDbDesign("some-sample-project", "build/db_design.json").
    loadFixtures("./app/database/fixtures/");


maker.define("coverage").perform.
          readCoverage(environment.coverageFile).
          demandAppearanceInCoverage("./app", defaultExcludes).
          demandCoverage(100).
          demandCoverage(100, /^total$/);

maker.define("test-results").perform.
          prepareTestResults(environment.coverageFile, environment.testsresultsoutput).
          readTestResults(environment.testsresultsoutput).
          generateTestHtml(environment.testsresultshtml).
          checkTestResults();


maker.define("integration-test-results").perform.
          readTestResults(environment.integrationDir+"/testresults.json").
          generateTestHtml(environment.integrationDir+"/testresults.html").
          checkTestResults();

maker.define("start-server").perform.
        spawn(environment.appServer, {args: ["start"]}).
        echo("Allow app server to start").
        sleep(2000);

maker.define("shutdown-server").perform.
        spawn(environment.appServer, {args: ["stop"]}).
        echo("Allow app server to stop").
        sleep(2000);

maker.define("integration-tests").perform.
        call("start-server").
        echo("Starting browser").
        spawn(environment.firefox, {args: ["http://localhost:3000/integration.html"+environment.integrationParams]}).
        echo("Waiting for test results").
        waitFor({condition: when.exists(environment.integrationDir+"/testresults.json")}).
        sleep(2000).
        echo("Stopping browser").
        exec("killall "+environment.binName).
        call("shutdown-server")

maker.define("migrate-data").perform.
        echo("Running migration").
        migrateData({docId: "_design/some-sample-project", path:  "./app/database"});
   
maker.define("all").dependsOn("init","guardFireFox", "db", "test", "test-results", "coverage");

maker.define("all-no-db").dependsOn("init", "guardFireFox", "test", "test-results", "coverage");

maker.define("build-db").dependsOn("init","db");

maker.define("migrate-db").dependsOn("init","migrate-data");

maker.define("integration").dependsOn("init","guardFireFox","db","integration-tests", "integration-test-results");

maker.achieve(target);
