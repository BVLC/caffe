#!/usr/bin/env node

var sys = require('sys'),
    fs = require('fs'),
	path = require('path'),
    maker = require('./tools/rain/maker'),
    when  = maker.when,
    child_process  = require('child_process'),
    Script = process.binding('evals').Script;

var configFile="default";
if(process.argv.length<3){
	sys.puts("Please provide a target");
	sys.puts("\tUse 'remote-deploy' for performing a remote deploy");
	sys.puts("\tUse 'deploy' for performing a local deploy based on an archive of the application");
	sys.puts("\tUse 'local-deploy' for performing a remote deploy");
    sys.puts("\tUse 'deploy-db' for performing a db update(or create)");
    sys.puts("\tUse 'drop-db' for dropping the database");
	process.exit(2);
}
var target=process.argv[2];
var version=process.argv.length >= 4 ? process.argv[3] : "";

var environment = {__dirname: __dirname}
Script.runInNewContext(fs.readFileSync(configFile+'.js', encoding='utf8'),environment,configFile+'.js');

maker.define("init")
    .perform
	.exists(environment.baseDir)
	.rmDir(environment.deployPath,{recursive: true, condition: when.exists(environment.deployDir)})
	.mkDir(environment.deployPath);

maker.define("build-deploy-dir")
	.dependsOn("init")
	.perform
	.copyFiles(environment.baseDir +"/app",environment.deployPath,
		function(filename){
			return (/\/etc\//.test(filename)) ||
				   (/\/database\/fixtures\//.test(filename))
	})
	.copyFile("deploy.js",environment.deployPath)
    .copyFile("server.sh",environment.deployPath)
	.copyFiles(environment.baseDir +"/tools",environment.deployPath+"/tools",
		function(filename){
			return !(/\/rain\//.test(filename))
	})
	.copyFile("default.js",environment.deployPath)
	.buildDbDesign("build/deploy/db_design.json", "./app/database")
	.setVersion(environment.deployPath + "/web/some-sample-project.html", version)
	.targetProduction(environment.deployPath + "/web/some-sample-project.html")
 	.exec("cd '" + environment.deployPath +"/web' && chmod +x js && ./js apps/some-sample-project/compress.js")
	.exec("cd '" + environment.baseDir+"'");

maker.define("create-deploy-archive")
	 .dependsOn("build-deploy-dir")
	 .perform
	 .tar(environment.tarballPath, "build/deploy");

maker.define("prepare-remote-deploy")
	 .dependsOn("create-deploy-archive")
	 .perform
     .ssh(environment.remoteHost, "ls -d "+environment.remoteDir+" && mv "+environment.remoteDir+" "+environment.remoteDir+"."+new Date().getTime()+" || echo 'Nothing to backup'")
	 .ssh(environment.remoteHost, "mkdir -p "+environment.remoteDir)
	 .scp(environment.remoteHost, environment.tarballPath,environment.remoteDir)
	 .ssh(environment.remoteHost, "cd '"+environment.remoteDir+"' && tar xvf "+environment.tarballName)
	 .echo("Distribution uploaded");

maker.define("remote-deploy")
	 .dependsOn("prepare-remote-deploy")
	 .perform
	 .ssh(environment.remoteHost, "cd '"+environment.remoteDir+"' && chmod +x deploy.js && ./deploy.js deploy")
	 .echo()

maker.define("deploy")
	 .perform
        .exec("~/some-sample-projectsvc stop")
        .call("deploy-db")
        .exec("~/some-sample-projectsvc start");

maker.define("drop-db")
	 .perform
	 .db(environment.db,environment.db_host,environment.db_port,environment.db_user,environment.db_password)
	 .dropDb()

maker.define("deploy-db")
	 .perform
	 .db(environment.db,environment.db_host,environment.db_port,environment.db_user,environment.db_password)
	 .createDb({condition: when.missingDb()})
     .migrateData({docId: "_design/some-sample-project", path:  "./database"})
	 .dbRevisionOf("_design/some-sample-project")
	 .uploadDbDesign("some-sample-project", "db_design.json");

maker.define("local-deploy")
	 .dependsOn("create-deploy-archive")
	 .perform
	 .echo("Starting node js. Stop with ^C")
	 .exec("cd '"+environment.deployPath+"' && chmod +x deploy.js && ./deploy.js start-local-deploy")

maker.define("start-local-deploy")
	 .perform
	 .call("deploy-db")
	 .exec("cd '"+environment.baseDir+"/server' && node server.js");
	 	 	
maker.achieve(target);
