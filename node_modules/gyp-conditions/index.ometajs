ometa Condition {
    spaces = /[ \t\v\f]+/,

    // 2.3 Keywords
    keyword=/and|del|from|not|while|as|elif|global|or|with|assert|else|if|pass|yield|break|except|import|print|class|exec|in|raise|continue|finally|is|return|def|for|lambda|try/,
    // 2.4 Literals
    literal = stringliteral | floatnumber | longinteger | integer,

    // 2.4.1 String Literals
    stringliteral   =  stringprefix?:sp { this.stringMode = sp ? sp.toLowerCase() : '' } (longstring | shortstring),
    stringprefix    =  ``UR'' | ``Ur'' | ``uR'' | ``ur'' | ``br'' | ``Br'' | ``bR'' | ``BR''
                        | 'r' | 'R' | 'u' | 'U' | 'b' | 'B',
    shortstring     =  '\'' shortstringitem('\'')*:v '\'' -> v.join('')
                        | '"' shortstringitem('"')*:v '"' -> v.join(''),
    longstring      =  seq('\'\'\'') (~seq('\'\'\'') longstringitem)*:v seq('\'\'\'') -> v.join('')
                        | seq('"""') (~seq('"""') longstringitem)*:v seq('"""') -> v.join(''),
    shortstringitem :q = escapeseq | shortstringchar(q),
    shortstringchar :q =  ~('\\' | '\n' | seq(q)) char,
    longstringitem  =  escapeseq | longstringchar,
    longstringchar  =  ~'\\' char,
    escapeseq       =   ?( this.stringMode.match(/u/) ) seq('\\u') <digit digit? digit? digit?>:u -> String.fromCharCode(parseInt(u, 10));
                        | ?( !this.stringMode.match(/r/) ) seq('\\') <octdigit octdigit? octdigit?>:o -> String.fromCharCode(parseInt(o, 8));
                        | ?( !this.stringMode.match(/r/) ) seq('\\x') <hexdigit hexdigit>:x -> String.fromCharCode(parseInt(x, 16));
                        | ?( !this.stringMode.match(/r/) ) seq('\\') char:v -> unescape(v)
                        | ?( this.stringMode.match(/r/) ) seq('\\') char:v -> '\\' + v,

    // 2.4.3 Numeric Literals
    // 2.4.4 Integer and long integer literals
    longinteger = integer:i ('L' | 'l') -> i,
    integer = bininteger | octinteger | hexinteger | decimalinteger,
    decimalinteger = (nonzerodigit digit*):v -> parseInt(v, 10)
        | '0' -> 0,
    octinteger = /0o/i octdigit+:v -> parseInt(v.join(''), 8);
        | ('0' octdigit+):v -> parseInt(v, 8),
    hexinteger = /0x/i hexdigit+:v -> parseInt(v.join(''), 16),
    bininteger = /0b/i bindigit+:v -> parseInt(v.join(''), 2),
    nonzerodigit = /[1-9]/,
    octdigit = /[0-7]/,
    bindigit = /[01]/,
    hexdigit = digit | /[a-f]/i,

    // 2.4.5 Floating point literals
    floatnumber = (exponentfloat | pointfloat):f -> parseFloat(f),
    pointfloat  =  intpart?:x fraction:y -> x + "." + y
        | intpart:x '.' -> x + ".0",
    exponentfloat =  (pointfloat | intpart):f exponent:e -> f + 'e' + e,
    intpart       =  digit+:v -> v.join(''),
    fraction      =  '.' digit+:y -> y.join(''),
    exponent      =  ('e' | 'E') ('+' | '-')?:s digit+:e -> (s ? s : "") + e.join(''),

    // 2.4.6 Imaginary literals
    // Not done yet

    // 2.5 Operators
    operator = '+' | '-' | '*' | ``**'' | ``//'' | '/' | '%'
        | ``<<'' | ``>>'' | '&' | '|' | '^' | '~'
        | ``<='' | '<' | ``>='' | '>' | ``=='' | ``!='' | ``<>'',

    // 2.6 Delimiters
    delimiter =  '(' | ')' | '[' | ']' | '{' | '}'
        | '@' | ',' | ':' | '.' | '`' | '=' | ';'
        | ``+='' | ``-='' | ``*='' | ``/='' | ``//='' | ``%=''
        | ``&='' | ``|='' | ``^='' | ``>>='' | ``<<='' | ``**='',

    // 5.2 Atoms
    atom = identifier | literal | enclosure,
    enclosure = parenth_form | list_display | generator_expression
        | dict_display | set_display | string_conversion | yield_atom,

    // 5.2.1 Identifiers
    identifier = <(letter|'_') (letter | digit | '_')*>:v -> this._options.variables[v],

    // 5.2.3 Parenthesized Forms
    parenth_form =  '(' expression_list? ')',

    // 5.2.4 List displays
    list_display    =  '[' (expression_list | list_comprehension)? ']',
    list_comprehension  =  expression list_for,
    list_for            =  ``for'' target_list ``in'' old_expression_list list_iter?,
    old_expression_list =  old_expression ((',' old_expression)+ ','?)?,
    old_expression      =  or_test | old_lambda_form,
    list_iter           =  list_for | list_if,
    list_if             =  ``if'' old_expression (list_iter)?,

    // 5.2.5 Displays for sets and dictionaries
    comprehension =  expression comp_for,
    comp_for      =  ``for'' target_list ``in'' or_test comp_iter?,
    comp_iter     =  comp_for | comp_if,
    comp_if       =  ``if'' expression_nocond comp_iter?,

    // 5.2.6 Generator expressions
    generator_expression =  '(' expression comp_for ')',

    // 5.2.7 Dictionary displays
    dict_display       =  '{' (key_datum_list | dict_comprehension)? '}',
    key_datum_list     =  key_datum (',' key_datum)* ','?,
    key_datum          =  expression ':' expression,
    dict_comprehension =  expression ':' expression comp_for,

    // 5.2.8 Set displays
    set_display =  '{' (expression_list | comprehension) '}',

    // 5.2.9 String conversions
    string_conversion =  '`' expression_list '`',

    // 5.2.10 Yield expressions
    yield_atom       =  '(' yield_expression ')',
    yield_expression =  ``yield'' expression_list?,

    // 5.3 Primaries
    primary = @spaces? atom | attributeref | subscription | slicing | call,

    // 5.3.1 Attribute references
    attributeref =  primary '.' identifier,

    // 5.3.2 Subscriptions
    subscription =  primary '[' expression_list ']',

    // 5.3.3. Slicings
    slicing          =  simple_slicing | extended_slicing,
    simple_slicing   =  primary '[' short_slice ']',
    extended_slicing =  primary '[' slice_list ']',
    slice_list       =  slice_item (',' slice_item)* ','?,
    slice_item       =  expression | proper_slice | ellipsis,
    proper_slice     =  short_slice | long_slice,
    short_slice      =  lower_bound? ':' upper_bound?,
    long_slice       =  short_slice ':' stride?,
    lower_bound      =  expression,
    upper_bound      =  expression,
    stride           =  expression,
    ellipsis         =  ``...'',

    // 5.3.4 Calls
    call             =  primary '(' [argument_list ','?
                          | expression genexpr_for] ')',
    argument_list    =  positional_arguments (',' keyword_arguments)?
                            (',' '*' expression)? (',' keyword_arguments)?
                            (',' ``**'' expression)?,
                          | keyword_arguments (',' '*' expression)?
                            (',' ``**'' expression)?
                          | '*' expression (',' '*' expression)? (',' ``**'' expression)?
                          | ``**'' expression,
    positional_arguments =  expression (',' expression)*,
    keyword_arguments    =  keyword_item (',' keyword_item)*,
    keyword_item         =  identifier "=" expression,

    // 5.4 Power operator
    power = primary:l "**" u_expr:r -> ['**', l, r]
            | primary,

    // 5.5 Unary arithmetic and bitwise operations
    u_expr =  "-" u_expr:r -> -r
            | "+" u_expr:r -> r
            | "~" u_expr:r -> ~r
            | power,

    // 5.6 Binary arithmetic operations
    m_expr =  m_expr:l "*" u_expr:r -> [ '*', l, r ]
            | m_expr:l "//" u_expr:r -> ['//', l, r]
            | m_expr:l "/" u_expr:r -> ['/', l, r]
            | m_expr:l "%" u_expr:r -> [ '%', l, r ]
            | u_expr,
    a_expr =  a_expr:l "+" m_expr:r -> [ '+', l, r ]
            | a_expr:l "-" m_expr:r -> [ '-', l, r ]
            | m_expr,

    // 5.7 Shifting operations
    shift_expr = shift_expr:l ( "<<" | ">>" ):op a_expr:r -> [ op, l, r]
                | a_expr,

    // 5.8 Binary bitwise operations
    and_expr =  and_expr:l "&" shift_expr:r -> [ '&', l, r ]
                | shift_expr,
    xor_expr =  xor_expr:l "^" and_expr:r -> [ '^', l, r ]
                | and_expr,
    or_expr  =  or_expr:l "|" xor_expr:r -> [ '|', l, r ]
                | xor_expr,

    // 5.9 Comparisons
    comparison    =  or_expr:l comp_operator:op comparison:r -> [ op, l, r]
                    | or_expr,
    comp_operator =  "<=" | ">=" |  "<" | ">" | "==" | "<>" | "!="
                   | "is" "not"? | "not"? "in",

    // 5.10 Boolean operations
    or_test  =  and_test | or_test:l "or" and_test:r -> ['or', l, r],
    and_test =  not_test | and_test:r "and" not_test:r -> ['and', l, r],
    not_test =  comparison | "not" not_test:r -> ['not', r],

    // 5.11 Conditional Expressions
    conditional_expression =  or_test:l "if" or_test:c "else" expression:r -> [ 'if', c, l, r  ]
                    | or_test,
    expression      =  conditional_expression | lambda_form,

    // 5.12 Lambdas
    lambda_form     =  "lambda" parameter_list? ':' expression,
    old_lambda_form =  "lambda" parameter_list? ':' old_expression,

    // 5.13 Expression lists
    expression_list =  expression ( "," expression )* ','?,

    token = @spaces? (@keyword | @literal | @identifier | @operator | @delimiter ):t -> [ t, t ],

    expr = expression:e @spaces? end -> e
}

ometa Evaluator {
    interp = [ '>' interp:x interp:y ]  -> x > y
        | ['<' interp:x interp:y ]      -> x < y
        | ['>=' interp:x interp:y ]     -> x >= y
        | ['<=' interp:x interp:y ]     -> x <= y
        | ['!=' interp:x interp:y ]     -> x != y
        | ['<>' interp:x interp:y ]     -> x != y
        | ['==' interp:x interp:y ]     -> x == y
        | ['is' interp:x interp:y ]     -> x == y
        | ['is not' interp:x interp:y ] -> x != y
        | ['+' interp:x interp:y ] -> x + y
        | ['-' interp:x interp:y ] -> x - y
        | ['*' interp:x interp:y ] -> x * y
        | ['//' interp:x interp:y ] -> Math.floor(x / y)
        | ['/' interp:x interp:y ] -> x / y
        | ['%' interp:x interp:y ] -> x % y
        | ['&' interp:x interp:y ] -> x & y
        | ['|' interp:x interp:y ] -> { x | y }
        | ['^' interp:x interp:y ] -> x ^ y
        | ['<<' interp:x interp:y ] -> x << y
        | ['>>' interp:x interp:y ] -> x >> y
        | ['if' interp:c interp:t interp:e ] -> c ? t : e
        | anything:x -> x
}

function unescape(c) {
    switch (c) {
        case '\n': return '';
        case '\\': return '\\';
        case '"': return '"';
        case "'": return "'";
        case 'a': return '\u0007';
        case 'b': return '\u0008';
        case 'f': return '\u0012';
        case 'n': return '\n';
        case 'N': throw new Error("not supported");
        case 'r': return '\r';
        case 't': return '\t';
        case 'v': return '\u0011';
        default: return "\\" + c;
    }
}

module.exports = function (str, variables) {
    var tree = Condition.matchAll(str, 'expr', { variables: variables });
    return Evaluator.match(tree, 'interp');
}

module.exports.evaluator = Evaluator;

module.exports.parser = Condition;
